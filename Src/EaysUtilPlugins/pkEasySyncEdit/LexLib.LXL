object SyntaxManager1: TSyntaxManager
  Left = 360
  Top = 136
  object SyntAnal36: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16772341
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Search Match'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindow
        Font.Height = -16
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clBlack
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = cl3DDkShadow
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
        BgColor = clInfoBk
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clGradientActiveCaption
      end
      item
        DisplayName = 'Function background'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16774389
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current block bound'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = 
          '#if only one " string to end '#13#10'#of line will be highlighted, '#13#10'#' +
          'otherwise after closing it '#13#10'#string will not be highlighted '#13#10'"' +
          '.*?("|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'end'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = 'end\b'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '#first charecter can'#39't be digit'#13#10'[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'#13#10' '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '#any sequence of digits'#13#10'\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '#all chars after '#39' to end of line'#13#10#39'.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '#Hex is started with $ sign'#13#10'\$[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-&%\$]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'addressof'
              'alias'
              'and'
              'appactivate'
              'as'
              'beep'
              'binary'
              'boolean'
              'byref'
              'byte'
              'byval'
              'call'
              'case'
              'chdir'
              'chdrive'
              'choose'
              'close'
              'const'
              'currency'
              'date'
              'decimal'
              'declare'
              'deletesetting'
              'dim'
              'do'
              'doevents'
              'double'
              'each'
              'else'
              'elseif'
              'empty'
              'end'
              'enum'
              'eqv'
              'erase'
              'error'
              'event'
              'exit'
              'filecopy'
              'for'
              'friend'
              'function'
              'get'
              'gosub'
              'goto'
              'if'
              'imp'
              'implements'
              'in'
              'input'
              'integer'
              'is'
              'kill'
              'let'
              'lib'
              'like'
              'line'
              'load'
              'lock'
              'long'
              'loop'
              'lset'
              'new'
              'next'
              'not'
              'null'
              'object'
              'on'
              'optional'
              'or'
              'paramarray'
              'private'
              'property'
              'public'
              'return'
              'select'
              'set'
              'single'
              'static'
              'step'
              'stop'
              'string'
              'sub'
              'switch'
              'then'
              'to'
              'type'
              'typeof'
              'unlock'
              'until'
              'variant'
              'wend'
              'while'
              'with'
              'withevents'
              'write'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sub begin line break'
        StyleName = 'Function separator'
        BlockName = 'function'
        NotParent = True
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sub end line break'
        StyleName = 'Function separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        LinePos = lbBottom
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sub end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'function'
        StyleName = 'Function background'
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Sub end'
        Highlight = True
        NameFmt = '%s0 %s-1'
        DynHighlight = dhRange
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Reserved word'
        TreeItemImage = 5
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block bound'
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'if'
              'property'
              'select'
              'type'
              'with')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '%s1 ...'
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        SameIdent = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 509
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Dim decl'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'dim')
            TokenTypes = 4
            IgnoreCase = True
          end>
        NotCollapsed = True
        GroupFmt = 'Variables'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemImage = 4
        TreeGroupImage = 0
      end
      item
        DisplayName = '('
        StyleName = 'Current block bound'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '['
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      #39' Syntax highlighting'
      'Function PrintNumber'
      '  Dim Number'
      '  Dim X      34.4e+5'
      ''
      '  Number = 123456'
      '  Response.Write "The number is " & number'
      '             '
      '  For I = 0 To Number'
      '    X = X + &h4c'
      '    X = X - &o8'
      '    X = X + 1.0'
      '  Next'
      ''
      '  I = I + @;  '
      'End Function')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    Gramma.Gramma = 
      'Skip = <Comment>;'#13#10#13#10'// Used'#13#10'NameDetector = <Identifier> Braket' +
      '? '#39'.'#39';'#13#10#13#10'FuncCall = <Identifier> Braket;'#13#10#13#10'Braket = Braket1 | ' +
      'Braket2;'#13#10#13#10'Braket1 = LeftBraket1 '#39')'#39';'#13#10#13#10'LeftBraket1 = LeftBrak' +
      'et1 <Unknown> |'#13#10'             '#39'('#39';'#13#10'             '#13#10'Braket2 = Lef' +
      'tBraket2 '#39']'#39';'#13#10#13#10'LeftBraket2 = LeftBraket2 <Unknown> |'#13#10'        ' +
      '     '#39'['#39';'
    MarkedBlockStyle = 'Marked block'
    SearchMatchStyle = 'Search Match'
    CurrentLineStyle = 'Current Line'
    DefaultStyleName = 'Default'
    Extentions = 'vb'
    LexerName = 'VB script'
    Internal = True
    LineComment = #39
    Left = 144
    Top = 184
  end
  object SyntAnal37: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftColor
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftColor
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatType = ftColor
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
        FormatType = ftColor
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Define'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '(?-i)'#13#10'\#define(.*\\\s*\n)*'#13#10'.*  # last line'#13#10#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^~\.]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__asm'
              '__automated'
              '__cdecl'
              '__classid'
              '__closure'
              '__declspec'
              '__dispid'
              '__except'
              '__export'
              '__fastcall'
              '__finally'
              '__import'
              '__inline'
              '__int64'
              '__msfastcall'
              '__msreturn'
              '__pascal'
              '__property'
              '__published'
              '__stdcall'
              '__try'
              '__uuidof'
              '_asm'
              '_cdecl'
              '_export'
              '_fastcall'
              '_import'
              '_pascal'
              '_stdcall'
              'asm'
              'auto'
              'bool'
              'break'
              'case'
              'catch'
              'cdecl'
              'char'
              'class'
              'const'
              'continue'
              'default'
              'delete'
              'do'
              'double'
              'else'
              'enum'
              'explicit'
              'export'
              'extern'
              'false'
              'float'
              'for'
              'friend'
              'goto'
              'if'
              'import'
              'inline'
              'int'
              'long'
              'mutable'
              'new'
              'operator'
              'pascal'
              'private'
              'protected'
              'public'
              'register'
              'return'
              'short'
              'signed'
              'sizeof'
              'static'
              'struct'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typedef'
              'typeid'
              'typename'
              'union'
              'unsigned'
              'uuid'
              'virtual'
              'void'
              'volatile'
              'wchar_t'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '#if'
        ConditionList = <
          item
            TagList.Strings = (
              '#if')
            CondType = tcMask
            TokenTypes = 512
          end>
        BlockEnd = '#endif'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end
      item
        DisplayName = '#endif'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '#endif')
            TokenTypes = 512
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '::')
            CondType = tcNotEqual
            TokenTypes = 8
          end>
        BlockEnd = 'function end'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function end'
        BlockName = 'function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'cls func'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '::')
            TokenTypes = 8
          end>
        BlockOffset = -1
        BlockEnd = 'cls func end'
        NameFmt = '%s-1'
        GroupFmt = '%s1'
        RefToCondEnd = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'cls func end'
        BlockName = 'cls func'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DrawStaple = True
        CollapseFmt = '{ ... }'
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '{ ... }'
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/*Syntax highlighting*/'
      ''
      '#define MAX(a, b)  \'
      '     ((a > b) ? a : b) '
      '     '
      'void __fastcall TForm1->Button1Click(Sender: TObject);'
      '{'
      ' int Number = 123;  // View integer number style'
      ' double FloatNumber = 0.123e+2;  // View float number style'
      
        ' Caprion = "This Number is " + IntToStr(Number); // View string ' +
        'style'
      ' Number += 0x1FA7; // View HEX style'
      ' char c = '#39'D'#39';'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    Gramma.Gramma = 
      'Skip = <Comment>;'#13#10#13#10'NameDetector = <Identifier> Braket?;'#13#10#13#10'Fun' +
      'cCall = <Identifier> Braket;'#13#10#13#10'Braket = Braket1 | Braket2;'#13#10#13#10'B' +
      'raket1 = LeftBraket1 '#39')'#39';'#13#10#13#10'LeftBraket1 = LeftBraket1 <Unknown>' +
      ' |'#13#10'             '#39'('#39';'#13#10'             '#13#10'Braket2 = LeftBraket2 '#39']'#39';' +
      #13#10#13#10'LeftBraket2 = LeftBraket2 <Unknown> |'#13#10'             '#39'['#39';'#13#10
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'c cpp'
    LexerName = 'C++ Script'
    Internal = True
  end
  object SyntAnal38: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^~!]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'break'
              'case'
              'catch'
              'class'
              'const'
              'continue'
              'debugger'
              'default'
              'delete'
              'do'
              'else'
              'enum'
              'export'
              'extends'
              'false'
              'finally'
              'for'
              'function'
              'if'
              'import'
              'in'
              'new'
              'null'
              'return'
              'super'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typeof'
              'var'
              'void'
              'while'
              'with')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
      end
      item
        DisplayName = 'function'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
          end>
        BlockEnd = 'function end'
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function end'
        BlockName = 'function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      ''
      '// example function'
      'function SetEnabled(A,count)'
      '{'
      '  for(i= 0; i< count;i++)'
      '    A(i).Enabled = !A(i).Enabled;'
      ''
      '}'
      '')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'js'
    LexerName = 'Java Script'
    Internal = True
  end
  object SyntAnal39: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Assembler'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15724510
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Interface section'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clHighlight
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15269887
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Implemenation Section'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16121842
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clRed
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Current function'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16776187
        FormatType = ftBackGround
        MultiLineBorder = True
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16772341
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Search Match'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindow
        Font.Height = -16
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clBlack
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Group (tree)'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Times New Roman'
        Font.Style = [fsBold, fsItalic]
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Intern. function (tree)'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'class (tree)'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor 1'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\{\$.*?\}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor 2'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\(\*\$.*?\*\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\(\*.*?(\*\)|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\{.*?(\}|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\$[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '\#(\d+|\$[\da-f]+)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'and'
              'array'
              'as'
              'asm'
              'begin'
              'case'
              'class'
              'const'
              'constructor'
              'contains'
              'destructor'
              'dispinterface'
              'div'
              'do'
              'downto'
              'dynamic'
              'else'
              'end'
              'except'
              'exports'
              'file'
              'finalization'
              'finally'
              'for'
              'function'
              'goto'
              'if'
              'implementation'
              'in'
              'index'
              'inherited'
              'initialization'
              'inline'
              'interface'
              'is'
              'label'
              'library'
              'mod'
              'nil'
              'not'
              'object'
              'of'
              'or'
              'out'
              'override'
              'package'
              'packed'
              'pascal'
              'private'
              'procedure'
              'program'
              'property'
              'protected'
              'public'
              'published'
              'raise'
              'read'
              'record'
              'register'
              'repeat'
              'requires'
              'resourcestring'
              'safecall'
              'set'
              'shl'
              'shr'
              'stdcall'
              'string'
              'then'
              'threadvar'
              'to'
              'try'
              'type'
              'unit'
              'until'
              'uses'
              'var'
              'virtual'
              'while'
              'with'
              'write'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Forward'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'forward'
              'of')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 10
      end
      item
        DisplayName = 'begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'begin'
              'case'
              'try')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'asm'
        StyleName = 'Assembler'
        ConditionList = <
          item
            TagList.Strings = (
              'asm')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        Highlight = True
        InvertColors = True
        DisplayInTree = False
        DynHighlight = dhRangeNoBound
        HighlightPos = cpAny
        CollapseFmt = 'ASM'
      end
      item
        DisplayName = '{$ifdef}'
        ConditionList = <
          item
            TagList.Strings = (
              '\{\$if[n]?def')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        BlockEnd = '{$endif}'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end
      item
        DisplayName = '{$endif}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '{$endif}')
            TokenTypes = 512
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'until'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'until')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'repeat'
        ConditionList = <
          item
            TagList.Strings = (
              'repeat')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'until'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = 'repeat ...'
      end
      item
        DisplayName = 'class declaration'
        BlockName = 'class declaration'
        NotParent = True
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s-2 %s0'
        GrammaRuleName = 'ClassDecl'
        TreeItemStyle = 'class (tree)'
        TreeItemImage = 1
      end
      item
        DisplayName = 'record'
        ConditionList = <
          item
            TagList.Strings = (
              'record')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        GroupFmt = 'Types'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s-2 %s0'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 3
        TreeGroupImage = 0
      end
      item
        DisplayName = 'end of type'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '{ ... }'
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Function separator'
        StyleName = 'Function separator'
        StrictParent = True
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Internal function'
        BlockName = 'function of class'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'End of internal'
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Intern. function (tree)'
        TreeItemImage = 5
      end
      item
        DisplayName = 'End of internal'
        BlockName = 'Internal function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 1032
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'function'
        StyleName = 'Current function'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '('
              ';')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = 'End of function'
        Highlight = True
        NameFmt = '%s2 %s1'
        GroupFmt = 'Functions'
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '%s2 %s1'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 5
        TreeGroupImage = 0
      end
      item
        DisplayName = 'End of function'
        BlockName = 'function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 1032
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function of class'
        StyleName = 'Current function'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockOffset = 2
        BlockEnd = 'End of class function'
        Highlight = True
        NameFmt = '%s-1'
        GroupFmt = 'class %s1'
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '%s2 %s1%s0%s-1'
        TreeItemImage = 6
      end
      item
        DisplayName = 'End of class function'
        BlockName = 'function of class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Internal function 2'
        BlockName = 'function'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'End of internal 2'
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Intern. function (tree)'
        TreeItemImage = 5
      end
      item
        DisplayName = 'End of internal 2'
        BlockName = 'Internal function 2'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 1028
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <
      item
        Name = 'be'
        Description = 'begin end'
        Code.Strings = (
          'begin'
          '  <caret>'
          'end;')
        Advanced = True
      end
      item
        Name = 'arrayd'
        Description = 'array declaration (var)'
        Code.Strings = (
          'array[0..|] of ;')
      end
      item
        Name = 'arrayc'
        Description = 'array declaration (const)'
        Code.Strings = (
          'array[0..|] of = ();')
      end
      item
        Name = 'cases'
        Description = 'case statement'
        Code.Strings = (
          'case | of'
          '  : ;'
          '  : ;'
          'end;')
      end
      item
        Name = 'casee'
        Description = 'case statement (with else)'
        Code.Strings = (
          'case | of'
          '  : ;'
          '  : ;'
          'else ;'
          'end;')
      end
      item
        Name = 'classf'
        Description = 'class declaration (all parts)'
        Code.Strings = (
          'T| = class(T)'
          'private'
          ''
          'protected'
          ''
          'public'
          ''
          'published'
          ''
          'end;')
      end
      item
        Name = 'classd'
        Description = 'class declaration (no parts)'
        Code.Strings = (
          'T| = class(T)'
          ''
          'end;')
      end
      item
        Name = 'classc'
        Description = 'class declaration (with Create/Destroy overrides)'
        Code.Strings = (
          'T| = class(T)'
          'private'
          ''
          'protected'
          ''
          'public'
          '  constructor Create; override;'
          '  destructor Destroy; override;'
          'published'
          ''
          'end;')
      end
      item
        Name = 'fors'
        Description = 'for (no begin/end)'
        Code.Strings = (
          'for | :=  to  do')
      end
      item
        Name = 'forb'
        Description = 'for statement'
        Code.Strings = (
          'for | :=  to  do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'function'
        Description = 'function declaration'
        Code.Strings = (
          'function |(): ;'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'ifs'
        Description = 'if (no begin/end)'
        Code.Strings = (
          'if | then')
      end
      item
        Name = 'ifb'
        Description = 'if statement'
        Code.Strings = (
          'if | then'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'ife'
        Description = 'if then (no begin/end) else (no begin/end)'
        Code.Strings = (
          'if | then'
          ''
          'else')
      end
      item
        Name = 'ifeb'
        Description = 'if then else'
        Code.Strings = (
          'if | then'
          'begin'
          ''
          'end'
          'else'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'procedure'
        Description = 'procedure declaration'
        Code.Strings = (
          'procedure |();'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'trye'
        Description = 'try except'
        Code.Strings = (
          'try'
          '  |'
          'except'
          ''
          'end;')
      end
      item
        Name = 'tryf'
        Description = 'try finally'
        Code.Strings = (
          'try'
          '  |'
          'finally'
          ''
          'end;')
      end
      item
        Name = 'trycf'
        Description = 'try finally (with Create/Free)'
        Code.Strings = (
          '|variable := typename.Create;'
          'try'
          ''
          'finally'
          '  variable.Free;'
          'end;')
      end
      item
        Name = 'whileb'
        Description = 'while statement'
        Code.Strings = (
          'while | do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'whiles'
        Description = 'while (no begin)'
        Code.Strings = (
          'while | do')
      end
      item
        Name = 'withb'
        Description = 'with statement'
        Code.Strings = (
          'with | do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'withs'
        Description = 'with (no begin)'
        Code.Strings = (
          'with | do')
      end
      item
        Name = 'prop'
        Description = 'property'
        Code.Strings = (
          'property | read  write;')
      end>
    SubAnalyzers = <>
    SampleText.Strings = (
      'implementation'
      '{Syntax highlighting}'
      'procedure TForm1.Button1Click(Sender: TObject);'
      'var'
      ' Number: integer;'
      ' FloatNumber: double;'
      'begin'
      ' Number := 123;  // View integer number style'
      
        ' Caprion := '#39'This Number is '#39' + IntToStr(Number); // View string' +
        ' style'
      ' Inc(Number, $1FA7); // View HEX style'
      ' {Assembler style}'
      ' asm'
      '   MOV  AX, 1234H'
      '   MOV Number, AX'
      ' end;'
      'end;')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Forward')
    Gramma.Gramma = #13#10
    MarkedBlockStyle = 'Marked block'
    SearchMatchStyle = 'Search Match'
    CurrentLineStyle = 'Current Line'
    DefaultStyleName = 'Default'
    Extentions = 'pas'
    LexerName = 'Pascal Script'
    Internal = True
  end
  object LibSyntAnalyzer1: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Assembler'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15724510
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
        BorderColorLeft = clRed
        BorderColorTop = clRed
        BorderColorRight = clRed
        BorderColorBottom = clRed
        MultiLineBorder = True
      end
      item
        DisplayName = 'Interface section'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clHighlight
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15269887
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Implemenation Section'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16121842
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clRed
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Current function'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16776187
        FormatType = ftBackGround
        MultiLineBorder = True
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16772341
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Search Match'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindow
        Font.Height = -16
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clBlack
      end
      item
        DisplayName = 'Group (tree)'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Times New Roman'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Intern. function (tree)'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'class (tree)'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor 1'
        StyleName = 'Preprocessor'
        AlwaysEnabled = True
        TokenType = 9
        Expression = '\{\$.*?\}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor 2'
        StyleName = 'Preprocessor'
        AlwaysEnabled = True
        TokenType = 9
        Expression = '\(\*\$.*?\*\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '(?s)\(\*.*?(\*\)|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '(?s)\{.*?(\}|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\$[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '\#(\d+|\$[\da-f]+)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'and'
              'array'
              'as'
              'asm'
              'begin'
              'case'
              'class'
              'const'
              'constructor'
              'contains'
              'destructor'
              'dispinterface'
              'div'
              'do'
              'downto'
              'dynamic'
              'else'
              'end'
              'except'
              'exports'
              'file'
              'finalization'
              'finally'
              'for'
              'function'
              'goto'
              'if'
              'implementation'
              'in'
              'index'
              'inherited'
              'initialization'
              'inline'
              'interface'
              'is'
              'label'
              'library'
              'mod'
              'nil'
              'not'
              'object'
              'of'
              'or'
              'out'
              'override'
              'package'
              'packed'
              'pascal'
              'private'
              'procedure'
              'program'
              'property'
              'protected'
              'public'
              'published'
              'raise'
              'read'
              'record'
              'register'
              'repeat'
              'requires'
              'resourcestring'
              'safecall'
              'set'
              'shl'
              'shr'
              'stdcall'
              'string'
              'then'
              'threadvar'
              'to'
              'try'
              'type'
              'unit'
              'until'
              'uses'
              'var'
              'virtual'
              'while'
              'with'
              'write'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Forward'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'forward'
              'of')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 10
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '{ ... }'
      end
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        StrictParent = True
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'begin'
              'case'
              'try')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'asm'
        StyleName = 'Assembler'
        ConditionList = <
          item
            TagList.Strings = (
              'asm')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        Highlight = True
        InvertColors = True
        DisplayInTree = False
        DynHighlight = dhRangeNoBound
        HighlightPos = cpAny
        CollapseFmt = 'ASM'
      end
      item
        DisplayName = '{$ifdef}'
        ConditionList = <
          item
            TagList.Strings = (
              '\{\$if[n]?def')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        BlockEnd = '{$endif}'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end
      item
        DisplayName = '{$endif}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '\{\$endif')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'until'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'until')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'repeat'
        ConditionList = <
          item
            TagList.Strings = (
              'repeat')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'until'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = 'repeat ...'
      end
      item
        DisplayName = 'program'
        ConditionList = <
          item
            TagList.Strings = (
              'program'
              'unit')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockEnd = 'Unit end'
        EndOfTextClose = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1'
        TreeItemImage = 0
      end
      item
        DisplayName = 'class declaration'
        BlockName = 'class declaration'
        NotParent = True
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s-2 %s0'
        GrammaRuleName = 'ClassDecl'
        TreeItemStyle = 'class (tree)'
        TreeItemImage = 1
      end
      item
        DisplayName = 'Empty class'
        ConditionList = <>
        NotCollapsed = True
        NameFmt = '%s-2 %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s-2 %s0'
        NoEndRule = True
        GrammaRuleName = 'EmptyClass'
        TreeItemImage = 4
      end
      item
        DisplayName = 'Interface declaration'
        BlockName = 'Interface declaration'
        NotParent = True
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        GroupFmt = 'Interfaces'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s-2 %s0'
        GrammaRuleName = 'IntfDecl'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 2
        TreeGroupImage = 0
      end
      item
        DisplayName = 'record'
        ConditionList = <
          item
            TagList.Strings = (
              'record')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'packed')
            CondType = tcSkip
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        GroupFmt = 'Types'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s-2 %s0'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 3
        TreeGroupImage = 0
      end
      item
        DisplayName = 'Interface section'
        StyleName = 'Interface section'
        BlockName = 'program'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'interface')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Interface section end'
        EndOfTextClose = True
        Highlight = True
        DisplayInTree = False
        NameFmt = 'Interface section'
        DynHighlight = dhRange
        HighlightPos = cpAny
        CollapseFmt = 'Interface section'
      end
      item
        DisplayName = 'Interface section end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'implementation')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Implementation section'
        StyleName = 'Implemenation Section'
        ConditionList = <
          item
            TagList.Strings = (
              'implementation')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Unit end'
        EndOfTextClose = True
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
        CollapseFmt = 'Implementation section'
      end
      item
        DisplayName = 'finalization'
        ConditionList = <
          item
            TagList.Strings = (
              'finalization')
            TokenTypes = 4
            IgnoreCase = True
          end>
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end
      item
        DisplayName = 'Unit end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 2
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Function separator'
        StyleName = 'Function separator'
        BlockName = 'Implementation section'
        StrictParent = True
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Internal function'
        BlockName = 'function of class'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'End of internal'
        HighlightPos = cpAny
        CollapseFmt = '%s1 %s0'
        TreeItemStyle = 'Intern. function (tree)'
        TreeItemImage = 5
      end
      item
        DisplayName = 'End of internal'
        BlockName = 'Internal function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'Single function'
        StyleName = 'Current function'
        BlockName = 'Implementation section'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '('
              ':'
              ';')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = 'End of function'
        Highlight = True
        NameFmt = '%s2 %s1'
        GroupFmt = 'Functions'
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '%s2 %s1'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 5
        TreeGroupImage = 0
      end
      item
        DisplayName = 'End of function'
        BlockName = 'Single function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 1032
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'function of class'
        StyleName = 'Current function'
        BlockName = 'Implementation section'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockOffset = 2
        BlockEnd = 'End of class function'
        Highlight = True
        NameFmt = '%s-1'
        GroupFmt = 'class %s1'
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '%s2 %s1%s0%s-1'
        TreeItemImage = 6
      end
      item
        DisplayName = 'End of class function'
        BlockName = 'function of class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Internal function 2'
        BlockName = 'Single function'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'End of internal 2'
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Intern. function (tree)'
        TreeItemImage = 5
      end
      item
        DisplayName = 'End of internal 2'
        BlockName = 'Internal function 2'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 1028
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'end of type'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Enum'
        BlockName = 'Interface section'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 2
        BlockOffset = 2
        BlockEnd = 'Enum end'
        NameFmt = 'enum %s2'
        GroupFmt = 'Types'
        HighlightPos = cpAny
        CollapseFmt = 'enum %s2 ...'
      end
      item
        DisplayName = 'Enum end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <
      item
        Name = 'be'
        Description = 'begin end'
        Code.Strings = (
          'begin'
          '  <caret>'
          'end;')
        Advanced = True
      end
      item
        Name = 'arrayd'
        Description = 'array declaration (var)'
        Code.Strings = (
          'array[0..|] of ;')
      end
      item
        Name = 'arrayc'
        Description = 'array declaration (const)'
        Code.Strings = (
          'array[0..|] of = ();')
      end
      item
        Name = 'cases'
        Description = 'case statement'
        Code.Strings = (
          'case | of'
          '  : ;'
          '  : ;'
          'end;')
      end
      item
        Name = 'casee'
        Description = 'case statement (with else)'
        Code.Strings = (
          'case | of'
          '  : ;'
          '  : ;'
          'else ;'
          'end;')
      end
      item
        Name = 'classf'
        Description = 'class declaration (all parts)'
        Code.Strings = (
          'T| = class(T)'
          'private'
          ''
          'protected'
          ''
          'public'
          ''
          'published'
          ''
          'end;')
      end
      item
        Name = 'classd'
        Description = 'class declaration (no parts)'
        Code.Strings = (
          'T| = class(T)'
          ''
          'end;')
      end
      item
        Name = 'classc'
        Description = 'class declaration (with Create/Destroy overrides)'
        Code.Strings = (
          'T| = class(T)'
          'private'
          ''
          'protected'
          ''
          'public'
          '  constructor Create; override;'
          '  destructor Destroy; override;'
          'published'
          ''
          'end;')
      end
      item
        Name = 'fors'
        Description = 'for (no begin/end)'
        Code.Strings = (
          'for | :=  to  do')
      end
      item
        Name = 'forb'
        Description = 'for statement'
        Code.Strings = (
          'for | :=  to  do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'function'
        Description = 'function declaration'
        Code.Strings = (
          'function |(): ;'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'ifs'
        Description = 'if (no begin/end)'
        Code.Strings = (
          'if | then')
      end
      item
        Name = 'ifb'
        Description = 'if statement'
        Code.Strings = (
          'if | then'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'ife'
        Description = 'if then (no begin/end) else (no begin/end)'
        Code.Strings = (
          'if | then'
          ''
          'else')
      end
      item
        Name = 'ifeb'
        Description = 'if then else'
        Code.Strings = (
          'if | then'
          'begin'
          ''
          'end'
          'else'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'procedure'
        Description = 'procedure declaration'
        Code.Strings = (
          'procedure |();'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'trye'
        Description = 'try except'
        Code.Strings = (
          'try'
          '  |'
          'except'
          ''
          'end;')
      end
      item
        Name = 'tryf'
        Description = 'try finally'
        Code.Strings = (
          'try'
          '  |'
          'finally'
          ''
          'end;')
      end
      item
        Name = 'trycf'
        Description = 'try finally (with Create/Free)'
        Code.Strings = (
          '|variable := typename.Create;'
          'try'
          ''
          'finally'
          '  variable.Free;'
          'end;')
      end
      item
        Name = 'whileb'
        Description = 'while statement'
        Code.Strings = (
          'while | do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'whiles'
        Description = 'while (no begin)'
        Code.Strings = (
          'while | do')
      end
      item
        Name = 'withb'
        Description = 'with statement'
        Code.Strings = (
          'with | do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'withs'
        Description = 'with (no begin)'
        Code.Strings = (
          'with | do')
      end
      item
        Name = 'prop'
        Description = 'property'
        Code.Strings = (
          'property | read  write;')
      end
      item
        Name = 't'
        Description = 'Test'
        Code.Strings = (
          'test <caret> and more <marker> <marker>'
          'if <marker>'
          'then <marker>')
        Advanced = True
      end>
    SubAnalyzers = <
      item
        DisplayName = 'asm section'
        StartExpression = 'asm\b'#13#10
        EndExpression = 'end'#13#10
        SyntAnalyzer = SyntAnalyzer13
      end>
    SampleText.Strings = (
      'implementation'
      '{Syntax highlighting}'
      'procedure TForm1.Button1Click(Sender: TObject);'
      'var'
      ' Number: integer;'
      ' FloatNumber: double;'
      'begin'
      ' Number := 123;  // View integer number style'
      
        ' Caprion := '#39'This Number is '#39' + IntToStr(Number); // View string' +
        ' style'
      ' Inc(Number, $1FA7); // View HEX style'
      ' {Assembler style}'
      ' asm'
      '   MOV  AX, 1234H'
      '   MOV Number, AX'
      ' end;'
      'end;')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Forward')
    Gramma.Gramma = 
      'Skip = <Comment> | <Preprocessor>;'#13#10#13#10'// Class declaration'#13#10'Clas' +
      'sDecl = <Identifier> '#39'='#39' '#39'class'#39' InheritedList? <Identifier>;'#13#10#13 +
      #10'EmptyClass = <Identifier> '#39'='#39' "class" InheritedList '#39';'#39'; '#13#10#13#10'//' +
      ' Interface declaration'#13#10'IntfDecl = <Identifier> '#39'='#39' ("interface"' +
      ' | "dispinterface") InheritedList? IntfNextToken;'#13#10'IntfNextToken' +
      ' = '#39'['#39' | <Identifier>; '#13#10#13#10'InheritedList = '#39'('#39' IdentList '#39')'#39';'#13#10'I' +
      'dentList = <Identifier> ('#39','#39' <Identifier>)*;'#13#10
    MarkedBlockStyle = 'Marked block'
    SearchMatchStyle = 'Search Match'
    CurrentLineStyle = 'Current Line'
    DefaultStyleName = 'Default'
    Extentions = 'pas inc dpr dpk'
    LexerName = 'Pascal'
    LineComment = '//'
  end
  object SyntAnalyzer2: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatType = ftColor
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(.|\\")*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '\~?[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Define'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '(?-i)'#13#10'\#define(.*\\\s*\n)*'#13#10'.*  # last line'#13#10#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^\.]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__asm'
              '__automated'
              '__cdecl'
              '__classid'
              '__closure'
              '__declspec'
              '__dispid'
              '__except'
              '__export'
              '__fastcall'
              '__finally'
              '__import'
              '__inline'
              '__int64'
              '__msfastcall'
              '__msreturn'
              '__pascal'
              '__property'
              '__published'
              '__stdcall'
              '__try'
              '__uuidof'
              '_asm'
              '_cdecl'
              '_export'
              '_fastcall'
              '_import'
              '_pascal'
              '_stdcall'
              'asm'
              'auto'
              'bool'
              'break'
              'case'
              'catch'
              'cdecl'
              'char'
              'class'
              'const'
              'continue'
              'default'
              'delete'
              'do'
              'double'
              'else'
              'enum'
              'explicit'
              'export'
              'extern'
              'false'
              'float'
              'for'
              'friend'
              'goto'
              'if'
              'inline'
              'int'
              'long'
              'mutable'
              'new'
              'operator'
              'pascal'
              'private'
              'protected'
              'public'
              'register'
              'return'
              'short'
              'signed'
              'sizeof'
              'static'
              'struct'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typedef'
              'typeid'
              'typename'
              'union'
              'unsigned'
              'uuid'
              'virtual'
              'void'
              'volatile'
              'wchar_t'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '#if'
        ConditionList = <
          item
            TagList.Strings = (
              '#if')
            CondType = tcMask
            TokenTypes = 512
          end>
        BlockEnd = '#endif'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end
      item
        DisplayName = '#endif'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '#endif')
            TokenTypes = 512
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function begin'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '::')
            CondType = tcNotEqual
            TokenTypes = 8
          end>
        IdentIndex = -1
        BlockOffset = -1
        BlockEnd = 'function end'
        RefToCondEnd = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function end'
        BlockName = 'function begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'cls func'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '::')
            TokenTypes = 8
          end>
        BlockOffset = -1
        BlockEnd = 'cls func end'
        NameFmt = '%s-1'
        GroupFmt = '%s1'
        RefToCondEnd = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'cls func end'
        BlockName = 'cls func'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '{ ... }'
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/*Syntax highlighting*/'
      ''
      '#define MAX(a, b)  \'
      '     ((a > b) ? a : b) '
      '     '
      'void __fastcall TForm1->Button1Click(Sender: TObject);'
      '{'
      ' int Number = 123;  // View integer number style'
      ' double FloatNumber = 0.123e+2;  // View float number style'
      
        ' Caprion = "This Number is " + IntToStr(Number); // View string ' +
        'style'
      ' Number += 0x1FA7; // View HEX style'
      ' char c = '#39'D'#39';'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'c cpp cxx h hpp'
    LexerName = 'C++'
    LineComment = '//'
  end
  object SyntAnalyzer3: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Line separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clRed
      end
      item
        DisplayName = 'Sub background'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15663082
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = 
          '#if only one " string to end '#13#10'#of line will be highlighted, '#13#10'#' +
          'otherwise after closing it '#13#10'#string will not be highlighted '#13#10'"' +
          '.*?("|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'end'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = 'end'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '#first charecter can'#39't be digit'#13#10'[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'#13#10' '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '#any sequence of digits'#13#10'\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '#all chars after '#39' to end of line'#13#10#39'.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '#Hex is started with $ sign'#13#10'\$[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-&%\$]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'addressof'
              'alias'
              'and'
              'appactivate'
              'as'
              'beep'
              'binary'
              'boolean'
              'byref'
              'byte'
              'byval'
              'call'
              'case'
              'chdir'
              'chdrive'
              'choose'
              'close'
              'const'
              'currency'
              'date'
              'decimal'
              'declare'
              'deletesetting'
              'dim'
              'do'
              'doevents'
              'double'
              'each'
              'else'
              'elseif'
              'empty'
              'end'
              'enum'
              'eqv'
              'erase'
              'error'
              'event'
              'exit'
              'filecopy'
              'for'
              'friend'
              'function'
              'get'
              'gosub'
              'goto'
              'if'
              'imp'
              'implements'
              'in'
              'input'
              'integer'
              'is'
              'kill'
              'let'
              'lib'
              'like'
              'line'
              'load'
              'lock'
              'long'
              'loop'
              'lset'
              'new'
              'next'
              'not'
              'null'
              'object'
              'on'
              'optional'
              'or'
              'paramarray'
              'private'
              'property'
              'public'
              'return'
              'select'
              'set'
              'single'
              'static'
              'step'
              'stop'
              'string'
              'sub'
              'switch'
              'then'
              'to'
              'type'
              'typeof'
              'unlock'
              'until'
              'variant'
              'wend'
              'while'
              'with'
              'withevents'
              'write'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sub begin line break'
        StyleName = 'Line separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sub end line break'
        StyleName = 'Line separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        LinePos = lbBottom
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sub start'
        StyleName = 'Sub background'
        BlockName = 'Sub start'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Sub end'
        Highlight = True
        NameFmt = '%s1 %s0'
        DynHighlight = dhRange
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sub end'
        BlockName = 'Sub start'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'function'
              'if'
              'property'
              'select'
              'type'
              'with')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'End'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s1 %s0'
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        SameIdent = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 509
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      #39' Syntax highlighting'
      'Function PrintNumber'
      '  Dim Number'
      '  Dim X      34.4e+5'
      ''
      '  Number = 123456'
      '  Response.Write "The number is " & number'
      '             '
      '  For I = 0 To Number'
      '    X = X + &h4c'
      '    X = X - &o8'
      '    X = X + 1.0'
      '  Next'
      ''
      '  I = I + @;  '
      'End Function')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'bas'
    LexerName = 'Visual Basic'
    LineComment = #39
  end
  object SyntAnal22: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Text'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BorderColorLeft = clGray
        BorderColorTop = clGray
        BorderColorRight = clGray
        BorderColorBottom = clGray
        MultiLineBorder = True
      end
      item
        DisplayName = 'Tag bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'CDATA'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tag Key'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'ERROR content'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tag ident'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tag param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tag properties'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Current tag'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15987699
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current Block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15400927
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'DTD element type'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'DTD bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -19
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Tree item (attribute)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 14155775
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (tag)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'PI'
        TokenType = 12
        Expression = '(?s)<\?.*?(\?>|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)<!--.*?(-->|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CDATA start'
        StyleName = 'CDATA'
        TokenType = 11
        Expression = '<!\[CDATA\['#13#10'#(?s)<!\[CDATA\[.*?(\]\]>|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CDATA Text'
        StyleName = 'Text'
        BlockName = 'CDATA begin'
        Expression = '(?s)[^\]]*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CDATA end'
        StyleName = 'Tag bound'
        BlockName = 'CDATA begin'
        TokenType = 14
        Expression = '\]\]>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '<'
        StyleName = 'Tag bound'
        TokenType = 9
        Expression = '<[/!\-\:\?]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '>'
        StyleName = 'Tag bound'
        TokenType = 10
        Expression = '[/\?]?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'DTD Element type'
        StyleName = 'DTD element type'
        BlockName = 'DTD element start'
        TokenType = 2
        Expression = '(?s)\((\(.*?\)|.)*?\)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'DTD bounds: [ ] '
        StyleName = 'DTD bound'
        BlockName = 'DOCTYPE begin'
        Expression = '[\[\]]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag param'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        TokenType = 4
        Expression = '(?s)".*?"'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '='
        StyleName = 'Tag bound'
        TokenType = 3
        Expression = '='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag ident'
        StyleName = 'Tag ident'
        BlockName = 'Tag begin'
        TokenType = 2
        Expression = '[^>=\?\s/]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Error content'
        StyleName = 'ERROR content'
        BlockName = 'Tag begin'
        Expression = '[^>\s]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '&...'
        StyleName = 'Tag Key'
        TokenType = 4
        Expression = '&\w+;'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text'
        StyleName = 'Text'
        BlockName = 'CDATA begin'
        NotParent = True
        TokenType = 4
        Expression = '[^<&]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Tag begin'
        StyleName = 'Current tag'
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Tag end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhRangeNoBound
        HighlightPos = cpRange
      end
      item
        DisplayName = 'Tag end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'DTD element start'
        ConditionList = <
          item
            TagList.Strings = (
              'DOCTYPE')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<!')
            TokenTypes = 512
          end>
        BlockOffset = 1
        BlockEnd = 'DTD element end'
        NameFmt = '%s-1'
        HighlightPos = cpAny
        CollapseFmt = '< %s0 %s-1 >'
      end
      item
        DisplayName = 'DTD element end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'DOCTYPE begin'
        ConditionList = <
          item
            TagList.Strings = (
              'DOCTYPE')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<!')
            TokenTypes = 512
          end>
        BlockOffset = 1
        BlockEnd = 'DOCTYPE end'
        NameFmt = 'Document structure'
        HighlightPos = cpAny
        CollapseFmt = 'Document structure'
      end
      item
        DisplayName = 'DOCTYPE end'
        BlockName = 'DOCTYPE begin'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '>')
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag keys'
        StyleName = 'Tag Key'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 512
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag block begin'
        StyleName = 'Current Block'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 512
          end>
        BlockEnd = 'Tag block end'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = ' %s0 >'
        TreeItemStyle = 'Tree item (tag)'
      end
      item
        DisplayName = 'Tag block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '</')
            TokenTypes = 512
          end>
        SameIdent = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End of simple tag'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/>')
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag block begin'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Comment begin'
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'CDATA end'
        BlockName = 'CDATA begin'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 16384
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'CDATA begin'
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        BlockEnd = 'CDATA end'
        NameFmt = '%s-1'
        HighlightPos = cpAny
        CollapseFmt = 'CDATA'
      end
      item
        DisplayName = 'Tag attribute'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 16
          end
          item
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NameFmt = '%s0 %s-1 %s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemStyle = 'Tree item (attribute)'
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '<?xml version="1.0" encoding="ISO-8859-1" ?>'
      ''
      '<!DOCTYPE web-app ['
      
        '  <!ELEMENT web-app (icon?, display-name?, description?, distrib' +
        'utable?,'
      '  context-param*, filter*, filter-mapping*, listener*, servlet*,'
      
        '  servlet-mapping*, session-config?, mime-mapping*, welcome-file' +
        '-list?,'
      
        '  error-page*, taglib*, resource-env-ref*, resource-ref*, securi' +
        'ty-constraint*,'
      
        '  login-config?, security-role*, env-entry*, ejb-ref*,  ejb-loca' +
        'l-ref*)>'
      '  <!ELEMENT auth-constraint (description?, role-name*)>'
      '  <!ELEMENT auth-method (#PCDATA)>'
      
        '  <!ELEMENT context-param (param-name, param-value, description?' +
        ')>'
      '  <!ELEMENT description (#PCDATA)>'
      '  <!ELEMENT display-name (#PCDATA)>'
      '  <!ELEMENT distributable EMPTY>'
      '  <!ELEMENT ejb-link (#PCDATA)>'
      
        '  <!ELEMENT ejb-local-ref (description?, ejb-ref-name, ejb-ref-t' +
        'ype,local-home, local, ejb-link?)>'
      
        '  <!ELEMENT ejb-ref (description?, ejb-ref-name, ejb-ref-type,ho' +
        'me, remote, ejb-link?)>'
      '  <!ELEMENT ejb-ref-name (#PCDATA)>'
      '  <!ELEMENT ejb-ref-type (#PCDATA)>'
      
        '  <!ELEMENT env-entry (description?, env-entry-name, env-entry-v' +
        'alue?,env-entry-type)>'
      '  <!ELEMENT env-entry-name (#PCDATA)>'
      '  <!ELEMENT env-entry-type (#PCDATA)>'
      '  <!ELEMENT env-entry-value (#PCDATA)>'
      '  <!ELEMENT error-code (#PCDATA)>'
      
        '  <!ELEMENT error-page ((error-code | exception-type), location)' +
        '>'
      '  <!ELEMENT exception-type (#PCDATA)>'
      '  <!ELEMENT extension (#PCDATA)>'
      
        '  <!ELEMENT filter (icon?, filter-name, display-name?, descripti' +
        'on?,filter-class, init-param*)>'
      '  <!ELEMENT filter-class (#PCDATA)>'
      
        '  <!ELEMENT filter-mapping (filter-name, (url-pattern | servlet-' +
        'name))>'
      '  <!ELEMENT filter-name (#PCDATA)>'
      '  <!ELEMENT form-error-page (#PCDATA)>'
      
        '  <!ELEMENT form-login-config (form-login-page, form-error-page)' +
        '>'
      '  <!ELEMENT form-login-page (#PCDATA)>'
      '  <!ELEMENT home (#PCDATA)>'
      '  <!ELEMENT http-method (#PCDATA)>'
      '  <!ELEMENT icon (small-icon?, large-icon?)>'
      '  <!ELEMENT init-param (param-name, param-value, description?)>'
      '  <!ELEMENT jsp-file (#PCDATA)>'
      '  <!ELEMENT large-icon (#PCDATA)>'
      '  <!ELEMENT listener (listener-class)>'
      '  <!ELEMENT listener-class (#PCDATA)>'
      '  <!ELEMENT load-on-startup (#PCDATA)>'
      '  <!ELEMENT local (#PCDATA)>'
      '  <!ELEMENT local-home (#PCDATA)>'
      '  <!ELEMENT location (#PCDATA)>'
      
        '  <!ELEMENT login-config (auth-method?, realm-name?, form-login-' +
        'config?)>'
      '  <!ELEMENT mime-mapping (extension, mime-type)>'
      '  <!ELEMENT mime-type (#PCDATA)>'
      '  <!ELEMENT param-name (#PCDATA)>'
      '  <!ELEMENT param-value (#PCDATA)>'
      '  <!ELEMENT realm-name (#PCDATA)>'
      '  <!ELEMENT remote (#PCDATA)>'
      '  <!ELEMENT res-auth (#PCDATA)>'
      '  <!ELEMENT res-ref-name (#PCDATA)>'
      '  <!ELEMENT res-sharing-scope (#PCDATA)>'
      '  <!ELEMENT res-type (#PCDATA)>'
      
        '  <!ELEMENT resource-env-ref (description?, resource-env-ref-nam' +
        'e,resource-env-ref-type)>'
      '  <!ELEMENT resource-env-ref-name (#PCDATA)>'
      '  <!ELEMENT resource-env-ref-type (#PCDATA)>'
      
        '  <!ELEMENT resource-ref (description?, res-ref-name, res-type, ' +
        'res-auth,res-sharing-scope?)>'
      '  <!ELEMENT role-link (#PCDATA)>'
      '  <!ELEMENT role-name (#PCDATA)>'
      '  <!ELEMENT run-as (description?, role-name)>'
      
        '  <!ELEMENT security-constraint (display-name?, web-resource-col' +
        'lection+,auth-constraint?, user-data-constraint?)>'
      '  <!ELEMENT security-role (description?, role-name)>'
      
        '  <!ELEMENT security-role-ref (description?, role-name, role-lin' +
        'k?)>'
      
        '  <!ELEMENT servlet (icon?, servlet-name, display-name?, descrip' +
        'tion?,'
      
        '    (servlet-class|jsp-file), init-param*, load-on-startup?, run' +
        '-as?, security-role-ref*)>'
      '  <!ELEMENT servlet-class (#PCDATA)>'
      '  <!ELEMENT servlet-mapping (servlet-name, url-pattern)>'
      '  <!ELEMENT servlet-name (#PCDATA)>'
      '  <!ELEMENT session-config (session-timeout?)>'
      '  <!ELEMENT session-timeout (#PCDATA)>'
      '  <!ELEMENT small-icon (#PCDATA)>'
      '  <!ELEMENT taglib (taglib-uri, taglib-location)>'
      '  <!ELEMENT taglib-location (#PCDATA)>'
      '  <!ELEMENT taglib-uri (#PCDATA)>'
      '  <!ELEMENT transport-guarantee (#PCDATA)>'
      '  <!ELEMENT url-pattern (#PCDATA)>'
      
        '  <!ELEMENT user-data-constraint (description?, transport-guaran' +
        'tee)>'
      
        '  <!ELEMENT web-resource-collection (web-resource-name, descript' +
        'ion?,url-pattern*, http-method*)>'
      '  <!ELEMENT web-resource-name (#PCDATA)>'
      '  <!ELEMENT welcome-file (#PCDATA)>'
      '  <!ELEMENT welcome-file-list (welcome-file+)>'
      '  <!ATTLIST auth-constraint id ID #IMPLIED>'
      '  <!ATTLIST auth-method id ID #IMPLIED>'
      '  <!ATTLIST context-param id ID #IMPLIED>'
      '  <!ATTLIST description id ID #IMPLIED>'
      '  <!ATTLIST display-name id ID #IMPLIED>'
      '  <!ATTLIST distributable id ID #IMPLIED>'
      '  <!ATTLIST ejb-link id ID #IMPLIED>'
      '  <!ATTLIST ejb-local-ref id ID #IMPLIED>'
      '  <!ATTLIST ejb-ref id ID #IMPLIED>'
      '  <!ATTLIST ejb-ref-name id ID #IMPLIED>'
      '  <!ATTLIST ejb-ref-type id ID #IMPLIED>'
      '  <!ATTLIST env-entry id ID #IMPLIED>'
      '  <!ATTLIST env-entry-name id ID #IMPLIED>'
      '  <!ATTLIST env-entry-type id ID #IMPLIED>'
      '  <!ATTLIST env-entry-value id ID #IMPLIED>'
      '  <!ATTLIST error-code id ID #IMPLIED>'
      '  <!ATTLIST error-page id ID #IMPLIED>'
      '  <!ATTLIST exception-type id ID #IMPLIED>'
      '  <!ATTLIST extension id ID #IMPLIED>'
      '  <!ATTLIST filter id ID #IMPLIED>'
      '  <!ATTLIST filter-class id ID #IMPLIED>'
      '  <!ATTLIST filter-mapping id ID #IMPLIED>'
      '  <!ATTLIST filter-name id ID #IMPLIED>'
      '  <!ATTLIST form-error-page id ID #IMPLIED>'
      '  <!ATTLIST form-login-config id ID #IMPLIED>'
      '  <!ATTLIST form-login-page id ID #IMPLIED>'
      '  <!ATTLIST home id ID #IMPLIED>'
      '  <!ATTLIST http-method id ID #IMPLIED>'
      '  <!ATTLIST icon id ID #IMPLIED>'
      '  <!ATTLIST init-param id ID #IMPLIED>'
      '  <!ATTLIST jsp-file id ID #IMPLIED>'
      '  <!ATTLIST large-icon id ID #IMPLIED>'
      '  <!ATTLIST listener id ID #IMPLIED>'
      '  <!ATTLIST listener-class id ID #IMPLIED>'
      '  <!ATTLIST load-on-startup id ID #IMPLIED>'
      '  <!ATTLIST local id ID #IMPLIED>'
      '  <!ATTLIST local-home id ID #IMPLIED>'
      '  <!ATTLIST location id ID #IMPLIED>'
      '  <!ATTLIST login-config id ID #IMPLIED>'
      '  <!ATTLIST mime-mapping id ID #IMPLIED>'
      '  <!ATTLIST mime-type id ID #IMPLIED>'
      '  <!ATTLIST param-name id ID #IMPLIED>'
      '  <!ATTLIST param-value id ID #IMPLIED>'
      '  <!ATTLIST realm-name id ID #IMPLIED>'
      '  <!ATTLIST remote id ID #IMPLIED>'
      '  <!ATTLIST res-auth id ID #IMPLIED>'
      '  <!ATTLIST res-ref-name id ID #IMPLIED>'
      '  <!ATTLIST res-sharing-scope id ID #IMPLIED>'
      '  <!ATTLIST res-type id ID #IMPLIED>'
      '  <!ATTLIST resource-env-ref id ID #IMPLIED>'
      '  <!ATTLIST resource-env-ref-name id ID #IMPLIED>'
      '  <!ATTLIST resource-env-ref-type id ID #IMPLIED>'
      '  <!ATTLIST resource-ref id ID #IMPLIED>'
      '  <!ATTLIST role-link id ID #IMPLIED>'
      '  <!ATTLIST role-name id ID #IMPLIED>'
      '  <!ATTLIST run-as id ID #IMPLIED>'
      '  <!ATTLIST security-constraint id ID #IMPLIED>'
      '  <!ATTLIST security-role id ID #IMPLIED>'
      '  <!ATTLIST security-role-ref id ID #IMPLIED>'
      '  <!ATTLIST servlet id ID #IMPLIED>'
      '  <!ATTLIST servlet-class id ID #IMPLIED>'
      '  <!ATTLIST servlet-mapping id ID #IMPLIED>'
      '  <!ATTLIST servlet-name id ID #IMPLIED>'
      '  <!ATTLIST session-config id ID #IMPLIED>'
      '  <!ATTLIST session-timeout id ID #IMPLIED>'
      '  <!ATTLIST small-icon id ID #IMPLIED>'
      '  <!ATTLIST taglib id ID #IMPLIED>'
      '  <!ATTLIST taglib-location id ID #IMPLIED>'
      '  <!ATTLIST taglib-uri id ID #IMPLIED>'
      '  <!ATTLIST transport-guarantee id ID #IMPLIED>'
      '  <!ATTLIST url-pattern id ID #IMPLIED>'
      '  <!ATTLIST url-pattern beep ID #IMPLIED>'
      '  <!ATTLIST user-data-constraint id ID #IMPLIED>'
      '  <!ATTLIST web-app id ID #IMPLIED>'
      '  <!ATTLIST web-resource-collection id ID #IMPLIED>'
      '  <!ATTLIST web-resource-name id ID #IMPLIED>'
      '  <!ATTLIST welcome-file id ID #IMPLIED>'
      '  <!ATTLIST welcome-file-list id ID #IMPLIED>'
      ']>'
      ''
      '<web-app>'
      '    <display-name abc="123" '
      '    def="true"></display-name>'
      '    <description></description>'
      '    <filter-mapping>'
      '        <filter-name></filter-name>'
      '        <url-pattern></url-pattern>'
      '    </filter-mapping>'
      '</web-app>'
      '')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Tag Open'
      'Tag Close'
      'CDATA'
      'PI'
      'Attrib. value'
      'CDATA end')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'xml xsl xslt mmpa mmpr sti bdsproj xsd'
    LexerName = 'XML documents'
    Left = 140
    Top = 160
  end
  object SyntAnal50: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
        BorderColorLeft = clRed
        BorderColorTop = clNavy
        BorderColorRight = clMaroon
        BorderColorBottom = clRed
        MultiLineBorder = True
      end
      item
        DisplayName = 'Reserved PL/SQL word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'SQL Functions'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'SQL*Plus Meta Commands'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Datatypes'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsUnderline]
      end
      item
        DisplayName = 'Predefined Exceptions'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Default Oracle Packages'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatFlags = [ffBold, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Public Package Procedure'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clRed
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clBtnFace
        FormatType = ftColor
        BorderTypeLeft = blDot
        BorderColorLeft = clMaroon
        BorderTypeTop = blDot
        BorderColorTop = clMaroon
        BorderTypeRight = blDot
        BorderColorRight = clMaroon
        BorderTypeBottom = blDot
        BorderColorBottom = clMaroon
      end
      item
        DisplayName = 'Current function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16777205
        FormatType = ftBackGround
        MultiLineBorder = True
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 13369080
        FormatType = ftBackGround
      end
      item
        DisplayName = '()'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
        BgColor = clBtnFace
        BorderTypeLeft = blDot
        BorderTypeTop = blDot
        BorderTypeRight = blDot
        BorderTypeBottom = blDot
      end
      item
        DisplayName = 'Big Bold (tree)'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Times New Roman'
        Font.Style = [fsBold]
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Group (tree)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Function (tree)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Data Dictionary'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Public Package Procedure'
        StyleName = 'Public Package Procedure'
        TokenType = 2
        Expression = 'DBMS_\w+?\.\w+'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)'#39'.*?('#39'|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '--.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex str'
        StyleName = 'Number'
        TokenType = 5
        Expression = '0x\h*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Reserved words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ACCESS'
              'ADD'
              'ALL'
              'ALTER'
              'AND'
              'ANY'
              'AS'
              'ASC'
              'AUDIT'
              'BETWEEN'
              'BY'
              'CHAR'
              'CHECK'
              'CLUSTER'
              'COLUMN'
              'COMMENT'
              'COMPRESS'
              'CONNECT'
              'CONNECT_BY_ISCYCLE'
              'CONNECT_BY_ISLEAF'
              'CREATE'
              'CURRENT'
              'CURRVAL '
              'DATE'
              'DECIMAL'
              'DEFAULT'
              'DELETE'
              'DESC'
              'DISTINCT'
              'DROP'
              'ELSE'
              'EXCLUSIVE'
              'EXISTS'
              'FILE'
              'FLOAT'
              'FOR'
              'FROM'
              'GRANT'
              'GROUP'
              'HAVING'
              'IDENTIFIED'
              'IMMEDIATE'
              'IN'
              'INCREMENT'
              'INDEX'
              'INITIAL'
              'INSERT'
              'INTEGER'
              'INTERSECT'
              'INTO'
              'IS'
              'LEVEL'
              'LIKE'
              'LOCK'
              'LONG'
              'MAXEXTENTS'
              'MERGE'
              'MINUS'
              'MLSLABEL'
              'MODE'
              'MODIFY'
              'NEXTVAL'
              'NOAUDIT'
              'NOCOMPRESS'
              'NOT'
              'NOWAIT'
              'NULL'
              'NUMBER'
              'OBJECT_ID'
              'OBJECT_VALUE'
              'OF'
              'OFFLINE'
              'ON'
              'ONLINE'
              'OPTION'
              'OR'
              'ORA_ROWSCN'
              'ORDER'
              'PCTFREE'
              'PRIOR'
              'PRIVILEGES'
              'PUBLIC'
              'RAW'
              'RENAME'
              'RESOURCE'
              'REVOKE'
              'ROW'
              'ROWID'
              'ROWNUM'
              'ROWS'
              'SELECT'
              'SESSION'
              'SET'
              'SHARE'
              'SIZE'
              'SMALLINT'
              'START'
              'SUCCESSFUL'
              'SYNONYM'
              'SYSDATE'
              'TABLE'
              'TABLESPACE'
              'THEN'
              'TO'
              'TRIGGER'
              'UID'
              'UNION'
              'UNIQUE'
              'UPDATE'
              'USER'
              'VALIDATE'
              'VALUES'
              'VARCHAR'
              'VARCHAR2'
              'VIEW'
              'WHENEVER'
              'WHERE'
              'WITH'
              'XMLDATA')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'PL/SQL Reserved words'
        StyleName = 'Reserved PL/SQL word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ALL'
              'ALTER'
              'AND'
              'ANY'
              'ARRAY'
              'AS'
              'ASC'
              'AT'
              'AUTHID'
              'AVG'
              'BEGIN'
              'BETWEEN'
              'BINARY_INTEGER'
              'BODY'
              'BOOLEAN'
              'BULK'
              'BY'
              'CASE'
              'CHAR'
              'CHAR_BASE'
              'CHECK'
              'CLOSE'
              'CLUSTER'
              'COALESCE'
              'COLLECT'
              'COMMENT'
              'COMMIT'
              'COMPRESS'
              'CONNECT'
              'CONSTANT'
              'CREATE'
              'CURRENT'
              'CURRVAL'
              'CURSOR'
              'DATE'
              'DAY'
              'DECIMAL'
              'DECLARE'
              'DEFAULT'
              'DELETE'
              'DELETING'
              'DESC'
              'DISTINCT'
              'DO'
              'DROP'
              'ELSE'
              'ELSIF'
              'END'
              'EXCEPTION'
              'EXCLUSIVE'
              'EXECUTE'
              'EXISTS'
              'EXIT'
              'EXTENDS'
              'EXTRACT'
              'FALSE'
              'FETCH'
              'FLOAT'
              'FOR'
              'FORALL'
              'FROM'
              'FUNCTION'
              'GOTO'
              'GROUP'
              'HAVING'
              'HEAP'
              'HOUR'
              'IF'
              'IMMEDIATE'
              'IN'
              'INDEX'
              'INDICATOR'
              'INSERT'
              'INSERTING'
              'INTEGER'
              'INTERFACE'
              'INTERSECT'
              'INTERVAL'
              'INTO'
              'IS'
              'ISOLATION'
              'JAVA'
              'LEVEL'
              'LIKE'
              'LIMITED'
              'LOCK'
              'LONG'
              'LOOP'
              'MAX'
              'MIN'
              'MINUS'
              'MINUTE'
              'MLSLABEL'
              'MOD'
              'MODE'
              'MONTH'
              'NATURAL'
              'NATURALN'
              'NEW'
              'NEXTVAL'
              'NOCOPY'
              'NOT'
              'NOWAIT'
              'NULL'
              'NULLIF'
              'NUMBER'
              'NUMBER_BASE'
              'OCIROWID'
              'OF'
              'ON'
              'OPAQUE'
              'OPEN'
              'OPERATOR'
              'OPTION'
              'OR'
              'ORDER'
              'ORGANIZATION'
              'OTHERS'
              'OUT'
              'PACKAGE'
              'PARTITION'
              'PCTFREE'
              'PLS_INTEGER'
              'POSITIVE'
              'POSITIVEN'
              'PRAGMA'
              'PRIOR'
              'PRIVATE'
              'PROCEDURE'
              'PUBLIC'
              'RAISE'
              'RANGE'
              'RAW'
              'REAL'
              'RECORD'
              'REF'
              'RELEASE'
              'RETURN'
              'REVERSE'
              'ROLLBACK'
              'ROW'
              'ROWID'
              'ROWNUM'
              'ROWTYPE'
              'SAVEPOINT'
              'SECOND'
              'SELECT'
              'SEPARATE'
              'SET'
              'SHARE'
              'SMALLINT'
              'SPACE'
              'SQL'
              'SQLCODE'
              'SQLERRM'
              'START'
              'STDDEV'
              'SUBTYPE'
              'SUCCESSFUL'
              'SUM'
              'SYNONYM'
              'SYSDATE'
              'TABLE'
              'THEN'
              'TIME'
              'TIMESTAMP'
              'TIMEZONE_ABBR'
              'TIMEZONE_HOUR'
              'TIMEZONE_MINUTE'
              'TIMEZONE_REGION'
              'TO'
              'TRIGGER'
              'TRUE'
              'TYPE'
              'UID'
              'UNION'
              'UNIQUE'
              'UPDATE'
              'UPDATEING'
              'USE'
              'USER'
              'VALIDATE'
              'VALUES'
              'VARCHAR'
              'VARCHAR2'
              'VARIANCE'
              'VIEW'
              'WHEN'
              'WHENEVER'
              'WHERE'
              'WHILE'
              'WITH'
              'WORK'
              'WRITE'
              'YEAR'
              'ZONE')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'SQL*Plus Meta Commands'
        StyleName = 'SQL*Plus Meta Commands'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '@'
              '@@'
              'acc'
              'accept'
              'connect'
              'def'
              'define'
              'desc'
              'describe'
              'exec'
              'execute'
              'prompt'
              'rem'
              'remark'
              'set'
              'spo'
              'spool'
              'start'
              'undef'
              'undefine')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'SQL Functions'
        StyleName = 'SQL Functions'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ABS'
              'ACOS'
              'ADD_MONTHS'
              'ASCII'
              'ASCIISTR'
              'ASIN'
              'ATAN'
              'ATAN2'
              'AVG'
              'AVG '
              'BFILENAME'
              'BIN_TO_NUM'
              'BITAND'
              'CARDINALITY'
              'CAST'
              'CEIL'
              'CHARTOROWID'
              'CHR'
              'COALESCE'
              'COLLECT'
              'COMPOSE'
              'CONCAT'
              'CONVERT'
              'CORR '
              'CORR_K'
              'CORR_S'
              'COS'
              'COSH'
              'COUNT '
              'COVAR_POP'
              'COVAR_SAMP '
              'CUME_DIST'
              'CURRENT_DATE'
              'CURRENT_TIMESTAMP'
              'CV'
              'DBTIMEZONE'
              'DECODE'
              'DECOMPOSE'
              'DENSE_RANK'
              'DEPTH'
              'DEREF'
              'DUMP'
              'EMPTY_BLOB, EMPTY_CLOB'
              'EXISTSNODE'
              'EXP'
              'EXTRACT'
              'EXTRACTVALUE'
              'FIRST'
              'FIRST_VALUE '
              'FLOOR'
              'FROM_TZ'
              'GREATEST'
              'GROUP_ID'
              'GROUPING'
              'GROUPING_ID'
              'HEXTORAW'
              'INITCAP'
              'INSTR'
              'ITERATION_NUMBER'
              'LAG'
              'LAST'
              'LAST_DAY'
              'LAST_VALUE '
              'LEAD'
              'LEAST'
              'LENGTH'
              'LN'
              'LNNVL'
              'LOCALTIMESTAMP'
              'LOG'
              'LOWER'
              'LPAD'
              'LTRIM'
              'MAKE_REF'
              'MAX '
              'MEDIAN'
              'MIN '
              'MOD'
              'MONTHS_BETWEEN'
              'NANVL'
              'NEW_TIME'
              'NEXT_DAY'
              'NLS_CHARSET_DECL_LEN'
              'NLS_CHARSET_ID'
              'NLS_CHARSET_NAME'
              'NLS_INITCAP'
              'NLS_LOWER'
              'NLS_UPPER'
              'NLSSORT'
              'NTILE'
              'NULLIF'
              'NUMTODSINTERVAL'
              'NUMTOYMINTERVAL'
              'NVL'
              'NVL2'
              'ORA_HASH'
              'PATH'
              'PERCENT_RANK'
              'PERCENTILE_CONT'
              'PERCENTILE_DISC'
              'POWER'
              'POWERMULTISET'
              'POWERMULTISET_BY_CARDINALITY'
              'PRESENTNNV'
              'PRESENTV'
              'PREVIOUS'
              'RANK'
              'RATIO_TO_REPORT'
              'RAWTOHEX'
              'RAWTONHEX'
              'REF'
              'REFTOHEX'
              'REGEXP_INSTR'
              'REGEXP_REPLACE'
              'REGEXP_SUBSTR'
              'REGR_AVGX'
              'REGR_AVGY'
              'REGR_COUNT'
              'REGR_INTERCEPT'
              'REGR_R2'
              'REGR_SLOPE'
              'REGR_SXY'
              'REGR_SYY'
              'REMAINDER'
              'ROUND'
              'ROUND '
              'ROW_NUMBER'
              'ROWIDTOCHAR'
              'ROWIDTONCHAR'
              'RPAD'
              'RTRIM'
              'SCN_TO_TIMESTAMP'
              'SESSIONTIMEZONE'
              'SET'
              'SIGN'
              'SIN'
              'SINH'
              'SOUNDEX'
              'SQRT'
              'STATS_BINOMIAL_TEST'
              'STATS_CROSSTAB'
              'STATS_F_TEST'
              'STATS_KS_TEST'
              'STATS_MODE'
              'STATS_MW_TEST'
              'STATS_ONE_WAY_ANOVA'
              'STATS_T_TEST_INDEP'
              'STATS_T_TEST_INDEPU'
              'STATS_T_TEST_ONE'
              'STATS_T_TEST_PAIRED'
              'STATS_WSR_TEST'
              'STDDEV '
              'STDDEV_POP '
              'STDDEV_SAMP '
              'SUBSTR'
              'SUM '
              'SYS_CONNECT_BY_PATH'
              'SYS_CONTEXT'
              'SYS_DBURIGEN'
              'SYS_EXTRACT_UTC'
              'SYS_GUID'
              'SYS_TYPEID'
              'SYS_XMLAGG'
              'SYS_XMLGEN'
              'SYSDATE'
              'SYSTIMESTAMP'
              'TAN'
              'TANH'
              'TIMESTAMP_TO_SCN'
              'TO_BINARY_DOUBLE'
              'TO_BINARY_FLOAT'
              'TO_CHAR '
              'TO_CLOB'
              'TO_DATE'
              'TO_DSINTERVAL'
              'TO_LOB'
              'TO_MULTI_BYTE'
              'TO_NCHAR '
              'TO_NCLOB'
              'TO_NUMBER'
              'TO_SINGLE_BYTE'
              'TO_TIMESTAMP'
              'TO_TIMESTAMP_TZ'
              'TO_YMINTERVAL'
              'TRANSLATE'
              'TREAT'
              'TRIM'
              'TRUNC '
              'TZ_OFFSET'
              'UID'
              'UNISTR'
              'UPDATEXML'
              'UPPER'
              'USER'
              'USERENV'
              'USING'
              'VALUE'
              'VAR_POP'
              'VAR_SAMP '
              'VARIANCE'
              'VSIZE'
              'WIDTH_BUCKET'
              'XMLAGG'
              'XMLCOLATTVAL'
              'XMLCONCAT'
              'XMLFOREST'
              'XMLSEQUENCE'
              'XMLTRANSFORM')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Default Oracle Packages'
        StyleName = 'Default Oracle Packages'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'outln_pkg'
              'plitblm'
              'raise_application_error'
              'sdo_cs'
              'sdo_geom'
              'sdo_lrs'
              'sdo_migrate'
              'sdo_tune'
              'set_transaction_use'
              'standard'
              'updating'
              'utl_coll'
              'utl_encode'
              'utl_file'
              'utl_http'
              'utl_inaddr'
              'utl_pg'
              'utl_raw'
              'utl_ref'
              'utl_smtp'
              'utl_tcp'
              'utl_url')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Predefined Exceptions'
        StyleName = 'Predefined Exceptions'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'access_into_null'
              'collection_is_null'
              'cursor_already_open'
              'dbms_lob.access_error'
              'dbms_lob.invalid_directory'
              'dbms_lob.noexist_directory'
              'dbms_lob.nopriv_directory'
              'dbms_lob.open_toomany'
              'dbms_lob.operation_failed'
              'dbms_lob.unopened_file'
              'dbms_sql.inconsistent_type'
              'dup_val_on_index'
              'invalid_cursor'
              'invalid_number'
              'login_denied'
              'no_data_found'
              'not_logged_on'
              'others'
              'program_error'
              'storage_error'
              'subscript_beyond_count'
              'subscript_outside_limit'
              'timeout_on_resource'
              'too_many_rows'
              'utl_file.internal_error'
              'utl_file.invalid_filehandle'
              'utl_file.invalid_mode'
              'utl_file.invalid_operation'
              'utl_file.invalid_path'
              'utl_file.read_error'
              'utl_file.write_error'
              'value_error'
              'zero_divide')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Datatypes'
        StyleName = 'Datatypes'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'BFILE'
              'BINARY_DOUBLE'
              'BINARY_FLOAT'
              'BINARY_INTEGER'
              'BLOB'
              'BOOLEAN'
              'BYTE'
              'CHAR'
              'CHARACTER'
              'CLOB'
              'DATE'
              'DEC'
              'DECIMAL'
              'DOUBLE '
              'FLOAT'
              'INT'
              'INTEGER'
              'INTERVAL'
              'LONG'
              'LONG RAW'
              'NATURAL'
              'NATURALN'
              'NCHAR'
              'NCLOB'
              'NUMBER'
              'NUMERIC'
              'NVARCHAR2'
              'PLS_INTEGER'
              'POSITIVE'
              'POSITIVEN'
              'PRECISION'
              'RAW'
              'REAL'
              'RECORD'
              'ROWID'
              'SIGNTYPE'
              'SMALLINT'
              'STRING'
              'TABLE'
              'TIMESTAMP'
              'UROWID'
              'VARCHAR'
              'VARCHAR2'
              'VARRAY')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Comment start'
        BlockName = 'Comment start'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '--  ...  --'
      end
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1021
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'package body'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'body')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'package')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 2
        BlockEnd = 'package end'
        NameFmt = 'package   %s0'
        HighlightPos = cpAny
        TreeItemStyle = 'Big Bold (tree)'
        TreeItemImage = 0
      end
      item
        DisplayName = 'package declaration'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'body')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'package')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 3
        BlockEnd = 'package end'
        NameFmt = 'package   %s1 (declaration)'
        HighlightPos = cpAny
        TreeItemStyle = 'Big Bold (tree)'
        TreeItemImage = 0
      end
      item
        DisplayName = 'package end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'constant start'
        BlockName = 'package body'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'constant')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end>
        BlockOffset = 1
        BlockEnd = 'constant end'
        NotCollapsed = True
        NameFmt = '%s1 %s-1'
        GroupFmt = 'Constants'
        HighlightPos = cpAny
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 4
        TreeGroupImage = 0
      end
      item
        DisplayName = 'constant end'
        BlockName = 'constant start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'exception start'
        BlockName = 'function start'
        ConditionList = <
          item
            TagList.Strings = (
              'exception')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'exception end'
        NameFmt = '%s0 %s-2'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'exception end'
        BlockName = 'exception start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Case start'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'case')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Case end'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
      end
      item
        DisplayName = 'Case end'
        BlockName = 'Case start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 12
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'if start'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'if end'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
      end
      item
        DisplayName = 'if end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function start'
        StyleName = 'Current function'
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockEnd = 'function end identifier'
        Highlight = True
        DynHighlight = dhRange
        HighlightPos = cpRange
        DrawStaple = True
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Function (tree)'
        TreeItemImage = 5
      end
      item
        DisplayName = 'function end identifier'
        BlockName = 'function start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        SameIdent = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function end'
        BlockName = 'function start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'function start'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'DML start'
        BlockName = 'DML start'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'delete'
              'insert'
              'merge'
              'select'
              'update')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'DML end'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 6
      end
      item
        DisplayName = 'DML end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        BlockEnd = 'DML start'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'For start'
        StyleName = 'Current block'
        BlockName = 'block start'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'for'
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'For end'
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CancelNextRules = True
        DrawStaple = True
      end
      item
        DisplayName = 'For end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Loop start'
        StyleName = 'Current block'
        BlockName = 'For start'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Loop end'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
      end
      item
        DisplayName = 'Loop end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Function Separator'
        StyleName = 'Function separator'
        BlockName = 'package body'
        StrictParent = True
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = '()'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '( ... )'
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        BlockEnd = '('
        HighlightPos = cpAny
      end
      item
        DisplayName = 'block start'
        StyleName = 'Current block'
        AlwaysEnabled = True
        ConditionList = <
          item
            TagList.Strings = (
              'begin')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'block end'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
      end
      item
        DisplayName = 'block end'
        BlockName = 'block start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Type start'
        BlockName = 'package body'
        StrictParent = True
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'type')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'Type end'
        GroupFmt = 'Types'
        HighlightPos = cpAny
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 3
        TreeGroupImage = 0
      end
      item
        DisplayName = 'Type end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Data Dictionary'
        StyleName = 'Data Dictionary'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '_all_instantiation_ddl'
              '_all_repextensions'
              '_all_repsites_new'
              '_all_sqlset_statements_only'
              '_all_sqlset_statements_phv'
              '_all_sqlset_statistics_only'
              'a1'
              'abspath'
              'adm_rlmgr_privileges'
              'alert_type'
              'all_all_tables'
              'all_apply'
              'all_apply_conflict_columns'
              'all_apply_dml_handlers'
              'all_apply_enqueue'
              'all_apply_error'
              'all_apply_execute'
              'all_apply_key_columns'
              'all_apply_parameters'
              'all_apply_progress'
              'all_apply_table_columns'
              'all_arguments'
              'all_associations'
              'all_audit_policies'
              'all_audit_policy_columns'
              'all_aw_ac'
              'all_aw_ac_10g'
              'all_aw_cube_agg_levels'
              'all_aw_cube_agg_measures'
              'all_aw_cube_agg_plans'
              'all_aw_cube_enabled_hiercombo'
              'all_aw_cube_enabled_views'
              'all_aw_dim_enabled_views'
              'all_aw_load_cube_dims'
              'all_aw_load_cube_filters'
              'all_aw_load_cube_measures'
              'all_aw_load_cube_parms'
              'all_aw_load_cubes'
              'all_aw_load_dim_filters'
              'all_aw_load_dim_parms'
              'all_aw_load_dimensions'
              'all_aw_obj'
              'all_aw_prop'
              'all_aw_prop_name'
              'all_aw_ps'
              'all_aws'
              'all_base_table_mviews'
              'all_capture'
              'all_capture_extra_attributes'
              'all_capture_parameters'
              'all_capture_prepared_database'
              'all_capture_prepared_schemas'
              'all_capture_prepared_tables'
              'all_catalog'
              'all_cluster_hash_expressions'
              'all_clusters'
              'all_col_comments'
              'all_col_privs'
              'all_col_privs_made'
              'all_col_privs_recd'
              'all_coll_types'
              'all_cons_columns'
              'all_cons_obj_columns'
              'all_constraints'
              'all_context'
              'all_db_links'
              'all_def_audit_opts'
              'all_dependencies'
              'all_dequeue_queues'
              'all_dim_attributes'
              'all_dim_child_of'
              'all_dim_hierarchies'
              'all_dim_join_key'
              'all_dim_level_key'
              'all_dim_levels'
              'all_dimensions'
              'all_directories'
              'all_encrypted_columns'
              'all_errors'
              'all_evaluation_context_tables'
              'all_evaluation_context_vars'
              'all_evaluation_contexts'
              'all_expfil_aset_functions'
              'all_expfil_attribute_sets'
              'all_expfil_attributes'
              'all_expfil_def_index_params'
              'all_expfil_expression_sets'
              'all_expfil_exprset_stats'
              'all_expfil_index_params'
              'all_expfil_indexes'
              'all_expfil_predtab_attributes'
              'all_external_locations'
              'all_external_tables'
              'all_file_group_export_info'
              'all_file_group_files'
              'all_file_group_tables'
              'all_file_group_tablespaces'
              'all_file_group_versions'
              'all_file_groups'
              'all_geometry_columns'
              'all_histograms'
              'all_ind_columns'
              'all_ind_expressions'
              'all_ind_partitions'
              'all_ind_statistics'
              'all_ind_subpartitions'
              'all_indexes'
              'all_indextype_arraytypes'
              'all_indextype_comments'
              'all_indextype_operators'
              'all_indextypes'
              'all_internal_triggers'
              'all_java_arguments'
              'all_java_classes'
              'all_java_derivations'
              'all_java_fields'
              'all_java_implements'
              'all_java_inners'
              'all_java_layouts'
              'all_java_methods'
              'all_java_ncomps'
              'all_java_resolvers'
              'all_java_throws'
              'all_jobs'
              'all_join_ind_columns'
              'all_libraries'
              'all_load_cube_segwidth'
              'all_lob_partitions'
              'all_lob_subpartitions'
              'all_lob_templates'
              'all_lobs'
              'all_log_group_columns'
              'all_log_groups'
              'all_method_params'
              'all_method_results'
              'all_mp_graph_workspaces'
              'all_mp_parent_workspaces'
              'all_mview_aggregates'
              'all_mview_analysis'
              'all_mview_comments'
              'all_mview_detail_relations'
              'all_mview_joins'
              'all_mview_keys'
              'all_mview_logs'
              'all_mview_refresh_times'
              'all_mviews'
              'all_nested_table_cols'
              'all_nested_tables'
              'all_obj_colattrs'
              'all_object_tables'
              'all_objects'
              'all_olap_alter_session'
              'all_olap_catalog_entity_uses'
              'all_olap_catalogs'
              'all_olap_columns'
              'all_olap_cube_dim_uses'
              'all_olap_cube_measure_dim_uses'
              'all_olap_cube_measure_maps'
              'all_olap_cube_measures'
              'all_olap_cubes'
              'all_olap_descriptor_types'
              'all_olap_descriptors'
              'all_olap_dim_attr_uses'
              'all_olap_dim_attributes'
              'all_olap_dim_hier_level_uses'
              'all_olap_dim_hierarchies'
              'all_olap_dim_level_attr_maps'
              'all_olap_dim_level_attributes'
              'all_olap_dim_levels'
              'all_olap_dimensions'
              'all_olap_entity_desc_uses'
              'all_olap_fact_level_uses'
              'all_olap_foreign_keys'
              'all_olap_function_arguments'
              'all_olap_function_parameters'
              'all_olap_function_usages'
              'all_olap_functions'
              'all_olap_join_key_column_uses'
              'all_olap_key_column_uses'
              'all_olap_keys'
              'all_olap_level_key_column_uses'
              'all_olap_tables'
              'all_olap1_cubes'
              'all_olap2_aggregation_uses'
              'all_olap2_aw_attributes'
              'all_olap2_aw_catalog_measures'
              'all_olap2_aw_catalogs'
              'all_olap2_aw_cube_agg_lvl'
              'all_olap2_aw_cube_agg_meas'
              'all_olap2_aw_cube_agg_op'
              'all_olap2_aw_cube_agg_specs'
              'all_olap2_aw_cube_dim_uses'
              'all_olap2_aw_cube_measures'
              'all_olap2_aw_cubes'
              'all_olap2_aw_dim_hier_lvl_ord'
              'all_olap2_aw_dim_levels'
              'all_olap2_aw_dimensions'
              'all_olap2_aw_phys_obj'
              'all_olap2_aw_phys_obj_prop'
              'all_olap2_aws'
              'all_olap2_awviewcols'
              'all_olap2_awviews'
              'all_olap2_catalog_entity_uses'
              'all_olap2_catalogs'
              'all_olap2_cube_dim_uses'
              'all_olap2_cube_meas_dim_uses'
              'all_olap2_cube_measure_maps'
              'all_olap2_cube_measures'
              'all_olap2_cubes'
              'all_olap2_dim_attr_uses'
              'all_olap2_dim_attributes'
              'all_olap2_dim_hier_level_uses'
              'all_olap2_dim_hierarchies'
              'all_olap2_dim_hiers'
              'all_olap2_dim_level_attr_maps'
              'all_olap2_dim_level_attributes'
              'all_olap2_dim_levels'
              'all_olap2_dim_levels_keymaps'
              'all_olap2_dimensions'
              'all_olap2_entity_desc_uses'
              'all_olap2_entity_ext_parms'
              'all_olap2_entity_parameters'
              'all_olap2_fact_level_uses'
              'all_olap2_fact_table_gid'
              'all_olap2_facttblfctmaps'
              'all_olap2_facttblkeymaps'
              'all_olap2_hier_custom_sort'
              'all_olap2_hierdim_keycol_map'
              'all_olap2_hierdims'
              'all_olap2_join_key_column_uses'
              'all_olap2_level_key_col_uses'
              'all_olap2_listdims'
              'all_olap2_mr_measdimview'
              'all_olap2_mv_cube_agg_levels'
              'all_olap2_mv_cube_agg_measures'
              'all_olap2_rufcttblkymaps'
              'all_olap9i1_hier_dimensions'
              'all_olap9i2_hier_dimensions'
              'all_olapmr_attributes'
              'all_olapmr_dim_attributes'
              'all_olapmr_dim_levels'
              'all_olapmr_dim_levels_keymaps'
              'all_olapmr_dimensions'
              'all_olapmr_facttblfctmaps'
              'all_olapmr_facttblkeymaps'
              'all_opancillary'
              'all_oparguments'
              'all_opbindings'
              'all_operator_comments'
              'all_operators'
              'all_outline_hints'
              'all_outlines'
              'all_part_col_statistics'
              'all_part_histograms'
              'all_part_indexes'
              'all_part_key_columns'
              'all_part_lobs'
              'all_part_tables'
              'all_partial_drop_tabs'
              'all_path'
              'all_pending_conv_tables'
              'all_plsql_object_settings'
              'all_policies'
              'all_policy_contexts'
              'all_policy_groups'
              'all_procedures'
              'all_propagation'
              'all_published_columns'
              'all_queue_publishers'
              'all_queue_subscribers'
              'all_queue_tables'
              'all_queues'
              'all_refresh'
              'all_refresh_children'
              'all_refresh_dependencies'
              'all_refs'
              'all_registered_mviews'
              'all_registered_snapshots'
              'all_registry_banners'
              'all_repaudit_attribute'
              'all_repaudit_column'
              'all_repcat'
              'all_repcat_refresh_templates'
              'all_repcat_template_objects'
              'all_repcat_template_parms'
              'all_repcat_template_sites'
              'all_repcat_user_authorizations'
              'all_repcat_user_parm_values'
              'all_repcatlog'
              'all_repcolumn'
              'all_repcolumn_group'
              'all_repconflict'
              'all_repddl'
              'all_repflavor_columns'
              'all_repflavor_objects'
              'all_repflavors'
              'all_repgenerated'
              'all_repgenobjects'
              'all_repgroup'
              'all_repgroup_privileges'
              'all_repgrouped_column'
              'all_repkey_columns'
              'all_repobject'
              'all_repparameter_column'
              'all_reppriority'
              'all_reppriority_group'
              'all_repprop'
              'all_represol_stats_control'
              'all_represolution'
              'all_represolution_method'
              'all_represolution_statistics'
              'all_repschema'
              'all_repsites'
              'all_rewrite_equivalences'
              'all_rlmgr_comprcls_properties'
              'all_rlmgr_event_structs'
              'all_rlmgr_rule_class_status'
              'all_rlmgr_rule_classes'
              'all_rule_set_rules'
              'all_rule_sets'
              'all_rules'
              'all_rulesets'
              'all_scheduler_chain_rules'
              'all_scheduler_chain_steps'
              'all_scheduler_chains'
              'all_scheduler_global_attribute'
              'all_scheduler_job_args'
              'all_scheduler_job_classes'
              'all_scheduler_job_log'
              'all_scheduler_job_run_details'
              'all_scheduler_jobs'
              'all_scheduler_program_args'
              'all_scheduler_programs'
              'all_scheduler_running_chains'
              'all_scheduler_running_jobs'
              'all_scheduler_schedules'
              'all_scheduler_window_details'
              'all_scheduler_window_groups'
              'all_scheduler_window_log'
              'all_scheduler_windows'
              'all_scheduler_wingroup_members'
              'all_sdo_geom_metadata'
              'all_sdo_geor_sysdata'
              'all_sdo_index_info'
              'all_sdo_index_metadata'
              'all_sdo_lrs_metadata'
              'all_sdo_maps'
              'all_sdo_network_constraints'
              'all_sdo_network_metadata'
              'all_sdo_network_user_data'
              'all_sdo_styles'
              'all_sdo_themes'
              'all_sdo_topo_info'
              'all_sdo_topo_metadata'
              'all_sec_relevant_cols'
              'all_secondary_objects'
              'all_sequences'
              'all_services'
              'all_snapshot_logs'
              'all_snapshot_refresh_times'
              'all_snapshots'
              'all_source'
              'all_source_tables'
              'all_sqlj_type_attrs'
              'all_sqlj_type_methods'
              'all_sqlj_types'
              'all_sqlset'
              'all_sqlset_binds'
              'all_sqlset_plans'
              'all_sqlset_references'
              'all_sqlset_statements'
              'all_stored_settings'
              'all_streams_global_rules'
              'all_streams_message_consumers'
              'all_streams_message_rules'
              'all_streams_newly_supported'
              'all_streams_rules'
              'all_streams_schema_rules'
              'all_streams_table_rules'
              'all_streams_transform_function'
              'all_streams_unsupported'
              'all_subpart_col_statistics'
              'all_subpart_histograms'
              'all_subpart_key_columns'
              'all_subpartition_templates'
              'all_subscribed_columns'
              'all_subscribed_tables'
              'all_subscriptions'
              'all_sumdelta'
              'all_summaries'
              'all_summary_aggregates'
              'all_summary_detail_tables'
              'all_summary_joins'
              'all_summary_keys'
              'all_synonyms'
              'all_tab_col_statistics'
              'all_tab_cols'
              'all_tab_columns'
              'all_tab_comments'
              'all_tab_histograms'
              'all_tab_modifications'
              'all_tab_partitions'
              'all_tab_privs'
              'all_tab_privs_made'
              'all_tab_privs_recd'
              'all_tab_statistics'
              'all_tab_stats_history'
              'all_tab_subpartitions'
              'all_tables'
              'all_trigger_cols'
              'all_triggers'
              'all_type_attrs'
              'all_type_methods'
              'all_type_versions'
              'all_types'
              'all_unused_col_tabs'
              'all_updatable_columns'
              'all_users'
              'all_ustats'
              'all_varrays'
              'all_version_hview'
              'all_views'
              'all_warning_settings'
              'all_wm_cons_columns'
              'all_wm_constraints'
              'all_wm_ind_columns'
              'all_wm_ind_expressions'
              'all_wm_locked_tables'
              'all_wm_modified_tables'
              'all_wm_ric_info'
              'all_wm_tab_triggers'
              'all_wm_versioned_tables'
              'all_wm_vt_errors'
              'all_workspace_privs'
              'all_workspace_savepoints'
              'all_workspaces'
              'all_workspaces_internal'
              'all_xml_indexes'
              'all_xml_schemas'
              'all_xml_schemas2'
              'all_xml_tab_cols'
              'all_xml_tables'
              'all_xml_view_cols'
              'all_xml_views'
              'anonymous'
              'anydata'
              'anydataset'
              'anytype'
              'aq$internet_users'
              'area'
              'asbinary'
              'astext'
              'audit_actions'
              'ausleihe'
              'ausleihe_seq'
              'auswertung'
              'aut_seq'
              'autor'
              'autor_seq'
              'awrdrpt_text_type'
              'awrdrpt_text_type_table'
              'awrrpt_clb_ary'
              'awrrpt_html_type'
              'awrrpt_html_type_table'
              'awrrpt_num_ary'
              'awrrpt_row_type'
              'awrrpt_text_type'
              'awrrpt_text_type_table'
              'awrrpt_vch_ary'
              'awrsqrpt_text_type'
              'awrsqrpt_text_type_table'
              'bestellung'
              'bestellung_seq'
              'bi'
              'blastn_align'
              'blastn_compress'
              'blastn_match'
              'blastp_align'
              'blastp_match'
              'bo_config'
              'bo_jobs'
              'boundary'
              'bourlakos'
              'buch'
              'buch_pers_vw'
              'buffer'
              'cat'
              'catsearch'
              'centroid'
              'change_propagation_sets'
              'change_propagations'
              'change_sets'
              'change_sources'
              'change_tables'
              'circularstring'
              'clu'
              'cluster_rule_type'
              'cluster_type'
              'col'
              'collect'
              'cols'
              'column_privileges'
              'compoundcurve'
              'connectioninterface'
              'contains'
              'content_table'
              'contentschemais'
              'context'
              'convexhull'
              'crgrid_test'
              'cross'
              'cs_srs'
              'ctx_classes'
              'ctx_cls'
              'ctx_ddl'
              'ctx_doc'
              'ctx_index_set_indexes'
              'ctx_index_sets'
              'ctx_object_attribute_lov'
              'ctx_object_attributes'
              'ctx_objects'
              'ctx_output'
              'ctx_parameters'
              'ctx_preference_values'
              'ctx_preferences'
              'ctx_query'
              'ctx_report'
              'ctx_section_groups'
              'ctx_sections'
              'ctx_sqes'
              'ctx_stoplists'
              'ctx_stopwords'
              'ctx_sub_lexers'
              'ctx_thes'
              'ctx_thes_phrases'
              'ctx_thesauri'
              'ctx_trace_values'
              'ctx_ulexer'
              'ctx_user_index_errors'
              'ctx_user_index_objects'
              'ctx_user_index_partitions'
              'ctx_user_index_set_indexes'
              'ctx_user_index_sets'
              'ctx_user_index_sub_lexer_vals'
              'ctx_user_index_sub_lexers'
              'ctx_user_index_values'
              'ctx_user_indexes'
              'ctx_user_pending'
              'ctx_user_preference_values'
              'ctx_user_preferences'
              'ctx_user_section_groups'
              'ctx_user_sections'
              'ctx_user_sqes'
              'ctx_user_stoplists'
              'ctx_user_stopwords'
              'ctx_user_sub_lexers'
              'ctx_user_thes_phrases'
              'ctx_user_thesauri'
              'ctxcat'
              'ctxrule'
              'ctxsys'
              'ctxxpath'
              'cursormanagerinterface'
              'curve'
              'curvepolygon'
              'cwm_classify'
              'cwm_exceptions'
              'cwm_olap_cube'
              'cwm_olap_dim_attribute'
              'cwm_olap_dimension'
              'cwm_olap_hierarchy'
              'cwm_olap_level'
              'cwm_olap_level_attribute'
              'cwm_olap_measure'
              'cwm_utility'
              'cwm2_olap_aw_awutil'
              'cwm2_olap_catalog'
              'cwm2_olap_classify'
              'cwm2_olap_cube'
              'cwm2_olap_delete'
              'cwm2_olap_dimension'
              'cwm2_olap_dimension_attribute'
              'cwm2_olap_exceptions'
              'cwm2_olap_export'
              'cwm2_olap_hierarchy'
              'cwm2_olap_level'
              'cwm2_olap_level_attribute'
              'cwm2_olap_manager'
              'cwm2_olap_measure'
              'cwm2_olap_metadata_refresh'
              'cwm2_olap_mr_check_privs'
              'cwm2_olap_mr_security_init'
              'cwm2_olap_mr_session_pop'
              'cwm2_olap_olapapi_enable'
              'cwm2_olap_pc_transform'
              'cwm2_olap_table_map'
              'cwm2_olap_utility'
              'cwm2_olap_validate'
              'cwm2_olap_verify_access'
              'cwm2_security'
              'database_compatible_level'
              'database_export_objects'
              'database_properties'
              'databaseinterface'
              'dataproviderinterface'
              'datapump_object_connect'
              'datapump_pathmap'
              'datapump_paths'
              'datapump_remap_objects'
              'datapump_table_data'
              'datatypeidconstants'
              'dba_2pc_neighbors'
              'dba_2pc_pending'
              'dba_advisor_actions'
              'dba_advisor_commands'
              'dba_advisor_def_parameters'
              'dba_advisor_definitions'
              'dba_advisor_directives'
              'dba_advisor_findings'
              'dba_advisor_journal'
              'dba_advisor_log'
              'dba_advisor_object_types'
              'dba_advisor_objects'
              'dba_advisor_parameters'
              'dba_advisor_parameters_proj'
              'dba_advisor_rationale'
              'dba_advisor_recommendations'
              'dba_advisor_sqla_rec_sum'
              'dba_advisor_sqla_wk_map'
              'dba_advisor_sqla_wk_stmts'
              'dba_advisor_sqlw_colvol'
              'dba_advisor_sqlw_journal'
              'dba_advisor_sqlw_parameters'
              'dba_advisor_sqlw_stmts'
              'dba_advisor_sqlw_sum'
              'dba_advisor_sqlw_tables'
              'dba_advisor_sqlw_tabvol'
              'dba_advisor_sqlw_templates'
              'dba_advisor_tasks'
              'dba_advisor_templates'
              'dba_advisor_usage'
              'dba_alert_arguments'
              'dba_alert_history'
              'dba_all_tables'
              'dba_application_roles'
              'dba_apply'
              'dba_apply_conflict_columns'
              'dba_apply_dml_handlers'
              'dba_apply_enqueue'
              'dba_apply_error'
              'dba_apply_execute'
              'dba_apply_instantiated_global'
              'dba_apply_instantiated_objects'
              'dba_apply_instantiated_schemas'
              'dba_apply_key_columns'
              'dba_apply_object_dependencies'
              'dba_apply_parameters'
              'dba_apply_progress'
              'dba_apply_spill_txn'
              'dba_apply_table_columns'
              'dba_apply_value_dependencies'
              'dba_aq_agent_privs'
              'dba_aq_agents'
              'dba_associations'
              'dba_audit_exists'
              'dba_audit_object'
              'dba_audit_policies'
              'dba_audit_policy_columns'
              'dba_audit_session'
              'dba_audit_statement'
              'dba_audit_trail'
              'dba_auto_segadv_ctl'
              'dba_auto_segadv_summary'
              'dba_aw_obj'
              'dba_aw_prop'
              'dba_aw_ps'
              'dba_aws'
              'dba_base_table_mviews'
              'dba_blockers'
              'dba_cacheable_objects'
              'dba_cacheable_objects_base'
              'dba_cacheable_tables'
              'dba_capture'
              'dba_capture_extra_attributes'
              'dba_capture_parameters'
              'dba_capture_prepared_database'
              'dba_capture_prepared_schemas'
              'dba_capture_prepared_tables'
              'dba_catalog'
              'dba_change_notification_regs'
              'dba_clu_columns'
              'dba_cluster_hash_expressions'
              'dba_clusters'
              'dba_col_comments'
              'dba_col_privs'
              'dba_coll_types'
              'dba_common_audit_trail'
              'dba_connect_role_grantees'
              'dba_cons_columns'
              'dba_cons_obj_columns'
              'dba_constraints'
              'dba_context'
              'dba_cpu_usage_statistics'
              'dba_data_files'
              'dba_datapump_jobs'
              'dba_datapump_sessions'
              'dba_db_links'
              'dba_ddl_locks'
              'dba_dependencies'
              'dba_dim_attributes'
              'dba_dim_child_of'
              'dba_dim_hierarchies'
              'dba_dim_join_key'
              'dba_dim_level_key'
              'dba_dim_levels'
              'dba_dimensions'
              'dba_directories'
              'dba_dml_locks'
              'dba_dmt_free_space'
              'dba_dmt_used_extents'
              'dba_enabled_aggregations'
              'dba_enabled_traces'
              'dba_encrypted_columns'
              'dba_epg_dad_authorization'
              'dba_errors'
              'dba_evaluation_context_tables'
              'dba_evaluation_context_vars'
              'dba_evaluation_contexts'
              'dba_exp_files'
              'dba_exp_objects'
              'dba_exp_version'
              'dba_export_objects'
              'dba_extents'
              'dba_external_locations'
              'dba_external_tables'
              'dba_feature_usage_statistics'
              'dba_fga_audit_trail'
              'dba_file_group_export_info'
              'dba_file_group_files'
              'dba_file_group_tables'
              'dba_file_group_tablespaces'
              'dba_file_group_versions'
              'dba_file_groups'
              'dba_free_space'
              'dba_free_space_coalesced'
              'dba_geometry_columns'
              'dba_global_context'
              'dba_high_water_mark_statistics'
              'dba_hist_active_sess_history'
              'dba_hist_baseline'
              'dba_hist_bg_event_summary'
              'dba_hist_buffer_pool_stat'
              'dba_hist_buffered_queues'
              'dba_hist_buffered_subscribers'
              'dba_hist_comp_iostat'
              'dba_hist_cr_block_server'
              'dba_hist_current_block_server'
              'dba_hist_database_instance'
              'dba_hist_datafile'
              'dba_hist_db_cache_advice'
              'dba_hist_dlm_misc'
              'dba_hist_enqueue_stat'
              'dba_hist_event_name'
              'dba_hist_filemetric_history'
              'dba_hist_filestatxs'
              'dba_hist_inst_cache_transfer'
              'dba_hist_instance_recovery'
              'dba_hist_java_pool_advice'
              'dba_hist_latch'
              'dba_hist_latch_children'
              'dba_hist_latch_misses_summary'
              'dba_hist_latch_name'
              'dba_hist_latch_parent'
              'dba_hist_librarycache'
              'dba_hist_log'
              'dba_hist_metric_name'
              'dba_hist_mttr_target_advice'
              'dba_hist_optimizer_env'
              'dba_hist_osstat'
              'dba_hist_osstat_name'
              'dba_hist_parameter'
              'dba_hist_parameter_name'
              'dba_hist_pga_target_advice'
              'dba_hist_pgastat'
              'dba_hist_process_mem_summary'
              'dba_hist_resource_limit'
              'dba_hist_rowcache_summary'
              'dba_hist_rule_set'
              'dba_hist_seg_stat'
              'dba_hist_seg_stat_obj'
              'dba_hist_service_name'
              'dba_hist_service_stat'
              'dba_hist_service_wait_class'
              'dba_hist_sess_time_stats'
              'dba_hist_sessmetric_history'
              'dba_hist_sga'
              'dba_hist_sga_target_advice'
              'dba_hist_sgastat'
              'dba_hist_shared_pool_advice'
              'dba_hist_snap_error'
              'dba_hist_snapshot'
              'dba_hist_sql_bind_metadata'
              'dba_hist_sql_plan'
              'dba_hist_sql_summary'
              'dba_hist_sql_workarea_hstgrm'
              'dba_hist_sqlbind'
              'dba_hist_sqlstat'
              'dba_hist_sqltext'
              'dba_hist_stat_name'
              'dba_hist_streams_apply_sum'
              'dba_hist_streams_capture'
              'dba_hist_streams_pool_advice'
              'dba_hist_sys_time_model'
              'dba_hist_sysmetric_history'
              'dba_hist_sysmetric_summary'
              'dba_hist_sysstat'
              'dba_hist_system_event'
              'dba_hist_tablespace_stat'
              'dba_hist_tbspc_space_usage'
              'dba_hist_tempfile'
              'dba_hist_tempstatxs'
              'dba_hist_thread'
              'dba_hist_undostat'
              'dba_hist_waitclassmet_history'
              'dba_hist_waitstat'
              'dba_hist_wr_control'
              'dba_histograms'
              'dba_ias_gen_stmts'
              'dba_ias_objects'
              'dba_ias_sites'
              'dba_ias_templates'
              'dba_ind_columns'
              'dba_ind_expressions'
              'dba_ind_partitions'
              'dba_ind_statistics'
              'dba_ind_subpartitions'
              'dba_indexes'
              'dba_indextype_arraytypes'
              'dba_indextype_comments'
              'dba_indextype_operators'
              'dba_indextypes'
              'dba_internal_triggers'
              'dba_java_arguments'
              'dba_java_classes'
              'dba_java_derivations'
              'dba_java_fields'
              'dba_java_implements'
              'dba_java_inners'
              'dba_java_layouts'
              'dba_java_methods'
              'dba_java_ncomps'
              'dba_java_policy'
              'dba_java_resolvers'
              'dba_java_throws'
              'dba_jobs'
              'dba_jobs_running'
              'dba_join_ind_columns'
              'dba_kgllock'
              'dba_libraries'
              'dba_lmt_free_space'
              'dba_lmt_used_extents'
              'dba_lob_partitions'
              'dba_lob_subpartitions'
              'dba_lob_templates'
              'dba_lobs'
              'dba_lock'
              'dba_lock_internal'
              'dba_locks'
              'dba_log_group_columns'
              'dba_log_groups'
              'dba_logmnr_log'
              'dba_logmnr_purged_log'
              'dba_logmnr_session'
              'dba_logstdby_events'
              'dba_logstdby_history'
              'dba_logstdby_log'
              'dba_logstdby_not_unique'
              'dba_logstdby_parameters'
              'dba_logstdby_progress'
              'dba_logstdby_skip'
              'dba_logstdby_skip_transaction'
              'dba_logstdby_unsupported'
              'dba_method_params'
              'dba_method_results'
              'dba_mview_aggregates'
              'dba_mview_analysis'
              'dba_mview_comments'
              'dba_mview_detail_relations'
              'dba_mview_joins'
              'dba_mview_keys'
              'dba_mview_log_filter_cols'
              'dba_mview_logs'
              'dba_mview_refresh_times'
              'dba_mviews'
              'dba_nested_table_cols'
              'dba_nested_tables'
              'dba_obj_audit_opts'
              'dba_obj_colattrs'
              'dba_object_size'
              'dba_object_tables'
              'dba_objects'
              'dba_olap_catalog_entity_uses'
              'dba_olap_catalogs'
              'dba_olap_columns'
              'dba_olap_cube_dim_uses'
              'dba_olap_cube_measure_dim_uses'
              'dba_olap_cube_measure_maps'
              'dba_olap_cube_measures'
              'dba_olap_cubes'
              'dba_olap_descriptor_types'
              'dba_olap_descriptors'
              'dba_olap_dim_attr_uses'
              'dba_olap_dim_attributes'
              'dba_olap_dim_hier_level_uses'
              'dba_olap_dim_hierarchies'
              'dba_olap_dim_level_attr_maps'
              'dba_olap_dim_level_attributes'
              'dba_olap_dim_levels'
              'dba_olap_dimensions'
              'dba_olap_entity_desc_uses'
              'dba_olap_fact_level_uses'
              'dba_olap_foreign_keys'
              'dba_olap_function_arguments'
              'dba_olap_function_parameters'
              'dba_olap_function_usages'
              'dba_olap_functions'
              'dba_olap_join_key_column_uses'
              'dba_olap_key_column_uses'
              'dba_olap_keys'
              'dba_olap_level_key_column_uses'
              'dba_olap_tables'
              'dba_olap1_cubes'
              'dba_olap2_aggregation_uses'
              'dba_olap2_awviewcols'
              'dba_olap2_awviews'
              'dba_olap2_catalog_entity_uses'
              'dba_olap2_catalogs'
              'dba_olap2_cube_dim_uses'
              'dba_olap2_cube_meas_dim_uses'
              'dba_olap2_cube_measure_maps'
              'dba_olap2_cube_measures'
              'dba_olap2_cubes'
              'dba_olap2_dim_attr_uses'
              'dba_olap2_dim_attributes'
              'dba_olap2_dim_hier_level_uses'
              'dba_olap2_dim_hierarchies'
              'dba_olap2_dim_hiers'
              'dba_olap2_dim_level_attr_maps'
              'dba_olap2_dim_level_attributes'
              'dba_olap2_dim_levels'
              'dba_olap2_dim_levels_keymaps'
              'dba_olap2_dimensions'
              'dba_olap2_entity_desc_uses'
              'dba_olap2_entity_ext_parms'
              'dba_olap2_entity_parameters'
              'dba_olap2_fact_level_uses'
              'dba_olap2_fact_table_gid'
              'dba_olap2_facttblfctmaps'
              'dba_olap2_facttblkeymaps'
              'dba_olap2_hier_custom_sort'
              'dba_olap2_hierdim_keycol_map'
              'dba_olap2_hierdims'
              'dba_olap2_join_key_column_uses'
              'dba_olap2_level_key_col_uses'
              'dba_olap2_listdims'
              'dba_olap2_mr_measdimview'
              'dba_olap2_rufcttblkymaps'
              'dba_olap9i1_hier_dimensions'
              'dba_olap9i2_hier_dimensions'
              'dba_olapmr_dim_levels_keymaps'
              'dba_olapmr_facttblfctmaps'
              'dba_olapmr_facttblkeymaps'
              'dba_opancillary'
              'dba_oparguments'
              'dba_opbindings'
              'dba_operator_comments'
              'dba_operators'
              'dba_optstat_operations'
              'dba_outline_hints'
              'dba_outlines'
              'dba_outstanding_alerts'
              'dba_part_col_statistics'
              'dba_part_histograms'
              'dba_part_indexes'
              'dba_part_key_columns'
              'dba_part_lobs'
              'dba_part_tables'
              'dba_partial_drop_tabs'
              'dba_pending_conv_tables'
              'dba_pending_transactions'
              'dba_plsql_object_settings'
              'dba_policies'
              'dba_policy_contexts'
              'dba_policy_groups'
              'dba_priv_audit_opts'
              'dba_procedures'
              'dba_profiles'
              'dba_propagation'
              'dba_proxies'
              'dba_published_columns'
              'dba_queue_publishers'
              'dba_queue_schedules'
              'dba_queue_subscribers'
              'dba_queue_tables'
              'dba_queues'
              'dba_rchild'
              'dba_recoverable_script'
              'dba_recoverable_script_blocks'
              'dba_recoverable_script_errors'
              'dba_recoverable_script_params'
              'dba_recyclebin'
              'dba_redefinition_errors'
              'dba_redefinition_objects'
              'dba_refresh'
              'dba_refresh_children'
              'dba_refs'
              'dba_registered_archived_log'
              'dba_registered_mview_groups'
              'dba_registered_mviews'
              'dba_registered_snapshot_groups'
              'dba_registered_snapshots'
              'dba_registry'
              'dba_registry_hierarchy'
              'dba_registry_history'
              'dba_registry_log'
              'dba_repaudit_attribute'
              'dba_repaudit_column'
              'dba_repcat'
              'dba_repcat_exceptions'
              'dba_repcat_refresh_templates'
              'dba_repcat_template_objects'
              'dba_repcat_template_parms'
              'dba_repcat_template_sites'
              'dba_repcat_user_authorizations'
              'dba_repcat_user_parm_values'
              'dba_repcatlog'
              'dba_repcolumn'
              'dba_repcolumn_group'
              'dba_repconflict'
              'dba_repddl'
              'dba_repextensions'
              'dba_repflavor_columns'
              'dba_repflavor_objects'
              'dba_repflavors'
              'dba_repgenerated'
              'dba_repgenobjects'
              'dba_repgroup'
              'dba_repgroup_privileges'
              'dba_repgrouped_column'
              'dba_repkey_columns'
              'dba_repobject'
              'dba_repparameter_column'
              'dba_reppriority'
              'dba_reppriority_group'
              'dba_repprop'
              'dba_represol_stats_control'
              'dba_represolution'
              'dba_represolution_method'
              'dba_represolution_statistics'
              'dba_repschema'
              'dba_repsites'
              'dba_repsites_new'
              'dba_resource_incarnations'
              'dba_resumable'
              'dba_rewrite_equivalences'
              'dba_rgroup'
              'dba_role_privs'
              'dba_roles'
              'dba_rollback_segs'
              'dba_rsrc_consumer_group_privs'
              'dba_rsrc_consumer_groups'
              'dba_rsrc_group_mappings'
              'dba_rsrc_manager_system_privs'
              'dba_rsrc_mapping_priority'
              'dba_rsrc_plan_directives'
              'dba_rsrc_plans'
              'dba_rule_set_rules'
              'dba_rule_sets'
              'dba_rules'
              'dba_rulesets'
              'dba_scheduler_chain_rules'
              'dba_scheduler_chain_steps'
              'dba_scheduler_chains'
              'dba_scheduler_global_attribute'
              'dba_scheduler_job_args'
              'dba_scheduler_job_classes'
              'dba_scheduler_job_log'
              'dba_scheduler_job_run_details'
              'dba_scheduler_jobs'
              'dba_scheduler_program_args'
              'dba_scheduler_programs'
              'dba_scheduler_running_chains'
              'dba_scheduler_running_jobs'
              'dba_scheduler_schedules'
              'dba_scheduler_window_details'
              'dba_scheduler_window_groups'
              'dba_scheduler_window_log'
              'dba_scheduler_windows'
              'dba_scheduler_wingroup_members'
              'dba_sdo_maps'
              'dba_sdo_styles'
              'dba_sdo_themes'
              'dba_sec_relevant_cols'
              'dba_secondary_objects'
              'dba_segments'
              'dba_segments_old'
              'dba_sequences'
              'dba_server_registry'
              'dba_services'
              'dba_snapshot_log_filter_cols'
              'dba_snapshot_logs'
              'dba_snapshot_refresh_times'
              'dba_snapshots'
              'dba_source'
              'dba_source_tables'
              'dba_sql_profiles'
              'dba_sqlj_type_attrs'
              'dba_sqlj_type_methods'
              'dba_sqlj_types'
              'dba_sqlset'
              'dba_sqlset_binds'
              'dba_sqlset_definitions'
              'dba_sqlset_plans'
              'dba_sqlset_references'
              'dba_sqlset_statements'
              'dba_sqltune_binds'
              'dba_sqltune_plans'
              'dba_sqltune_rationale_plan'
              'dba_sqltune_statistics'
              'dba_stmt_audit_opts'
              'dba_stored_settings'
              'dba_streams_add_column'
              'dba_streams_administrator'
              'dba_streams_delete_column'
              'dba_streams_global_rules'
              'dba_streams_message_consumers'
              'dba_streams_message_rules'
              'dba_streams_newly_supported'
              'dba_streams_rename_column'
              'dba_streams_rename_schema'
              'dba_streams_rename_table'
              'dba_streams_rules'
              'dba_streams_schema_rules'
              'dba_streams_table_rules'
              'dba_streams_transform_function'
              'dba_streams_transformations'
              'dba_streams_unsupported'
              'dba_subpart_col_statistics'
              'dba_subpart_histograms'
              'dba_subpart_key_columns'
              'dba_subpartition_templates'
              'dba_subscribed_columns'
              'dba_subscribed_tables'
              'dba_subscriptions'
              'dba_summaries'
              'dba_summary_aggregates'
              'dba_summary_detail_tables'
              'dba_summary_joins'
              'dba_summary_keys'
              'dba_synonyms'
              'dba_sys_privs'
              'dba_tab_col_statistics'
              'dba_tab_cols'
              'dba_tab_columns'
              'dba_tab_comments'
              'dba_tab_histograms'
              'dba_tab_partitions'
              'dba_tab_privs'
              'dba_tab_statistics'
              'dba_tab_stats_history'
              'dba_tab_subpartitions'
              'dba_tables'
              'dba_tablespace_groups'
              'dba_tablespace_usage_metrics'
              'dba_tablespaces'
              'dba_temp_files'
              'dba_template_refgroups'
              'dba_template_targets'
              'dba_thresholds'
              'dba_trigger_cols'
              'dba_triggers'
              'dba_ts_quotas'
              'dba_tsm_destination'
              'dba_tsm_history'
              'dba_tsm_source'
              'dba_tune_mview'
              'dba_type_attrs'
              'dba_type_methods'
              'dba_type_versions'
              'dba_types'
              'dba_undo_extents'
              'dba_unused_col_tabs'
              'dba_updatable_columns'
              'dba_users'
              'dba_ustats'
              'dba_varrays'
              'dba_views'
              'dba_waiters'
              'dba_warning_settings'
              'dba_wm_sys_privs'
              'dba_wm_versioned_tables'
              'dba_wm_vt_errors'
              'dba_workspace_privs'
              'dba_workspace_savepoints'
              'dba_workspace_sessions'
              'dba_workspaces'
              'dba_xml_indexes'
              'dba_xml_schemas'
              'dba_xml_tab_cols'
              'dba_xml_tables'
              'dba_xml_view_cols'
              'dba_xml_views'
              'dbj_short_name'
              'dbms_advisor'
              'dbms_alert'
              'dbms_application_info'
              'dbms_apply_adm'
              'dbms_aq'
              'dbms_aq_exp_cmt_time_tables'
              'dbms_aq_exp_history_tables'
              'dbms_aq_exp_index_tables'
              'dbms_aq_exp_queue_tables'
              'dbms_aq_exp_queues'
              'dbms_aq_exp_signature_tables'
              'dbms_aq_exp_subscriber_tables'
              'dbms_aq_exp_timemgr_tables'
              'dbms_aq_exp_zecurity'
              'dbms_aq_imp_internal'
              'dbms_aq_imp_zecurity'
              'dbms_aq_sys_exp_actions'
              'dbms_aq_sys_exp_internal'
              'dbms_aq_sys_imp_internal'
              'dbms_aqadm'
              'dbms_aqadm_syscalls'
              'dbms_aqelm'
              'dbms_aqin'
              'dbms_aqjms'
              'dbms_aqjms_internal'
              'dbms_assert'
              'dbms_aw'
              'dbms_aw$_columnlist_t'
              'dbms_aw$_dimension_source_t'
              'dbms_aw$_dimension_sources_t'
              'dbms_aw_exp'
              'dbms_aw_utilities'
              'dbms_aw_xml'
              'dbms_awm'
              'dbms_capture_adm'
              'dbms_cdc_dputil'
              'dbms_cdc_expdp'
              'dbms_cdc_expvdp'
              'dbms_cdc_impdp'
              'dbms_cdc_ipublish'
              'dbms_cdc_isubscribe'
              'dbms_cdc_publish'
              'dbms_cdc_subscribe'
              'dbms_cdc_sys_ipublish'
              'dbms_change_notification'
              'dbms_crypto'
              'dbms_crypto_toolkit'
              'dbms_data_mining'
              'dbms_data_mining_transform'
              'dbms_datapump'
              'dbms_db_version'
              'dbms_dblink'
              'dbms_ddl'
              'dbms_ddl_internal'
              'dbms_debug'
              'dbms_debug_jdwp'
              'dbms_debug_jdwp_custom'
              'dbms_defer'
              'dbms_defer_query'
              'dbms_defer_sys'
              'dbms_defergen'
              'dbms_describe'
              'dbms_dimension'
              'dbms_distributed_trust_admin'
              'dbms_dm_model_imp'
              'dbms_epg'
              'dbms_errlog'
              'dbms_expfil'
              'dbms_fbt'
              'dbms_feature_usage_report'
              'dbms_fga'
              'dbms_file_group'
              'dbms_file_transfer'
              'dbms_flashback'
              'dbms_frequent_itemset'
              'dbms_hs'
              'dbms_ias_configure'
              'dbms_ias_inst'
              'dbms_ias_mt_inst'
              'dbms_ias_query'
              'dbms_ias_session'
              'dbms_ias_template'
              'dbms_index_utl'
              'dbms_internal_repcat'
              'dbms_java'
              'dbms_java_dump'
              'dbms_java_test'
              'dbms_job'
              'dbms_jvm_exp_perms'
              'dbms_lcr'
              'dbms_ldap'
              'dbms_ldap_utl'
              'dbms_lob'
              'dbms_lock'
              'dbms_logmnr_cdc_publish'
              'dbms_logmnr_cdc_subscribe'
              'dbms_logstdby'
              'dbms_metadata'
              'dbms_metadata_build'
              'dbms_metadata_dpbuild'
              'dbms_monitor'
              'dbms_mview'
              'dbms_obfuscation_toolkit'
              'dbms_odci'
              'dbms_odm'
              'dbms_offline_og'
              'dbms_offline_rgt'
              'dbms_offline_snapshot'
              'dbms_olap'
              'dbms_outln'
              'dbms_outln_edit'
              'dbms_output'
              'dbms_pclxutil'
              'dbms_pickler'
              'dbms_pipe'
              'dbms_predictive_analytics'
              'dbms_preprocessor'
              'dbms_profiler'
              'dbms_propagation_adm'
              'dbms_psp'
              'dbms_pswmg_import'
              'dbms_random'
              'dbms_rectifier_diff'
              'dbms_redefinition'
              'dbms_refresh'
              'dbms_registry'
              'dbms_repcat'
              'dbms_repcat_admin'
              'dbms_repcat_auth'
              'dbms_repcat_decl'
              'dbms_repcat_instantiate'
              'dbms_repcat_internal'
              'dbms_repcat_internal_package'
              'dbms_repcat_mig'
              'dbms_repcat_rgt'
              'dbms_repcat_validate'
              'dbms_reputil'
              'dbms_reputil2'
              'dbms_resource_manager'
              'dbms_resource_manager_privs'
              'dbms_resumable'
              'dbms_rlmgr'
              'dbms_rls'
              'dbms_rmgr_group_export'
              'dbms_rmgr_pact_export'
              'dbms_rmgr_plan_export'
              'dbms_rmin'
              'dbms_rowid'
              'dbms_rule'
              'dbms_rule_adm'
              'dbms_rule_compatible_90'
              'dbms_rule_exp_ec_internal'
              'dbms_rule_exp_ev_ctxs'
              'dbms_rule_exp_rl_internal'
              'dbms_rule_exp_rs_internal'
              'dbms_rule_exp_rule_sets'
              'dbms_rule_exp_rules'
              'dbms_rule_imp_obj'
              'dbms_ruleadm_internal'
              'dbms_sched_chain_export'
              'dbms_sched_class_export'
              'dbms_sched_export_callouts'
              'dbms_sched_job_export'
              'dbms_sched_program_export'
              'dbms_sched_schedule_export'
              'dbms_sched_window_export'
              'dbms_sched_wingrp_export'
              'dbms_scheduler'
              'dbms_server_alert'
              'dbms_server_alert_export'
              'dbms_server_trace'
              'dbms_service'
              'dbms_session'
              'dbms_snapshot'
              'dbms_space'
              'dbms_space_admin'
              'dbms_sql'
              'dbms_sqlhash'
              'dbms_sqlplus_script'
              'dbms_sqltune'
              'dbms_standard'
              'dbms_stat_funcs'
              'dbms_stat_funcs_aux'
              'dbms_stats'
              'dbms_storage_map'
              'dbms_streams'
              'dbms_streams_adm'
              'dbms_streams_auth'
              'dbms_streams_lcr_int'
              'dbms_streams_messaging'
              'dbms_streams_rpc'
              'dbms_streams_tablespace_adm'
              'dbms_sum_rweq_export'
              'dbms_sum_rweq_export_internal'
              'dbms_summary'
              'dbms_tde_toolkit'
              'dbms_trace'
              'dbms_transaction'
              'dbms_transaction_internal_sys'
              'dbms_transform'
              'dbms_transform_eximp'
              'dbms_tsm_prvt'
              'dbms_type_utility'
              'dbms_types'
              'dbms_undo_adv'
              'dbms_utility'
              'dbms_warning'
              'dbms_wm'
              'dbms_workload_repository'
              'dbms_xdb'
              'dbms_xdb_version'
              'dbms_xdbutil_int'
              'dbms_xdbz'
              'dbms_xdbz0'
              'dbms_xmldom'
              'dbms_xmlgen'
              'dbms_xmlindex'
              'dbms_xmlparser'
              'dbms_xmlquery'
              'dbms_xmlsave'
              'dbms_xmlschema'
              'dbms_xmlstore'
              'dbms_xplan'
              'dbms_xslprocessor'
              'dbms_xsoq'
              'dbms_xsoq_odbo'
              'dbms_xsoq_util'
              'dbms_zhelp'
              'dbms_zhelp_ir'
              'dbmshsxp'
              'dbmshsxp_sql_profile_attr'
              'dbmsobjgwrapper'
              'dbmsoutput_linesarray'
              'dbmszexp_syspkggrnt'
              'dbsnmp'
              'dburitype'
              'defcall'
              'defcalldest'
              'defdefaultdest'
              'deferrcount'
              'deferror'
              'definitionmanagerinterface'
              'deflob'
              'defpropagator'
              'defschedule'
              'deftran'
              'deftrandest'
              'depth'
              'dict'
              'dict_columns'
              'dictionary'
              'difference'
              'dimension'
              'dip'
              'disjoint'
              'distance'
              'dm_abn_detail'
              'dm_abn_details'
              'dm_centroid'
              'dm_centroids'
              'dm_child'
              'dm_children'
              'dm_cl_apply'
              'dm_cl_build'
              'dm_cluster'
              'dm_clusters'
              'dm_conditional'
              'dm_conditionals'
              'dm_histogram_bin'
              'dm_histograms'
              'dm_items'
              'dm_itemset'
              'dm_itemsets'
              'dm_model_setting'
              'dm_model_settings'
              'dm_model_signature'
              'dm_model_signature_attribute'
              'dm_nb_detail'
              'dm_nb_details'
              'dm_nested_categorical'
              'dm_nested_categoricals'
              'dm_nested_numerical'
              'dm_nested_numericals'
              'dm_nmf_attribute'
              'dm_nmf_attribute_set'
              'dm_nmf_build'
              'dm_nmf_feature'
              'dm_nmf_feature_set'
              'dm_predicate'
              'dm_predicates'
              'dm_ranked_attribute'
              'dm_ranked_attributes'
              'dm_rule'
              'dm_rules'
              'dm_svm_apply'
              'dm_svm_attribute'
              'dm_svm_attribute_set'
              'dm_svm_build'
              'dm_svm_linear_coeff'
              'dm_svm_linear_coeff_set'
              'dm_user_models'
              'dmbgos'
              'dmp_sys'
              'dmsys'
              'drvodm'
              'dual'
              'endpoint'
              'envelope'
              'equals'
              'equals_path'
              'errorlist'
              'evaluate'
              'exf$attribute'
              'exf$attribute_list'
              'exf$indexoper'
              'exf$table_alias'
              'exf$xpath_tag'
              'exf$xpath_tags'
              'exfsys'
              'explainmvarraytype'
              'explainmvmessage'
              'exteriorring'
              'feature_usage_statistic'
              'flashback_transaction_query'
              'ftpuritype'
              'fudickar'
              'functionidconstants'
              'genbaseonlydefinitionstruct'
              'genbooleansequence'
              'gencomparisonruleenum'
              'gencompoundcursorblocksequence'
              'gencompoundcursorblockstruct'
              'genconnectioninterface'
              'genconnectionparameterinfosequ'
              'genconnectionparameterinfostru'
              'genconnectionparametertypeenum'
              'genconnectionstruct'
              'genconstantlistdefinitionstruc'
              'genconstantlistvaluesunion'
              'gencursorblock2sequence'
              'gencursorblock2struct'
              'gencursorblocksequence'
              'gencursorblockstruct'
              'gencursormanagerinterface'
              'gencursormanagersequence'
              'gencursorspecifiersequence'
              'gencursorspecifiersequencesequ'
              'gencursorspecifierstruct'
              'gencursorvalue2union'
              'gencursorvalue2unionsequence'
              'gencursorvalues2union'
              'gencursorvaluesunion'
              'gencursorvalueunion'
              'gencursorvalueunionsequence'
              'gendata2sequenceunion'
              'gendata2union'
              'gendata2unionsequence'
              'gendatabaseinterface'
              'gendatablock2sequence'
              'gendatablock2struct'
              'gendatablocksequence'
              'gendatablockstruct'
              'gendataproviderinterface'
              'gendatasequenceunion'
              'gendatatypeidconstants'
              'gendataunion'
              'gendataunionsequence'
              'gendatesequence'
              'gendefinitionmanagerinterface'
              'gendefinitionpost92sequence'
              'gendefinitionpost92union'
              'gendefinitionsequence'
              'gendefinitionunion'
              'gendependencyblocksequence'
              'gendependencyblocksequencesequ'
              'gendependencyblockstruct'
              'gendependencyblockunion'
              'gendomainenum'
              'gendoublesequence'
              'gendynamicdefinitionstruct'
              'generrorclassenum'
              'generrordescriptionsequence'
              'generrordescriptionstruct'
              'generrortypeenum'
              'genexpressexception'
              'genfloatsequence'
              'genincludeddependencyblockstru'
              'genindexblockstruct'
              'geninterfacestub'
              'geninterfacestubsequence'
              'geninterruptableinterface'
              'geninvalidindexspecificationex'
              'geninvalidmetadataexception'
              'genjoindefinitionstruct'
              'genlonglongsequence'
              'genlongsequence'
              'genmdmclassconstants'
              'genmdmobjectidconstants'
              'genmdmpropertyidconstants'
              'genmetadatadefinitionstruct'
              'genmetadatapropertybagsequence'
              'genmetadatapropertybagunion'
              'genmetadatapropertysequence'
              'genmetadatapropertystruct'
              'genmetadatapropertyvaluesunion'
              'genmetadataproviderinterface'
              'genmultiplierblockstruct'
              'genoctetsequence'
              'genolapiexception'
              'genparentstartendblock2sequenc'
              'genparentstartendblock2union'
              'genparentstartendblocksequence'
              'genparentstartendblockunion'
              'genpersistentsourceidsequence'
              'genpersistentsourceidstruct'
              'genpropertysequence'
              'genpropertystruct'
              'genrangedefinitionstruct'
              'genrawsequence'
              'genrecursivejoindefinitionstru'
              'genremoteapiversionmismatchexc'
              'genremoteauthenticationexcepti'
              'genremoteobjectclosedexception'
              'genremotespecificationupdatene'
              'genremotetaskinterruptedexcept'
              'genserverinterface'
              'genserverstruct'
              'genshortsequence'
              'genshortsequencesequence'
              'genstringsequence'
              'genunmatchedinputsexception'
              'genvaluecursorblocksequence'
              'genvaluecursorblockstruct'
              'genvaluedefinitionstruct'
              'genversioninfostruct'
              'genwstringsequence'
              'geometry'
              'geometrycollection'
              'geometryn'
              'geometrytype'
              'get_error$'
              'global_context'
              'global_name'
              'gv$_lock'
              'gv$access'
              'gv$active_instances'
              'gv$active_services'
              'gv$active_sess_pool_mth'
              'gv$active_session_history'
              'gv$advisor_progress'
              'gv$alert_types'
              'gv$aq'
              'gv$aq1'
              'gv$archive'
              'gv$archive_dest'
              'gv$archive_dest_status'
              'gv$archive_gap'
              'gv$archive_processes'
              'gv$archived_log'
              'gv$asm_alias'
              'gv$asm_client'
              'gv$asm_disk'
              'gv$asm_disk_stat'
              'gv$asm_diskgroup'
              'gv$asm_diskgroup_stat'
              'gv$asm_file'
              'gv$asm_operation'
              'gv$asm_template'
              'gv$aw_aggregate_op'
              'gv$aw_allocate_op'
              'gv$aw_calc'
              'gv$aw_longops'
              'gv$aw_olap'
              'gv$aw_session_info'
              'gv$backup'
              'gv$backup_async_io'
              'gv$backup_corruption'
              'gv$backup_datafile'
              'gv$backup_device'
              'gv$backup_piece'
              'gv$backup_redolog'
              'gv$backup_set'
              'gv$backup_spfile'
              'gv$backup_sync_io'
              'gv$bgprocess'
              'gv$bh'
              'gv$blocking_quiesce'
              'gv$bsp'
              'gv$buffer_pool'
              'gv$buffer_pool_statistics'
              'gv$buffered_publishers'
              'gv$buffered_queues'
              'gv$buffered_subscribers'
              'gv$circuit'
              'gv$class_cache_transfer'
              'gv$class_ping'
              'gv$client_stats'
              'gv$cluster_interconnects'
              'gv$configured_interconnects'
              'gv$context'
              'gv$controlfile'
              'gv$controlfile_record_section'
              'gv$copy_corruption'
              'gv$cr_block_server'
              'gv$current_block_server'
              'gv$database'
              'gv$database_block_corruption'
              'gv$database_incarnation'
              'gv$datafile'
              'gv$datafile_copy'
              'gv$datafile_header'
              'gv$dataguard_config'
              'gv$dataguard_status'
              'gv$datapump_job'
              'gv$datapump_session'
              'gv$db_cache_advice'
              'gv$db_object_cache'
              'gv$db_pipes'
              'gv$db_transportable_platform'
              'gv$dbfile'
              'gv$dblink'
              'gv$deleted_object'
              'gv$dispatcher'
              'gv$dispatcher_config'
              'gv$dispatcher_rate'
              'gv$dlm_all_locks'
              'gv$dlm_convert_local'
              'gv$dlm_convert_remote'
              'gv$dlm_latch'
              'gv$dlm_locks'
              'gv$dlm_misc'
              'gv$dlm_ress'
              'gv$dlm_traffic_controller'
              'gv$enabledprivs'
              'gv$enqueue_lock'
              'gv$enqueue_stat'
              'gv$enqueue_statistics'
              'gv$event_histogram'
              'gv$event_name'
              'gv$eventmetric'
              'gv$execution'
              'gv$fast_start_servers'
              'gv$fast_start_transactions'
              'gv$file_cache_transfer'
              'gv$file_histogram'
              'gv$file_ping'
              'gv$filemetric'
              'gv$filemetric_history'
              'gv$filespace_usage'
              'gv$filestat'
              'gv$fixed_table'
              'gv$fixed_view_definition'
              'gv$flashback_database_log'
              'gv$flashback_database_logfile'
              'gv$flashback_database_stat'
              'gv$gc_element'
              'gv$gc_elements_with_collisions'
              'gv$gcshvmaster_info'
              'gv$gcspfmaster_info'
              'gv$ges_blocking_enqueue'
              'gv$ges_enqueue'
              'gv$global_blocked_locks'
              'gv$global_transaction'
              'gv$globalcontext'
              'gv$hs_agent'
              'gv$hs_parameter'
              'gv$hs_session'
              'gv$hvmaster_info'
              'gv$indexed_fixed_column'
              'gv$instance'
              'gv$instance_cache_transfer'
              'gv$instance_log_group'
              'gv$instance_recovery'
              'gv$java_library_cache_memory'
              'gv$java_pool_advice'
              'gv$javapool'
              'gv$latch'
              'gv$latch_children'
              'gv$latch_misses'
              'gv$latch_parent'
              'gv$latchholder'
              'gv$latchname'
              'gv$library_cache_memory'
              'gv$librarycache'
              'gv$license'
              'gv$loadistat'
              'gv$loadpstat'
              'gv$lock'
              'gv$lock_activity'
              'gv$lock_element'
              'gv$lock_type'
              'gv$locked_object'
              'gv$locks_with_collisions'
              'gv$log'
              'gv$log_history'
              'gv$logfile'
              'gv$loghist'
              'gv$logmnr_callback'
              'gv$logmnr_contents'
              'gv$logmnr_dictionary'
              'gv$logmnr_dictionary_load'
              'gv$logmnr_latch'
              'gv$logmnr_logfile'
              'gv$logmnr_logs'
              'gv$logmnr_parameters'
              'gv$logmnr_process'
              'gv$logmnr_region'
              'gv$logmnr_session'
              'gv$logmnr_stats'
              'gv$logmnr_transaction'
              'gv$logstdby'
              'gv$logstdby_process'
              'gv$logstdby_progress'
              'gv$logstdby_state'
              'gv$logstdby_stats'
              'gv$logstdby_transaction'
              'gv$managed_standby'
              'gv$map_comp_list'
              'gv$map_element'
              'gv$map_ext_element'
              'gv$map_file'
              'gv$map_file_extent'
              'gv$map_file_io_stack'
              'gv$map_library'
              'gv$map_subelement'
              'gv$max_active_sess_target_mth'
              'gv$metric'
              'gv$metric_history'
              'gv$metricgroup'
              'gv$metricname'
              'gv$mttr_target_advice'
              'gv$mutex_sleep'
              'gv$mutex_sleep_history'
              'gv$mvrefresh'
              'gv$mystat'
              'gv$nls_parameters'
              'gv$nls_valid_values'
              'gv$object_dependency'
              'gv$obsolete_parameter'
              'gv$offline_range'
              'gv$open_cursor'
              'gv$option'
              'gv$osstat'
              'gv$parallel_degree_limit_mth'
              'gv$parameter'
              'gv$parameter_valid_values'
              'gv$parameter2'
              'gv$pga_target_advice'
              'gv$pga_target_advice_histogram'
              'gv$pgastat'
              'gv$pq_sesstat'
              'gv$pq_slave'
              'gv$pq_sysstat'
              'gv$pq_tqstat'
              'gv$process'
              'gv$process_memory'
              'gv$process_memory_detail'
              'gv$process_memory_detail_prog'
              'gv$propagation_receiver'
              'gv$propagation_sender'
              'gv$proxy_archivedlog'
              'gv$proxy_datafile'
              'gv$pwfile_users'
              'gv$px_buffer_advice'
              'gv$px_process'
              'gv$px_process_sysstat'
              'gv$px_session'
              'gv$px_sesstat'
              'gv$queue'
              'gv$queueing_mth'
              'gv$recover_file'
              'gv$recovery_file_status'
              'gv$recovery_log'
              'gv$recovery_progress'
              'gv$recovery_status'
              'gv$replprop'
              'gv$replqueue'
              'gv$reqdist'
              'gv$reserved_words'
              'gv$resource'
              'gv$resource_limit'
              'gv$restore_point'
              'gv$resumable'
              'gv$rfs_thread'
              'gv$rman_configuration'
              'gv$rman_output'
              'gv$rollstat'
              'gv$rowcache'
              'gv$rowcache_parent'
              'gv$rowcache_subordinate'
              'gv$rsrc_cons_group_history'
              'gv$rsrc_consumer_group'
              'gv$rsrc_consumer_group_cpu_mth'
              'gv$rsrc_plan'
              'gv$rsrc_plan_cpu_mth'
              'gv$rsrc_plan_history'
              'gv$rsrc_session_info'
              'gv$rule'
              'gv$rule_set'
              'gv$rule_set_aggregate_stats'
              'gv$scheduler_running_jobs'
              'gv$segment_statistics'
              'gv$segstat'
              'gv$segstat_name'
              'gv$serv_mod_act_stats'
              'gv$service_event'
              'gv$service_stats'
              'gv$service_wait_class'
              'gv$servicemetric'
              'gv$servicemetric_history'
              'gv$services'
              'gv$ses_optimizer_env'
              'gv$sess_io'
              'gv$sess_time_model'
              'gv$session'
              'gv$session_connect_info'
              'gv$session_cursor_cache'
              'gv$session_event'
              'gv$session_longops'
              'gv$session_object_cache'
              'gv$session_wait'
              'gv$session_wait_class'
              'gv$session_wait_history'
              'gv$sessmetric'
              'gv$sesstat'
              'gv$sga'
              'gv$sga_current_resize_ops'
              'gv$sga_dynamic_components'
              'gv$sga_dynamic_free_memory'
              'gv$sga_resize_ops'
              'gv$sga_target_advice'
              'gv$sgainfo'
              'gv$sgastat'
              'gv$shared_pool_advice'
              'gv$shared_pool_reserved'
              'gv$shared_server'
              'gv$shared_server_monitor'
              'gv$sort_segment'
              'gv$sort_usage'
              'gv$spparameter'
              'gv$sql'
              'gv$sql_bind_capture'
              'gv$sql_bind_data'
              'gv$sql_bind_metadata'
              'gv$sql_cursor'
              'gv$sql_join_filter'
              'gv$sql_optimizer_env'
              'gv$sql_plan'
              'gv$sql_plan_statistics'
              'gv$sql_plan_statistics_all'
              'gv$sql_redirection'
              'gv$sql_shared_cursor'
              'gv$sql_shared_memory'
              'gv$sql_workarea'
              'gv$sql_workarea_active'
              'gv$sql_workarea_histogram'
              'gv$sqlarea'
              'gv$sqlarea_plan_hash'
              'gv$sqlstats'
              'gv$sqltext'
              'gv$sqltext_with_newlines'
              'gv$standby_apply_snapshot'
              'gv$standby_log'
              'gv$statistics_level'
              'gv$statname'
              'gv$streams_apply_coordinator'
              'gv$streams_apply_reader'
              'gv$streams_apply_server'
              'gv$streams_capture'
              'gv$streams_pool_advice'
              'gv$streams_transaction'
              'gv$subcache'
              'gv$sys_optimizer_env'
              'gv$sys_time_model'
              'gv$sysaux_occupants'
              'gv$sysmetric'
              'gv$sysmetric_history'
              'gv$sysmetric_summary'
              'gv$sysstat'
              'gv$system_cursor_cache'
              'gv$system_event'
              'gv$system_parameter'
              'gv$system_parameter2'
              'gv$system_wait_class'
              'gv$tablespace'
              'gv$temp_cache_transfer'
              'gv$temp_extent_map'
              'gv$temp_extent_pool'
              'gv$temp_histogram'
              'gv$temp_ping'
              'gv$temp_space_header'
              'gv$tempfile'
              'gv$temporary_lobs'
              'gv$tempseg_usage'
              'gv$tempstat'
              'gv$thread'
              'gv$threshold_types'
              'gv$timer'
              'gv$timezone_file'
              'gv$timezone_names'
              'gv$transaction'
              'gv$transaction_enqueue'
              'gv$transportable_platform'
              'gv$tsm_sessions'
              'gv$type_size'
              'gv$undostat'
              'gv$version'
              'gv$vpd_policy'
              'gv$waitclassmetric'
              'gv$waitclassmetric_history'
              'gv$waitstat'
              'gv$wallet'
              'gv$xml_audit_trail'
              'gv_ksmhp'
              'gv_olapi_iface_object_history'
              'gv_olapi_iface_op_history'
              'gv_olapi_memory_op_history'
              'gv_olapi_session_history'
              'henricho'
              'her_seq'
              'herausgeber'
              'herausgeber_seq'
              'hhand'
              'hhbytelen'
              'hhcbit'
              'hhcellbndry'
              'hhcellsize'
              'hhcldate'
              'hhcollapse'
              'hhcommoncode'
              'hhcompare'
              'hhcompose'
              'hhdecode'
              'hhdistance'
              'hhencode'
              'hhencode_bylevel'
              'hhgbit'
              'hhgetcid'
              'hhgroup'
              'hhgtbit'
              'hhgtype'
              'hhidlpart'
              'hhidpart'
              'hhincrlev'
              'hhjldate'
              'hhlength'
              'hhlevels'
              'hhmatch'
              'hhmaxcode'
              'hhncompare'
              'hhndim'
              'hhor'
              'hhorder'
              'hhprecision'
              'hhsbit'
              'hhsetcid'
              'hhstbit'
              'hhstype'
              'hhsubdivide'
              'hhsubstr'
              'hhxor'
              'hr'
              'hs_all_caps'
              'hs_all_dd'
              'hs_all_inits'
              'hs_base_caps'
              'hs_base_dd'
              'hs_class_caps'
              'hs_class_dd'
              'hs_class_init'
              'hs_fds_class'
              'hs_fds_class_date'
              'hs_fds_inst'
              'hs_inst_caps'
              'hs_inst_dd'
              'hs_inst_init'
              'htf'
              'htp'
              'httpuritype'
              'import_test'
              'ind'
              'index_histogram'
              'index_stats'
              'interiorringn'
              'interruptableinterface'
              'intersection'
              'intersects'
              'isclosed'
              'isempty'
              'isring'
              'issimple'
              'ix'
              'java_xa'
              'javasnm'
              'kr_kunden_rufnummern'
              'ku$_auddef_t'
              'ku$_audit_default_list_t'
              'ku$_audit_list_t'
              'ku$_audobj_t'
              'ku$_chunk_list_t'
              'ku$_chunk_t'
              'ku$_ddl'
              'ku$_ddls'
              'ku$_dumpfile'
              'ku$_dumpfile_info'
              'ku$_dumpfile_item'
              'ku$_dumpfile1010'
              'ku$_dumpfile1020'
              'ku$_dumpfileset'
              'ku$_dumpfileset1010'
              'ku$_dumpfileset1020'
              'ku$_errorline'
              'ku$_errorlines'
              'ku$_java_t'
              'ku$_jobdesc'
              'ku$_jobdesc1010'
              'ku$_jobdesc1020'
              'ku$_jobstatus'
              'ku$_jobstatus1010'
              'ku$_jobstatus1020'
              'ku$_logentry'
              'ku$_logentry1010'
              'ku$_logentry1020'
              'ku$_logline'
              'ku$_logline1010'
              'ku$_logline1020'
              'ku$_multi_ddl'
              'ku$_multi_ddls'
              'ku$_objnumpair'
              'ku$_objnumpairlist'
              'ku$_objnumset'
              'ku$_paramvalue'
              'ku$_paramvalue1010'
              'ku$_paramvalue1020'
              'ku$_paramvalues'
              'ku$_paramvalues1010'
              'ku$_paramvalues1020'
              'ku$_parsed_item'
              'ku$_parsed_items'
              'ku$_procobj_line'
              'ku$_procobj_lines'
              'ku$_procobj_loc'
              'ku$_procobj_locs'
              'ku$_source_list_t'
              'ku$_source_t'
              'ku$_status'
              'ku$_status1010'
              'ku$_status1020'
              'ku$_submitresult'
              'ku$_submitresults'
              'ku$_taction_list_t'
              'ku$_taction_t'
              'ku$_vcnt'
              'ku$_workerstatus'
              'ku$_workerstatus1010'
              'ku$_workerstatus1020'
              'ku$_workerstatuslist'
              'ku$_workerstatuslist1010'
              'ku$_workerstatuslist1020'
              'kupcc'
              'leser'
              'leser_seq'
              'linestring'
              'linestringfromtext'
              'linestringfromwkb'
              'loader_col_flags'
              'loader_col_info'
              'loader_col_type'
              'loader_constraint_info'
              'loader_dir_objs'
              'loader_file_ts'
              'loader_full_attr_name'
              'loader_intcol_info'
              'loader_lob_flags'
              'loader_nested_varrays'
              'loader_oid_info'
              'loader_param_info'
              'loader_part_info'
              'loader_ref_info'
              'loader_skip_unusable_indexes'
              'loader_tab_info'
              'loader_trigger_info'
              'locator_within_distance'
              'loglist'
              'map_object'
              'match_score'
              'matches'
              'md'
              'md_lrs'
              'mddata'
              'mdmclassconstants'
              'mdmobjectidconstants'
              'mdmpropertyidconstants'
              'mdsys'
              'metadataproviderinterface'
              'mgmt$alert_current'
              'mgmt$alert_history'
              'mgmt$availability_current'
              'mgmt$availability_history'
              'mgmt$blackout_history'
              'mgmt$cluster_interconnects'
              'mgmt$csa_clients'
              'mgmt$csa_host_cookies'
              'mgmt$csa_host_cpus'
              'mgmt$csa_host_custom'
              'mgmt$csa_host_iocards'
              'mgmt$csa_host_nics'
              'mgmt$csa_host_os_components'
              'mgmt$csa_host_os_filesystems'
              'mgmt$csa_host_os_properties'
              'mgmt$csa_host_sw'
              'mgmt$db_controlfiles'
              'mgmt$db_datafiles'
              'mgmt$db_dbninstanceinfo'
              'mgmt$db_featureusage'
              'mgmt$db_init_params'
              'mgmt$db_license'
              'mgmt$db_redologs'
              'mgmt$db_rollback_segs'
              'mgmt$db_sga'
              'mgmt$db_tablespaces'
              'mgmt$delta_component_details'
              'mgmt$delta_components'
              'mgmt$delta_fs_mount'
              'mgmt$delta_hardware'
              'mgmt$delta_host_config'
              'mgmt$delta_init'
              'mgmt$delta_oneoff_patches'
              'mgmt$delta_oracle_home'
              'mgmt$delta_os_comp_details'
              'mgmt$delta_os_components'
              'mgmt$delta_os_kernel_params'
              'mgmt$delta_patchset_details'
              'mgmt$delta_patchsets'
              'mgmt$delta_tablespaces'
              'mgmt$delta_vendor_sw'
              'mgmt$delta_view'
              'mgmt$delta_view_details'
              'mgmt$ecm_current_snapshots'
              'mgmt$ecm_visible_snapshots'
              'mgmt$group_derived_memberships'
              'mgmt$group_flat_memberships'
              'mgmt$group_members'
              'mgmt$ha_backup'
              'mgmt$ha_files'
              'mgmt$ha_info'
              'mgmt$ha_init_params'
              'mgmt$ha_mttr'
              'mgmt$ha_rman_config'
              'mgmt$hw_nic'
              'mgmt$interface_stats'
              'mgmt$metric_collection'
              'mgmt$metric_current'
              'mgmt$metric_daily'
              'mgmt$metric_details'
              'mgmt$metric_hourly'
              'mgmt$missing_targets'
              'mgmt$missing_targets_in_groups'
              'mgmt$os_components'
              'mgmt$os_fs_mount'
              'mgmt$os_hw_summary'
              'mgmt$os_kernel_params'
              'mgmt$os_patches'
              'mgmt$os_summary'
              'mgmt$racdb_interconnects'
              'mgmt$software_comp_patchset'
              'mgmt$software_component_oneoff'
              'mgmt$software_components'
              'mgmt$software_dependencies'
              'mgmt$software_homes'
              'mgmt$software_oneoff_patches'
              'mgmt$software_others'
              'mgmt$software_patches_in_homes'
              'mgmt$software_patchsets'
              'mgmt$target'
              'mgmt$target_components'
              'mgmt$target_composite'
              'mgmt$target_properties'
              'mgmt$target_type'
              'mgmt_target_blackouts'
              'mgmt_view'
              'migrate'
              'mrv_olap_cwm1_aggop'
              'mrv_olap_cwm1_aggord'
              'mrv_olap1_facttblfctmaps'
              'mrv_olap1_facttblkeymaps'
              'mrv_olap1_pop_cubes'
              'mrv_olap1_pop_dimensions'
              'mrv_olap2_aggregation_uses'
              'mrv_olap2_aw_attributes'
              'mrv_olap2_aw_cube_agg_lvl'
              'mrv_olap2_aw_cube_agg_meas'
              'mrv_olap2_aw_cube_agg_op'
              'mrv_olap2_aw_cube_agg_specs'
              'mrv_olap2_aw_cube_dim_uses'
              'mrv_olap2_aw_cube_measures'
              'mrv_olap2_aw_cubes'
              'mrv_olap2_aw_dim_hier_lvl_ord'
              'mrv_olap2_aw_dim_levels'
              'mrv_olap2_aw_dimensions'
              'mrv_olap2_aw_map_attr_use'
              'mrv_olap2_aw_map_dim_use'
              'mrv_olap2_aw_map_meas_use'
              'mrv_olap2_aw_phys_obj'
              'mrv_olap2_aw_phys_obj_prop'
              'mrv_olap2_aws'
              'mrv_olap2_awviewcols'
              'mrv_olap2_awviews'
              'mrv_olap2_catalog_entity_uses'
              'mrv_olap2_catalogs'
              'mrv_olap2_cube_measures'
              'mrv_olap2_descriptors'
              'mrv_olap2_dim_attributes'
              'mrv_olap2_dim_hier_level_uses'
              'mrv_olap2_dim_hiers'
              'mrv_olap2_dim_level_attr_maps'
              'mrv_olap2_entity_desc_uses'
              'mrv_olap2_entity_ext_parms'
              'mrv_olap2_entity_parameters'
              'mrv_olap2_facttblfctmaps'
              'mrv_olap2_facttblkeymaps'
              'mrv_olap2_hier_custom_sort'
              'mrv_olap2_hierdim_keycol_map'
              'mrv_olap2_hierdims'
              'mrv_olap2_hierdims_cc'
              'mrv_olap2_join_key_col_uses'
              'mrv_olap2_listdims'
              'mrv_olap2_listdims_cc'
              'mrv_olap2_pop_cubes'
              'mrv_olap2_pop_dimensions'
              'msg_handler'
              'multicurve'
              'multilinestring'
              'multilinestringfromtext'
              'multilinestringfromwkb'
              'multipoint'
              'multipolygon'
              'multipolygonfromtext'
              'multipolygonfromwkb'
              'multisurface'
              'mv_buch'
              'my_sdo_index_metadata'
              'namefromlastddl'
              'nls_database_parameters'
              'nls_instance_parameters'
              'nls_session_parameters'
              'numgeometries'
              'numinteriorrings'
              'numpoints'
              'o_ars_tg_identifier'
              'o_syst_protocol'
              'obj'
              'odac_array'
              'odac_loaded'
              'odac_long_char'
              'odac_nestedtable'
              'odciconst'
              'odm_abn_model'
              'odm_association_rule_model'
              'odm_attribute_importance_model'
              'odm_clustering_util'
              'odm_model_util'
              'odm_naive_bayes_model'
              'odm_oc_clustering_model'
              'odm_util'
              'oe'
              'ogc_contains'
              'ogc_length'
              'ogc_union'
              'ogis_geometry_columns'
              'ogis_spatial_reference_systems'
              'ol$'
              'ol$hints'
              'ol$nodes'
              'olap_api_session_init'
              'olap_bool_srf'
              'olap_condition'
              'olap_date_srf'
              'olap_expression'
              'olap_expression_bool'
              'olap_expression_date'
              'olap_expression_text'
              'olap_number_srf'
              'olap_oledb_actions'
              'olap_oledb_cubes'
              'olap_oledb_dimensions'
              'olap_oledb_functions'
              'olap_oledb_hierarchies'
              'olap_oledb_keywords'
              'olap_oledb_levels'
              'olap_oledb_mdproperties'
              'olap_oledb_mdprops'
              'olap_oledb_mdpropvals'
              'olap_oledb_measdims_pvt'
              'olap_oledb_measures'
              'olap_oledb_properties'
              'olap_oledb_sets'
              'olap_srf_t'
              'olap_sys_aw_access_cube_view'
              'olap_sys_aw_access_dim_view'
              'olap_sys_aw_enable_access_view'
              'olap_table'
              'olap_text_srf'
              'olapdimview'
              'olapfactview'
              'olapi_history'
              'olapi_history_seq'
              'olapi_iface_object_history'
              'olapi_iface_op_history'
              'olapi_mdx_rowset_impl_t'
              'olapi_mdx_rowset_table'
              'olapi_memory_heap_history'
              'olapi_memory_op_history'
              'olapi_session_history'
              'olapibootstrap'
              'olapibootstrap2'
              'olapihandshake'
              'olapihandshake2'
              'olaprc_table'
              'olapsys'
              'ora_client_ip_address'
              'ora_database_name'
              'ora_des_encrypted_password'
              'ora_dict_obj_name'
              'ora_dict_obj_name_list'
              'ora_dict_obj_owner'
              'ora_dict_obj_owner_list'
              'ora_dict_obj_type'
              'ora_dm_tree_nodes'
              'ora_fi_decision_tree_horiz'
              'ora_grantee'
              'ora_instance_num'
              'ora_is_alter_column'
              'ora_is_creating_nested_table'
              'ora_is_drop_column'
              'ora_is_servererror'
              'ora_kglr7_db_links'
              'ora_kglr7_dependencies'
              'ora_kglr7_idl_char'
              'ora_kglr7_idl_sb4'
              'ora_kglr7_idl_ub1'
              'ora_kglr7_idl_ub2'
              'ora_login_user'
              'ora_mining_number_nt'
              'ora_mining_varchar2_nt'
              'ora_partition_pos'
              'ora_privilege_list'
              'ora_revokee'
              'ora_server_error'
              'ora_server_error_depth'
              'ora_server_error_msg'
              'ora_server_error_num_params'
              'ora_server_error_param'
              'ora_si_mkstillimage'
              'ora_space_error_info'
              'ora_sql_txt'
              'ora_sysevent'
              'ora_with_grant_option'
              'oraclexml'
              'oraclexmlstore'
              'ordaudio'
              'orddoc'
              'ordimage'
              'ordimagesignature'
              'ordplugins'
              'ordsys'
              'ordvideo'
              'outline'
              'outln'
              'outln_pkg'
              'output_test'
              'overlap'
              'owa'
              'owa_cache'
              'owa_cookie'
              'owa_custom'
              'owa_global'
              'owa_image'
              'owa_init'
              'owa_match'
              'owa_opt_lock'
              'owa_pattern'
              'owa_sec'
              'owa_text'
              'owa_util'
              'parameteridconstants'
              'part_test'
              'pas_projekt'
              'pasadm'
              'pasrep'
              'path'
              'path_view'
              'pbsde'
              'pers_zuord_vw'
              'person'
              'person_seq'
              'personen_zuordnung'
              'pkg_syst_analyze'
              'pkg_syst_compile'
              'pkg_syst_execute'
              'pkg_syst_file'
              'pkg_syst_jobs'
              'pkg_syst_lock'
              'pkg_syst_mail'
              'pkg_syst_message'
              'pkg_syst_move'
              'pkg_syst_parameter'
              'pkg_syst_parameter_tools'
              'pkg_syst_process_state'
              'pkg_syst_protocol'
              'pkg_syst_range'
              'pkg_syst_range_parameter'
              'pkg_syst_range_user'
              'pkg_syst_rebuild'
              'pkg_syst_statement'
              'pkg_syst_statement_user'
              'pkg_syst_string_tools'
              'pkg_syst_timer'
              'pkg_syst_tools'
              'pkg_syst_tools_user'
              'plan_table'
              'plitblm'
              'pm'
              'point'
              'pointfromtext'
              'pointfromwkb'
              'pointn'
              'pointonsurface'
              'polygon'
              'polygonfromtext'
              'polygonfromwkb'
              'product_component_version'
              'product_profile'
              'product_user_profile'
              'proxy_roles'
              'proxy_users'
              'proxy_users_and_roles'
              'prvt_sam'
              'public_dependency'
              'queue_privileges'
              'rausche'
              'recyclebin'
              'relate'
              'repcat_repcolumn_base'
              'resource_cost'
              'resource_view'
              'rewritearraytype'
              'rewritemessage'
              'rlm$eventids'
              'rlm$table_alias'
              'role_role_privs'
              'role_sys_privs'
              'role_tab_privs'
              'role_wm_privs'
              'rtreejoinfunc'
              'schema_export_objects'
              'scn_to_timestamp'
              'score'
              'scott'
              'sdo'
              'sdo_3gl'
              'sdo_addr_array'
              'sdo_admin'
              'sdo_aggr_centroid'
              'sdo_aggr_concat_lines'
              'sdo_aggr_convexhull'
              'sdo_aggr_lrs_concat'
              'sdo_aggr_lrs_concat_3d'
              'sdo_aggr_mbr'
              'sdo_aggr_union'
              'sdo_angle_units'
              'sdo_anyinteract'
              'sdo_area_units'
              'sdo_available_elem_ops'
              'sdo_available_non_elem_ops'
              'sdo_available_ops'
              'sdo_cart_text'
              'sdo_catalog'
              'sdo_contains'
              'sdo_coord_axes'
              'sdo_coord_axis_names'
              'sdo_coord_op_methods'
              'sdo_coord_op_param_use'
              'sdo_coord_op_param_vals'
              'sdo_coord_op_params'
              'sdo_coord_op_paths'
              'sdo_coord_ops'
              'sdo_coord_ref_sys'
              'sdo_coord_ref_system'
              'sdo_coord_sys'
              'sdo_coveredby'
              'sdo_covers'
              'sdo_crs_compound'
              'sdo_crs_engineering'
              'sdo_crs_geocentric'
              'sdo_crs_geographic2d'
              'sdo_crs_geographic3d'
              'sdo_crs_projected'
              'sdo_crs_vertical'
              'sdo_cs'
              'sdo_datum_engineering'
              'sdo_datum_geodetic'
              'sdo_datum_vertical'
              'sdo_datums'
              'sdo_datums_old_format'
              'sdo_datums_old_snapshot'
              'sdo_dim_array'
              'sdo_dim_element'
              'sdo_dist_units'
              'sdo_edge_array'
              'sdo_elem_info_array'
              'sdo_ellipsoids'
              'sdo_ellipsoids_old_format'
              'sdo_ellipsoids_old_snapshot'
              'sdo_equal'
              'sdo_filter'
              'sdo_gcdr'
              'sdo_geo_addr'
              'sdo_geom'
              'sdo_geometry'
              'sdo_geor'
              'sdo_geor_colormap'
              'sdo_geor_grayscale'
              'sdo_geor_histogram'
              'sdo_geor_int'
              'sdo_geor_metadata'
              'sdo_geor_srs'
              'sdo_geor_utl'
              'sdo_georaster'
              'sdo_georx'
              'sdo_index_metadata'
              'sdo_inside'
              'sdo_join'
              'sdo_keywordarray'
              'sdo_link_t'
              'sdo_list_type'
              'sdo_lrs'
              'sdo_mbr'
              'sdo_migrate'
              'sdo_net'
              'sdo_net_mem'
              'sdo_network_manager_t'
              'sdo_network_t'
              'sdo_nn'
              'sdo_nn_distance'
              'sdo_node_t'
              'sdo_number_array'
              'sdo_on'
              'sdo_ordinate_array'
              'sdo_overlapbdydisjoint'
              'sdo_overlapbdyintersect'
              'sdo_overlaps'
              'sdo_path_t'
              'sdo_point_type'
              'sdo_preferred_ops_system'
              'sdo_preferred_ops_user'
              'sdo_pridx'
              'sdo_prime_meridians'
              'sdo_projections_old_format'
              'sdo_projections_old_snapshot'
              'sdo_raster'
              'sdo_rasterset'
              'sdo_rdf'
              'sdo_rdf_alias'
              'sdo_rdf_aliases'
              'sdo_rdf_inference'
              'sdo_rdf_internal'
              'sdo_rdf_match'
              'sdo_rdf_models'
              'sdo_rdf_rulebases'
              'sdo_rdf_triple'
              'sdo_rdf_triple_s'
              'sdo_regaggr'
              'sdo_regaggrset'
              'sdo_region'
              'sdo_regionset'
              'sdo_relate'
              'sdo_relate_mask'
              'sdo_relatemask_table'
              'sdo_router_partition'
              'sdo_rowidpair'
              'sdo_rowidset'
              'sdo_rtree_admin'
              'sdo_rtree_filter'
              'sdo_rtree_relate'
              'sdo_sam'
              'sdo_srid_chain'
              'sdo_srid_list'
              'sdo_string_array'
              'sdo_tfm_chain'
              'sdo_tgl_object'
              'sdo_tgl_object_array'
              'sdo_topo'
              'sdo_topo_anyinteract'
              'sdo_topo_data$'
              'sdo_topo_geometry'
              'sdo_topo_geometry_layer'
              'sdo_topo_geometry_layer_array'
              'sdo_topo_map'
              'sdo_topo_nstd_tbl'
              'sdo_topo_object'
              'sdo_topo_object_array'
              'sdo_topo_transact_data$'
              'sdo_touch'
              'sdo_transient_rule'
              'sdo_transient_rule_set'
              'sdo_tune'
              'sdo_txn_idx_deletes'
              'sdo_txn_idx_exp_upd_rgn'
              'sdo_txn_idx_inserts'
              'sdo_units_of_measure'
              'sdo_util'
              'sdo_version'
              'sdo_vpoint_type'
              'sdo_within_distance'
              'sdo_xml_schemas'
              'sdoaggrtype'
              'seq'
              'serverinterface'
              'session_context'
              'session_privs'
              'session_roles'
              'setemviewusercontext'
              'sh'
              'si_appendclrhstgr'
              'si_arrayclrhstgr'
              'si_averagecolor'
              'si_chgcontent'
              'si_color'
              'si_colorhistogram'
              'si_convertformat'
              'si_featurelist'
              'si_findavgclr'
              'si_findclrhstgr'
              'si_findpstnlclr'
              'si_findtexture'
              'si_getavgclrftr'
              'si_getavgclrftrw'
              'si_getclrhstgrftr'
              'si_getclrhstgrftrw'
              'si_getcontent'
              'si_getcontentlngth'
              'si_getformat'
              'si_getheight'
              'si_getpstnlclrftr'
              'si_getpstnlclrftrw'
              'si_getsizedthmbnl'
              'si_gettextureftr'
              'si_gettextureftrw'
              'si_getthmbnl'
              'si_getwidth'
              'si_informtn_schema'
              'si_mkavgclr'
              'si_mkclrhstgr'
              'si_mkftrlist'
              'si_mkrgbclr'
              'si_mkstillimage1'
              'si_mkstillimage2'
              'si_positionalcolor'
              'si_scorebyavgclr'
              'si_scorebyclrhstgr'
              'si_scorebyftrlist'
              'si_scorebypstnlclr'
              'si_scorebytexture'
              'si_setavgclrftr'
              'si_setclrhstgrftr'
              'si_setpstnlclrftr'
              'si_settextureftr'
              'si_stillimage'
              'si_texture'
              'sm$version'
              'spatial_index'
              'sql_bind'
              'sql_bind_set'
              'sql_binds'
              'sql_objects'
              'sql_plan_row_type'
              'sql_plan_stat_row_type'
              'sql_plan_table_type'
              'sqlbaseonlydefinitionstruct'
              'sqlbooleansequence'
              'sqlcomparisonruleenum'
              'sqlcompoundcursorblocksequence'
              'sqlcompoundcursorblockstruct'
              'sqlconnectionparameterinfoseq'
              'sqlconnectionparameterinfosequ'
              'sqlconnectionparameterinfostru'
              'sqlconnectionparametertypeenum'
              'sqlconnectionstruct'
              'sqlconstantlistdefinitionstruc'
              'sqlconstantlistvaluesunion'
              'sqlcursorblockstruct'
              'sqlcursorspecifiersequ'
              'sqlcursorspecifiersequence'
              'sqlcursorspecifierstruct'
              'sqlcursorvaluesunion'
              'sqlcursorvalueunion'
              'sqlcursorvalueunionsequence'
              'sqldatablocksequence'
              'sqldatablockstruct'
              'sqldatasequenceunion'
              'sqldataunion'
              'sqldataunionsequence'
              'sqldefinitionsequence'
              'sqldefinitionunion'
              'sqldependencyblockseq'
              'sqldependencyblocksequence'
              'sqldependencyblocksequenceseq'
              'sqldependencyblocksequencesequ'
              'sqldependencyblockstruct'
              'sqldependencyblockunion'
              'sqldomainenum'
              'sqldoublesequence'
              'sqldynamicdefinitionstruct'
              'sqlerrorclassenum'
              'sqlerrordescriptionsequence'
              'sqlerrordescriptionstruct'
              'sqlerrortypeenum'
              'sqlexpressexception'
              'sqlfloatsequence'
              'sqlincludeddependencyblockstru'
              'sqlindexblockstruct'
              'sqlinvalidindexspecificationex'
              'sqljoindefinitionstruct'
              'sqllonglongsequence'
              'sqllongsequence'
              'sqlmetadatadefinitionstruct'
              'sqlmetadatapropertybagseq'
              'sqlmetadatapropertybagsequence'
              'sqlmetadatapropertybagunion'
              'sqlmetadatapropertysequence'
              'sqlmetadatapropertystruct'
              'sqlmetadatapropertyvaluesunion'
              'sqlmultiplierblockstruct'
              'sqloctetsequence'
              'sqlolapiexception'
              'sqlparentstartendblocksequence'
              'sqlparentstartendblockunion'
              'sqlpersistentsourceidsequence'
              'sqlpersistentsourceidstruct'
              'sqlprof_attr'
              'sqlpropertysequence'
              'sqlpropertystruct'
              'sqlrangedefinitionstruct'
              'sqlremoteapiversionmismatchexc'
              'sqlremoteauthenticationexcepti'
              'sqlremoteobjectclosedexception'
              'sqlremotespecificationupdatene'
              'sqlremotetaskinterruptedexcept'
              'sqlserverstruct'
              'sqlset'
              'sqlset_row'
              'sqlshortsequ'
              'sqlshortsequence'
              'sqlstringsequence'
              'sqlunmatchedinputsexception'
              'sqlvaluecursorblocksequence'
              'sqlvaluecursorblockstruct'
              'sqlvaluedefinitionstruct'
              'sqlversioninfostruct'
              'sqlwstringseq'
              'sqlwstringsequence'
              'srid'
              'startpoint'
              'stmt_audit_option_map'
              'surface'
              'symmetricdifference'
              'syn'
              'sys'
              'sys_ixqagg'
              'sys_nt_collect'
              'sys_xmlagg'
              'sysman'
              'syst_dbms_lock_allocation'
              'syst_message'
              'syst_param_parameter'
              'syst_param_value'
              'syst_process_state'
              'syst_process_state_detail'
              'syst_protocol'
              'syst_rang_range'
              'syst_rang_value'
              'syst_statement_object'
              'syst_statement_statement'
              'system'
              'system_privilege_map'
              'systools'
              't_syst_date_list'
              't_syst_number_list'
              't_syst_protocol'
              't_syst_string_list'
              'tab'
              'table_export_objects'
              'table_privilege_map'
              'table_privileges'
              'tablespace_export_objects'
              'tabs'
              'tblast_align'
              'tblast_match'
              'temp$lob'
              'temp_buch_insert'
              'temp_buch_update'
              'temp_person_insert'
              'temp_verlag_insert'
              'test'
              'testora10'
              'tfm_plan'
              'threadtable'
              'timestamp_to_scn'
              'tmp_coord_ops'
              'todacarray1'
              'todacarray2'
              'todacarray3'
              'todacarrtype'
              'todacarrtype1'
              'todacnestedsubtype'
              'todacnestedtable'
              'todacnestedtype'
              'touch'
              'transportable_export_objects'
              'trusted_servers'
              'tsmsys'
              'ueb_seq'
              'uebersetzer'
              'uebersetzer_seq'
              'under_path'
              'update_buch'
              'urifactory'
              'uritype'
              'user_advisor_actions'
              'user_advisor_directives'
              'user_advisor_findings'
              'user_advisor_journal'
              'user_advisor_log'
              'user_advisor_objects'
              'user_advisor_parameters'
              'user_advisor_rationale'
              'user_advisor_recommendations'
              'user_advisor_sqla_rec_sum'
              'user_advisor_sqla_wk_map'
              'user_advisor_sqla_wk_stmts'
              'user_advisor_sqlw_colvol'
              'user_advisor_sqlw_journal'
              'user_advisor_sqlw_parameters'
              'user_advisor_sqlw_stmts'
              'user_advisor_sqlw_sum'
              'user_advisor_sqlw_tables'
              'user_advisor_sqlw_tabvol'
              'user_advisor_sqlw_templates'
              'user_advisor_tasks'
              'user_advisor_templates'
              'user_all_tables'
              'user_application_roles'
              'user_aq_agent_privs'
              'user_arguments'
              'user_associations'
              'user_attribute_transformations'
              'user_audit_object'
              'user_audit_policies'
              'user_audit_policy_columns'
              'user_audit_session'
              'user_audit_statement'
              'user_audit_trail'
              'user_aw_obj'
              'user_aw_prop'
              'user_aw_ps'
              'user_aws'
              'user_base_table_mviews'
              'user_catalog'
              'user_change_notification_regs'
              'user_clu_columns'
              'user_cluster_hash_expressions'
              'user_clusters'
              'user_col_comments'
              'user_col_privs'
              'user_col_privs_made'
              'user_col_privs_recd'
              'user_coll_types'
              'user_cons_columns'
              'user_cons_obj_columns'
              'user_constraints'
              'user_datapump_jobs'
              'user_db_links'
              'user_dependencies'
              'user_dim_attributes'
              'user_dim_child_of'
              'user_dim_hierarchies'
              'user_dim_join_key'
              'user_dim_level_key'
              'user_dim_levels'
              'user_dimensions'
              'user_encrypted_columns'
              'user_epg_dad_authorization'
              'user_errors'
              'user_evaluation_context_tables'
              'user_evaluation_context_vars'
              'user_evaluation_contexts'
              'user_expfil_aset_functions'
              'user_expfil_attribute_sets'
              'user_expfil_attributes'
              'user_expfil_def_index_params'
              'user_expfil_expression_sets'
              'user_expfil_exprset_stats'
              'user_expfil_index_params'
              'user_expfil_indexes'
              'user_expfil_predtab_attributes'
              'user_expfil_privileges'
              'user_extents'
              'user_external_locations'
              'user_external_tables'
              'user_file_group_export_info'
              'user_file_group_files'
              'user_file_group_tables'
              'user_file_group_tablespaces'
              'user_file_group_versions'
              'user_file_groups'
              'user_free_space'
              'user_geometry_columns'
              'user_histograms'
              'user_ind_columns'
              'user_ind_expressions'
              'user_ind_partitions'
              'user_ind_statistics'
              'user_ind_subpartitions'
              'user_indexes'
              'user_indextype_arraytypes'
              'user_indextype_comments'
              'user_indextype_operators'
              'user_indextypes'
              'user_internal_triggers'
              'user_java_arguments'
              'user_java_classes'
              'user_java_derivations'
              'user_java_fields'
              'user_java_implements'
              'user_java_inners'
              'user_java_layouts'
              'user_java_methods'
              'user_java_ncomps'
              'user_java_policy'
              'user_java_resolvers'
              'user_java_throws'
              'user_jobs'
              'user_join_ind_columns'
              'user_libraries'
              'user_lob_partitions'
              'user_lob_subpartitions'
              'user_lob_templates'
              'user_lobs'
              'user_log_group_columns'
              'user_log_groups'
              'user_method_params'
              'user_method_results'
              'user_mp_graph_workspaces'
              'user_mp_parent_workspaces'
              'user_mview_aggregates'
              'user_mview_analysis'
              'user_mview_comments'
              'user_mview_detail_relations'
              'user_mview_joins'
              'user_mview_keys'
              'user_mview_logs'
              'user_mview_refresh_times'
              'user_mviews'
              'user_nested_table_cols'
              'user_nested_tables'
              'user_obj_audit_opts'
              'user_obj_colattrs'
              'user_object_size'
              'user_object_tables'
              'user_objects'
              'user_opancillary'
              'user_oparguments'
              'user_opbindings'
              'user_operator_comments'
              'user_operators'
              'user_outline_hints'
              'user_outlines'
              'user_part_col_statistics'
              'user_part_histograms'
              'user_part_indexes'
              'user_part_key_columns'
              'user_part_lobs'
              'user_part_tables'
              'user_partial_drop_tabs'
              'user_password_limits'
              'user_pending_conv_tables'
              'user_plsql_object_settings'
              'user_policies'
              'user_policy_contexts'
              'user_policy_groups'
              'user_procedures'
              'user_proxies'
              'user_published_columns'
              'user_queue_publishers'
              'user_queue_schedules'
              'user_queue_subscribers'
              'user_queue_tables'
              'user_queues'
              'user_recyclebin'
              'user_refresh'
              'user_refresh_children'
              'user_refs'
              'user_registered_mviews'
              'user_registered_snapshots'
              'user_registry'
              'user_repaudit_attribute'
              'user_repaudit_column'
              'user_repcat'
              'user_repcat_refresh_templates'
              'user_repcat_template_objects'
              'user_repcat_template_parms'
              'user_repcat_template_sites'
              'user_repcat_user_authorization'
              'user_repcat_user_parm_values'
              'user_repcatlog'
              'user_repcolumn'
              'user_repcolumn_group'
              'user_repconflict'
              'user_repddl'
              'user_repflavor_columns'
              'user_repflavor_objects'
              'user_repflavors'
              'user_repgenerated'
              'user_repgenobjects'
              'user_repgroup'
              'user_repgroup_privileges'
              'user_repgrouped_column'
              'user_repkey_columns'
              'user_repobject'
              'user_repparameter_column'
              'user_reppriority'
              'user_reppriority_group'
              'user_repprop'
              'user_represol_stats_control'
              'user_represolution'
              'user_represolution_method'
              'user_represolution_statistics'
              'user_repschema'
              'user_repsites'
              'user_resource_limits'
              'user_resumable'
              'user_rewrite_equivalences'
              'user_rlm4j_event_structs'
              'user_rlm4j_rule_classes'
              'user_rlmgr_comprcls_properties'
              'user_rlmgr_event_structs'
              'user_rlmgr_privileges'
              'user_rlmgr_rule_class_status'
              'user_rlmgr_rule_classes'
              'user_role_privs'
              'user_rsrc_consumer_group_privs'
              'user_rsrc_manager_system_privs'
              'user_rule_set_rules'
              'user_rule_sets'
              'user_rules'
              'user_rulesets'
              'user_scheduler_chain_rules'
              'user_scheduler_chain_steps'
              'user_scheduler_chains'
              'user_scheduler_job_args'
              'user_scheduler_job_log'
              'user_scheduler_job_run_details'
              'user_scheduler_jobs'
              'user_scheduler_program_args'
              'user_scheduler_programs'
              'user_scheduler_running_chains'
              'user_scheduler_running_jobs'
              'user_scheduler_schedules'
              'user_sdo_geom_metadata'
              'user_sdo_geor_sysdata'
              'user_sdo_index_info'
              'user_sdo_index_metadata'
              'user_sdo_lrs_metadata'
              'user_sdo_maps'
              'user_sdo_network_constraints'
              'user_sdo_network_metadata'
              'user_sdo_network_user_data'
              'user_sdo_styles'
              'user_sdo_themes'
              'user_sdo_topo_info'
              'user_sdo_topo_metadata'
              'user_sec_relevant_cols'
              'user_secondary_objects'
              'user_segments'
              'user_sequences'
              'user_snapshot_logs'
              'user_snapshot_refresh_times'
              'user_snapshots'
              'user_source'
              'user_source_tables'
              'user_sqlj_type_attrs'
              'user_sqlj_type_methods'
              'user_sqlj_types'
              'user_sqlset'
              'user_sqlset_binds'
              'user_sqlset_definitions'
              'user_sqlset_plans'
              'user_sqlset_references'
              'user_sqlset_statements'
              'user_sqltune_binds'
              'user_sqltune_plans'
              'user_sqltune_rationale_plan'
              'user_sqltune_statistics'
              'user_stored_settings'
              'user_subpart_col_statistics'
              'user_subpart_histograms'
              'user_subpart_key_columns'
              'user_subpartition_templates'
              'user_subscribed_columns'
              'user_subscribed_tables'
              'user_subscriptions'
              'user_summaries'
              'user_summary_aggregates'
              'user_summary_detail_tables'
              'user_summary_joins'
              'user_summary_keys'
              'user_synonyms'
              'user_sys_privs'
              'user_tab_col_statistics'
              'user_tab_cols'
              'user_tab_columns'
              'user_tab_comments'
              'user_tab_histograms'
              'user_tab_modifications'
              'user_tab_partitions'
              'user_tab_privs'
              'user_tab_privs_made'
              'user_tab_privs_recd'
              'user_tab_statistics'
              'user_tab_stats_history'
              'user_tab_subpartitions'
              'user_tables'
              'user_tablespaces'
              'user_transformations'
              'user_trigger_cols'
              'user_triggers'
              'user_ts_quotas'
              'user_tune_mview'
              'user_type_attrs'
              'user_type_methods'
              'user_type_versions'
              'user_types'
              'user_unused_col_tabs'
              'user_updatable_columns'
              'user_users'
              'user_ustats'
              'user_varrays'
              'user_views'
              'user_warning_settings'
              'user_wm_cons_columns'
              'user_wm_constraints'
              'user_wm_ind_columns'
              'user_wm_ind_expressions'
              'user_wm_locked_tables'
              'user_wm_modified_tables'
              'user_wm_privs'
              'user_wm_ric_info'
              'user_wm_tab_triggers'
              'user_wm_versioned_tables'
              'user_wm_vt_errors'
              'user_workspace_privs'
              'user_workspace_savepoints'
              'user_workspaces'
              'user_xml_column_names'
              'user_xml_indexes'
              'user_xml_partitioned_table_ok'
              'user_xml_schemas'
              'user_xml_tab_cols'
              'user_xml_tables'
              'user_xml_view_cols'
              'user_xml_views'
              'utl_all_ind_comps'
              'utl_coll'
              'utl_compress'
              'utl_encode'
              'utl_file'
              'utl_gdk'
              'utl_http'
              'utl_i18n'
              'utl_inaddr'
              'utl_lms'
              'utl_match'
              'utl_nla'
              'utl_nla_array_dbl'
              'utl_nla_array_flt'
              'utl_nla_array_int'
              'utl_raw'
              'utl_ref'
              'utl_smtp'
              'utl_tcp'
              'utl_url'
              'v$_lock'
              'v$access'
              'v$active_instances'
              'v$active_services'
              'v$active_sess_pool_mth'
              'v$active_session_history'
              'v$advisor_progress'
              'v$alert_types'
              'v$aq'
              'v$aq1'
              'v$archive'
              'v$archive_dest'
              'v$archive_dest_status'
              'v$archive_gap'
              'v$archive_processes'
              'v$archived_log'
              'v$asm_alias'
              'v$asm_client'
              'v$asm_disk'
              'v$asm_disk_stat'
              'v$asm_diskgroup'
              'v$asm_diskgroup_stat'
              'v$asm_file'
              'v$asm_operation'
              'v$asm_template'
              'v$aw_aggregate_op'
              'v$aw_allocate_op'
              'v$aw_calc'
              'v$aw_longops'
              'v$aw_olap'
              'v$aw_session_info'
              'v$backup'
              'v$backup_archivelog_details'
              'v$backup_archivelog_summary'
              'v$backup_async_io'
              'v$backup_controlfile_details'
              'v$backup_controlfile_summary'
              'v$backup_copy_details'
              'v$backup_copy_summary'
              'v$backup_corruption'
              'v$backup_datafile'
              'v$backup_datafile_details'
              'v$backup_datafile_summary'
              'v$backup_device'
              'v$backup_files'
              'v$backup_piece'
              'v$backup_piece_details'
              'v$backup_redolog'
              'v$backup_set'
              'v$backup_set_details'
              'v$backup_set_summary'
              'v$backup_spfile'
              'v$backup_spfile_details'
              'v$backup_spfile_summary'
              'v$backup_sync_io'
              'v$bgprocess'
              'v$bh'
              'v$block_change_tracking'
              'v$blocking_quiesce'
              'v$bsp'
              'v$buffer_pool'
              'v$buffer_pool_statistics'
              'v$buffered_publishers'
              'v$buffered_queues'
              'v$buffered_subscribers'
              'v$circuit'
              'v$class_cache_transfer'
              'v$class_ping'
              'v$client_stats'
              'v$cluster_interconnects'
              'v$configured_interconnects'
              'v$context'
              'v$controlfile'
              'v$controlfile_record_section'
              'v$copy_corruption'
              'v$cr_block_server'
              'v$current_block_server'
              'v$database'
              'v$database_block_corruption'
              'v$database_incarnation'
              'v$datafile'
              'v$datafile_copy'
              'v$datafile_header'
              'v$dataguard_config'
              'v$dataguard_stats'
              'v$dataguard_status'
              'v$datapump_job'
              'v$datapump_session'
              'v$db_cache_advice'
              'v$db_object_cache'
              'v$db_pipes'
              'v$db_transportable_platform'
              'v$dbfile'
              'v$dblink'
              'v$deleted_object'
              'v$dispatcher'
              'v$dispatcher_config'
              'v$dispatcher_rate'
              'v$dlm_all_locks'
              'v$dlm_convert_local'
              'v$dlm_convert_remote'
              'v$dlm_latch'
              'v$dlm_locks'
              'v$dlm_misc'
              'v$dlm_ress'
              'v$dlm_traffic_controller'
              'v$enabledprivs'
              'v$enqueue_lock'
              'v$enqueue_stat'
              'v$enqueue_statistics'
              'v$event_histogram'
              'v$event_name'
              'v$eventmetric'
              'v$execution'
              'v$fast_start_servers'
              'v$fast_start_transactions'
              'v$file_cache_transfer'
              'v$file_histogram'
              'v$file_ping'
              'v$filemetric'
              'v$filemetric_history'
              'v$filespace_usage'
              'v$filestat'
              'v$fixed_table'
              'v$fixed_view_definition'
              'v$flash_recovery_area_usage'
              'v$flashback_database_log'
              'v$flashback_database_logfile'
              'v$flashback_database_stat'
              'v$gc_element'
              'v$gc_elements_with_collisions'
              'v$gcshvmaster_info'
              'v$gcspfmaster_info'
              'v$ges_blocking_enqueue'
              'v$ges_enqueue'
              'v$global_blocked_locks'
              'v$global_transaction'
              'v$globalcontext'
              'v$hs_agent'
              'v$hs_parameter'
              'v$hs_session'
              'v$hvmaster_info'
              'v$indexed_fixed_column'
              'v$instance'
              'v$instance_cache_transfer'
              'v$instance_log_group'
              'v$instance_recovery'
              'v$java_library_cache_memory'
              'v$java_pool_advice'
              'v$javapool'
              'v$latch'
              'v$latch_children'
              'v$latch_misses'
              'v$latch_parent'
              'v$latchholder'
              'v$latchname'
              'v$library_cache_memory'
              'v$librarycache'
              'v$license'
              'v$loadistat'
              'v$loadpstat'
              'v$lock'
              'v$lock_activity'
              'v$lock_element'
              'v$lock_type'
              'v$locked_object'
              'v$locks_with_collisions'
              'v$log'
              'v$log_history'
              'v$logfile'
              'v$loghist'
              'v$logmnr_callback'
              'v$logmnr_contents'
              'v$logmnr_dictionary'
              'v$logmnr_dictionary_load'
              'v$logmnr_latch'
              'v$logmnr_logfile'
              'v$logmnr_logs'
              'v$logmnr_parameters'
              'v$logmnr_process'
              'v$logmnr_region'
              'v$logmnr_session'
              'v$logmnr_stats'
              'v$logmnr_transaction'
              'v$logstdby'
              'v$logstdby_process'
              'v$logstdby_progress'
              'v$logstdby_state'
              'v$logstdby_stats'
              'v$logstdby_transaction'
              'v$managed_standby'
              'v$map_comp_list'
              'v$map_element'
              'v$map_ext_element'
              'v$map_file'
              'v$map_file_extent'
              'v$map_file_io_stack'
              'v$map_library'
              'v$map_subelement'
              'v$max_active_sess_target_mth'
              'v$metric'
              'v$metric_history'
              'v$metricgroup'
              'v$metricname'
              'v$mttr_target_advice'
              'v$mutex_sleep'
              'v$mutex_sleep_history'
              'v$mvrefresh'
              'v$mystat'
              'v$nls_parameters'
              'v$nls_valid_values'
              'v$object_dependency'
              'v$object_usage'
              'v$obsolete_parameter'
              'v$offline_range'
              'v$open_cursor'
              'v$option'
              'v$osstat'
              'v$parallel_degree_limit_mth'
              'v$parameter'
              'v$parameter_valid_values'
              'v$parameter2'
              'v$pga_target_advice'
              'v$pga_target_advice_histogram'
              'v$pgastat'
              'v$pq_sesstat'
              'v$pq_slave'
              'v$pq_sysstat'
              'v$pq_tqstat'
              'v$process'
              'v$process_memory'
              'v$process_memory_detail'
              'v$process_memory_detail_prog'
              'v$propagation_receiver'
              'v$propagation_sender'
              'v$proxy_archivedlog'
              'v$proxy_archivelog_details'
              'v$proxy_archivelog_summary'
              'v$proxy_copy_details'
              'v$proxy_copy_summary'
              'v$proxy_datafile'
              'v$pwfile_users'
              'v$px_buffer_advice'
              'v$px_process'
              'v$px_process_sysstat'
              'v$px_session'
              'v$px_sesstat'
              'v$queue'
              'v$queueing_mth'
              'v$recover_file'
              'v$recovery_file_dest'
              'v$recovery_file_status'
              'v$recovery_log'
              'v$recovery_progress'
              'v$recovery_status'
              'v$replprop'
              'v$replqueue'
              'v$reqdist'
              'v$reserved_words'
              'v$resource'
              'v$resource_limit'
              'v$restore_point'
              'v$resumable'
              'v$rfs_thread'
              'v$rman_backup_job_details'
              'v$rman_backup_subjob_details'
              'v$rman_backup_type'
              'v$rman_configuration'
              'v$rman_output'
              'v$rman_status'
              'v$rollname'
              'v$rollstat'
              'v$rowcache'
              'v$rowcache_parent'
              'v$rowcache_subordinate'
              'v$rsrc_cons_group_history'
              'v$rsrc_consumer_group'
              'v$rsrc_consumer_group_cpu_mth'
              'v$rsrc_plan'
              'v$rsrc_plan_cpu_mth'
              'v$rsrc_plan_history'
              'v$rsrc_session_info'
              'v$rule'
              'v$rule_set'
              'v$rule_set_aggregate_stats'
              'v$scheduler_running_jobs'
              'v$segment_statistics'
              'v$segstat'
              'v$segstat_name'
              'v$serv_mod_act_stats'
              'v$service_event'
              'v$service_stats'
              'v$service_wait_class'
              'v$servicemetric'
              'v$servicemetric_history'
              'v$services'
              'v$ses_optimizer_env'
              'v$sess_io'
              'v$sess_time_model'
              'v$session'
              'v$session_connect_info'
              'v$session_cursor_cache'
              'v$session_event'
              'v$session_longops'
              'v$session_object_cache'
              'v$session_wait'
              'v$session_wait_class'
              'v$session_wait_history'
              'v$sessmetric'
              'v$sesstat'
              'v$sga'
              'v$sga_current_resize_ops'
              'v$sga_dynamic_components'
              'v$sga_dynamic_free_memory'
              'v$sga_resize_ops'
              'v$sga_target_advice'
              'v$sgainfo'
              'v$sgastat'
              'v$shared_pool_advice'
              'v$shared_pool_reserved'
              'v$shared_server'
              'v$shared_server_monitor'
              'v$sort_segment'
              'v$sort_usage'
              'v$spparameter'
              'v$sql'
              'v$sql_bind_capture'
              'v$sql_bind_data'
              'v$sql_bind_metadata'
              'v$sql_cursor'
              'v$sql_join_filter'
              'v$sql_optimizer_env'
              'v$sql_plan'
              'v$sql_plan_statistics'
              'v$sql_plan_statistics_all'
              'v$sql_redirection'
              'v$sql_shared_cursor'
              'v$sql_shared_memory'
              'v$sql_workarea'
              'v$sql_workarea_active'
              'v$sql_workarea_histogram'
              'v$sqlarea'
              'v$sqlarea_plan_hash'
              'v$sqlstats'
              'v$sqltext'
              'v$sqltext_with_newlines'
              'v$standby_apply_snapshot'
              'v$standby_log'
              'v$statistics_level'
              'v$statname'
              'v$streams_apply_coordinator'
              'v$streams_apply_reader'
              'v$streams_apply_server'
              'v$streams_capture'
              'v$streams_pool_advice'
              'v$streams_transaction'
              'v$subcache'
              'v$sys_optimizer_env'
              'v$sys_time_model'
              'v$sysaux_occupants'
              'v$sysmetric'
              'v$sysmetric_history'
              'v$sysmetric_summary'
              'v$sysstat'
              'v$system_cursor_cache'
              'v$system_event'
              'v$system_parameter'
              'v$system_parameter2'
              'v$system_wait_class'
              'v$tablespace'
              'v$temp_cache_transfer'
              'v$temp_extent_map'
              'v$temp_extent_pool'
              'v$temp_histogram'
              'v$temp_ping'
              'v$temp_space_header'
              'v$tempfile'
              'v$temporary_lobs'
              'v$tempseg_usage'
              'v$tempstat'
              'v$thread'
              'v$threshold_types'
              'v$timer'
              'v$timezone_file'
              'v$timezone_names'
              'v$transaction'
              'v$transaction_enqueue'
              'v$transportable_platform'
              'v$tsm_sessions'
              'v$type_size'
              'v$undostat'
              'v$unusable_backupfile_details'
              'v$version'
              'v$vpd_policy'
              'v$waitclassmetric'
              'v$waitclassmetric_history'
              'v$waitstat'
              'v$wallet'
              'v$xml_audit_trail'
              'v_olapi_iface_object_history'
              'v_olapi_iface_op_history'
              'v_olapi_memory_op_history'
              'v_olapi_session_history'
              'verlag'
              'verlag_seq'
              'vorschlagsliste'
              'vorschlagsliste_seq'
              'within'
              'wm$all_nextver_view'
              'wm$all_version_hview_wdepth'
              'wm$base_hierarchy_view'
              'wm$base_nextver_view'
              'wm$base_version_view'
              'wm$conf_base_hierarchy_view'
              'wm$conf_base_nextver_view'
              'wm$conf1_hierarchy_view'
              'wm$conf1_nextver_view'
              'wm$conf2_hierarchy_view'
              'wm$conf2_nextver_view'
              'wm$curconflict_hierarchy_view'
              'wm$curconflict_nextvers_view'
              'wm$curconflict_parvers_view'
              'wm$current_child_nextvers_view'
              'wm$current_child_versions_view'
              'wm$current_cons_nextvers_view'
              'wm$current_cons_versions_view'
              'wm$current_hierarchy_view'
              'wm$current_nextvers_view'
              'wm$current_parvers_view'
              'wm$current_savepoints_view'
              'wm$current_ver_view'
              'wm$current_workspace_view'
              'wm$diff1_hierarchy_view'
              'wm$diff1_nextver_view'
              'wm$diff2_hierarchy_view'
              'wm$diff2_nextver_view'
              'wm$mw_nextvers_view'
              'wm$mw_versions_view'
              'wm$mw_versions_view_9i'
              'wm$parconflict_hierarchy_view'
              'wm$parconflict_nextvers_view'
              'wm$parconflict_parvers_view'
              'wm$parent_hierarchy_view'
              'wm$parent_workspace_view'
              'wm$parvers_view'
              'wm$table_nextvers_view'
              'wm$table_parvers_view'
              'wm$table_versions_in_live_view'
              'wm$table_ws_parvers_view'
              'wm$ver_bef_inst_nextvers_view'
              'wm$ver_bef_inst_parvers_view'
              'wm$versions_in_live_view'
              'wm_compress_batch_sizes'
              'wm_compressible_tables'
              'wm_concat'
              'wm_contains'
              'wm_equals'
              'wm_events_info'
              'wm_greaterthan'
              'wm_installation'
              'wm_intersection'
              'wm_ldiff'
              'wm_lessthan'
              'wm_meets'
              'wm_overlaps'
              'wm_period'
              'wm_rdiff'
              'wm_replication_info'
              'wmsys'
              'wpg_docload'
              'x'
              'xdb'
              'xdb$string_list_t'
              'xdb_configuration'
              'xdb_dom_helper'
              'xdb_namespaces'
              'xdb_pvtrig_pkg'
              'xdb_rvtrig_pkg'
              'xdb_tools'
              'xdb_utilities'
              'xdburitype'
              'xmlagg'
              'xmldom'
              'xmlformat'
              'xmlparser'
              'xmlroot'
              'xmlsequence'
              'xmlsequencetype'
              'xmltype'
              'xqsequence'
              'xslprocessor'
              'y')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'declare start'
        ConditionList = <
          item
            TagList.Strings = (
              'declare')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'declare end'
        HighlightPos = cpAny
        DrawStaple = True
      end
      item
        DisplayName = 'declare end'
        BlockName = 'declare start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            IgnoreCase = True
          end>
        BlockEnd = 'declare start'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'DDL start'
        BlockName = 'DDL start'
        StrictParent = True
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'OR'
              'PACKAGE')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'ALTER'
              'CREATE'
              'DROP'
              'REMAME'
              'TRUNCATE')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'DDL end'
        NameFmt = '%s0 %s-1 %s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 6
      end
      item
        DisplayName = 'DDL end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        BlockEnd = 'DDL start'
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* This calculates a nextdate for a defined interval.'
      
        '   The function works similar to the functionality in DBMS_JOB *' +
        '/'
      'FUNCTION calc_next_date (i_interval IN VARCHAR2,'
      
        '                         i_default  IN DATE DEFAULT SYSDATE) RET' +
        'URN DATE IS'
      '  v_date DATE;'
      '  v_statement VARCHAR2(5000);'
      'BEGIN'
      '  IF i_interval IS NULL THEN'
      
        '    RETURN (i_default);-- if no interval defined return the defa' +
        'ult value'
      '  ELSE'
      '    v_statement := '#39'SELECT '#39'||i_interval||'#39' FROM DUAL'#39';'
      '    execute immediate v_statement into v_date;'
      '    RETURN (v_date);'
      '  END IF;'
      'EXCEPTION'
      
        '  WHEN OTHERS THEN  -- if any error occurs, return the default v' +
        'alue'
      '    RETURN (i_default);'
      'END calc_next_date;')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const')
    Gramma.Gramma = 
      'Complex_name =  <Identifier> | Complex_name "." <Identifier>;'#13#10#13 +
      #10'Package_declaration = '#39'package'#39' ('#39'body'#39')? Complex_name ('#39'is'#39' | ' +
      #39'as'#39');'#13#10
    MarkedBlockStyle = 'Marked block'
    CurrentLineStyle = 'Current Line'
    DefaultStyleName = 'Default'
    Extentions = 'sql pck'
    LexerName = 'PL/SQL'
    FullRefreshSize = 5000
    LineComment = '--'
    Left = 144
    Top = 184
  end
  object SyntAnalyzer4: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Table'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Alias'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Operators'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tree (Bold)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tree (Section)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tree (item)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 2'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'create'
              'delete'
              'from'
              'group'
              'having'
              'insert'
              'order'
              'select'
              'union'
              'update'
              'where')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 10
      end
      item
        DisplayName = 'Operations'
        StyleName = 'Operators'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'all'
              'and'
              'any'
              'as'
              'avg'
              'between'
              'by'
              'count'
              'distinct'
              'exists'
              'grant'
              'in'
              'index'
              'inner'
              'is'
              'join'
              'left'
              'like'
              'max'
              'min'
              'not'
              'null'
              'on'
              'option'
              'or'
              'outer'
              'some'
              'table'
              'view')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Functions'
        StyleName = 'Function'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'CONCAT'
              'DATE_FORMAT'
              'TIMEDIFF')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Table or Alias'
        StyleName = 'Table'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Table'
        StyleName = 'Table'
        BlockName = 'From'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 1032
          end>
        HighlightPos = cpAny
        TokenType = 7
      end
      item
        DisplayName = 'Section End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Alias'
        StyleName = 'Alias'
        BlockName = 'From'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 128
          end>
        HighlightPos = cpAny
        TokenType = 8
      end
      item
        DisplayName = 'Alias to tree'
        BlockName = 'From'
        StrictParent = True
        ConditionList = <
          item
            TokenTypes = 256
          end>
        BlockOffset = 1
        NotCollapsed = True
        NameFmt = '%s0 = %s1'
        GroupFmt = 'Aliases'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemStyle = 'Tree (item)'
        TreeGroupStyle = 'Tree (Bold)'
      end
      item
        DisplayName = 'Table to Tree'
        ConditionList = <
          item
            TokenTypes = 128
          end>
        NotCollapsed = True
        GroupFmt = 'Used Tables'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemStyle = 'Tree (item)'
        TreeGroupStyle = 'Tree (Bold)'
      end
      item
        DisplayName = 'Statement start'
        ConditionList = <
          item
            TagList.Strings = (
              'delete'
              'insert'
              'select'
              'update')
            TokenTypes = 1024
            IgnoreCase = True
          end>
        EndOfTextClose = True
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        SelfClose = True
        TreeItemStyle = 'Tree (Bold)'
      end
      item
        DisplayName = 'Select'
        ConditionList = <
          item
            TagList.Strings = (
              'select')
            TokenTypes = 1024
            IgnoreCase = True
          end>
        BlockEnd = 'Section End'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'From'
        ConditionList = <
          item
            TagList.Strings = (
              'from')
            TokenTypes = 1024
            IgnoreCase = True
          end>
        BlockEnd = 'Section End'
        EndOfTextClose = True
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        TreeItemStyle = 'Tree (Section)'
      end
      item
        DisplayName = 'Where'
        ConditionList = <
          item
            TagList.Strings = (
              'where')
            TokenTypes = 1024
            IgnoreCase = True
          end>
        BlockEnd = 'Section End'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        TreeItemStyle = 'Tree (Section)'
      end
      item
        DisplayName = 'Group'
        ConditionList = <
          item
            TagList.Strings = (
              'group')
            TokenTypes = 1024
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        TreeItemStyle = 'Tree (Section)'
      end
      item
        DisplayName = 'Order'
        ConditionList = <
          item
            TagList.Strings = (
              'order')
            TokenTypes = 1024
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        TreeItemStyle = 'Tree (Section)'
      end
      item
        DisplayName = 'Having'
        ConditionList = <
          item
            TagList.Strings = (
              'having')
            TokenTypes = 1024
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        TreeItemStyle = 'Tree (Section)'
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/*Syntax highlighting*/'
      
        'SELECT c.session , c.username ,TIMEDIFF(max(c.datetime) , min(c.' +
        'datetime))'
      
        'FROM  livehelp_domain_user a , livehelp_users b, livehelp_messag' +
        'es c'
      'WHERE a.id_domain = 29 AND'
      '      a.id_user = b.id AND'
      '      CONCAT( b.firstname, '#39' '#39',b.lastname)   = c.username AND'
      '      DATE_FORMAT(c.datetime,'#39'%m/%d/%Y'#39') ='#39'09/21/2006'#39
      'GROUP BY c.session'
      'ORDER BY c.session,c.username'
      '')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Table name'
      'Alias'
      'Function'
      'Main KeyWords')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'sql'
    LexerName = 'SQL'
  end
  object SyntAnalyzer5: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Blob Data'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\{.*?(\}|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Blob data'
        StyleName = 'Blob Data'
        BlockName = 'Blob begin'
        Expression = '[^\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\$[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-\{\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '\#(\d+|\$[\da-f]+)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'end'
              'inherited'
              'inline'
              'item'
              'object')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              'inherited'
              'item'
              'object')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        NameFmt = '%s0 %s-1%s-2 %s-3'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1%s-2 %s-3'
      end
      item
        DisplayName = 'Collection begin'
        ConditionList = <
          item
            TagList.Strings = (
              '<')
            TokenTypes = 8
          end>
        BlockOffset = 2
        BlockEnd = 'Collection end'
        NameFmt = '%s2 (collection)'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '< %s2 >'
      end
      item
        DisplayName = 'Collection end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '>')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'List begin'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockOffset = 4
        BlockEnd = 'List end'
        NameFmt = '%s2 (list)'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '( %s2 )'
      end
      item
        DisplayName = 'List end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Blob begin'
        StyleName = 'Blob Data'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'Blob end'
        HighlightPos = cpAny
        DrawStaple = True
      end
      item
        DisplayName = 'Blob end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '{ Delphi/C++ Builder Form Definitions }'
      'object TestForm: TTestForm'
      '  Left = 273'
      '  Top = 103'
      '  Caption = '#39'SynEdit sample source'#39
      'end')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'dfm lxl lcf'
    LexerName = 'Delphi resources'
  end
  object SyntAnalyzer7: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Section'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15658734
      end
      item
        DisplayName = 'Parameter'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Value'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Number'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^;.*$'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Section'
        StyleName = 'Section'
        TokenType = 8
        Expression = '(?s)\[.*?\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Parameter'
        StyleName = 'Parameter'
        TokenType = 2
        Expression = '^[^=\n\r]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Equal sign'
        TokenType = 3
        Expression = '='
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '[\d]+\.?[\d]+e[\+\-]?[\d]+|[\d]+\.[\d]+$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '[\d]+$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Value'
        StyleName = 'Value'
        TokenType = 4
        Expression = '.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Section begin'
        ConditionList = <
          item
            TokenTypes = 256
          end>
        EndOfTextClose = True
        HighlightPos = cpAny
        CollapseFmt = '%s0'
        SelfClose = True
        TreeItemStyle = 'Section'
      end
      item
        DisplayName = 'Item begin'
        ConditionList = <
          item
            TokenTypes = 112
          end
          item
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s0 = %s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemStyle = 'Value'
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Parameter'
      'Symbol'
      'Value'
      'Integer const'
      'Float const'
      'Hex const'
      'Section')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'ini dsk dti dof inf lng srv'
    LexerName = 'Ini files'
  end
  object SyntAnalyzer8: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Level'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Title'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Reference'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Help file'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic, fsUnderline]
      end
      item
        DisplayName = 'Help directory'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlight
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
        BgColor = clScrollBar
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^[:;].*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Level'
        StyleName = 'Level'
        TokenType = 5
        Expression = '^\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Reference'
        StyleName = 'Reference'
        TokenType = 2
        Expression = '=[^@\n]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Help file'
        StyleName = 'Help file'
        TokenType = 6
        Expression = '@.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Help directory'
        StyleName = 'Help directory'
        TokenType = 3
        Expression = '[^=]*?$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Title'
        StyleName = 'Title'
        TokenType = 4
        Expression = '[^=]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 8
          end>
        BlockOffset = 2
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TokenTypes = 8
          end>
        BlockOffset = 1
        BlockEnd = 'end'
        EndOfTextClose = True
        RefToCondEnd = True
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Reference'
      'Help directory'
      'Title'
      'Level'
      'Help file')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'cnt'
    LexerName = 'Help contents'
  end
  object SyntAnal7: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <>
    BlockRules = <>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'Style sheet'
        AlwaysEnabled = True
        StartExpression = '(?si)<style[^>]*> '#13#10
        EndExpression = '</style>'#13#10
        SyntAnalyzer = SyntAnalyzer10
      end
      item
        DisplayName = 'VB script'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*vbscript[^>]*>\s*(<!--)?'#13#10
        EndExpression = '(?i)(-->)?\s*</script>'#13#10
        SyntAnalyzer = SyntAnalyzer3
      end
      item
        DisplayName = 'Java script'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*javascript[^>]*>\s*(<!--)?'#13#10
        EndExpression = '(?i)(//)?(-->)?\s*</script>'#13#10
        SyntAnalyzer = SyntAnal6
      end
      item
        DisplayName = 'ASP'
        AlwaysEnabled = True
        StartExpression = '<%'#13#10'#(?i)<%@[^>]*?vbscript[^>]*>'#13#10'#\s*<%'#13#10
        EndExpression = '%>'#13#10
        SyntAnalyzer = SyntAnalyzer3
      end
      item
        DisplayName = 'PHP'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*php[^>]*>\s*(<!--)?'#13#10
        EndExpression = '(?i)(-->)?\s*</script>'#13#10
        SyntAnalyzer = SyntAnal16
      end
      item
        DisplayName = 'PHP 2'
        AlwaysEnabled = True
        StartExpression = '(?i)<\?(php)?'#13#10
        EndExpression = '\?>'#13#10
        SyntAnalyzer = SyntAnal16
      end
      item
        DisplayName = 'HTML'
        SyntAnalyzer = SyntAnalyzer9
        FromTextBegin = True
        ToTextEnd = True
      end>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'htm html'
    LexerName = 'HTML with scripts'
  end
  object SyntAnalyzer9: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Text'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clInfoBk
        MultiLineBorder = True
      end
      item
        DisplayName = 'Tag bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tag param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tag properties'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Unknown tag content'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
      end
      item
        DisplayName = 'Tag Key'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Bound'
        Enabled = False
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
        MultiLineBorder = True
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (attribute)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 14155775
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (tag)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?ms)<!--.*?(-->|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment end'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '# for use in <SCRIPT>'#13#10'-->'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '<'
        StyleName = 'Tag bound'
        TokenType = 10
        Expression = '<[/!\-]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '>'
        StyleName = 'Tag bound'
        TokenType = 11
        Expression = '>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 7
        Expression = '\#[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag param'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        TokenType = 4
        Expression = '(?s)".*?("|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag ident'
        BlockName = 'Tag begin'
        TokenType = 2
        Expression = '[^\s=>]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '='
        StyleName = 'Tag bound'
        BlockName = 'Tag begin'
        TokenType = 3
        Expression = '='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Unknow tag content'
        StyleName = 'Unknown tag content'
        BlockName = 'Tag begin'
        Expression = '[^>]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '&...'
        StyleName = 'Tag Key'
        TokenType = 9
        Expression = '&\w+;'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text'
        StyleName = 'Text'
        TokenType = 9
        Expression = '[^<&]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Tag keys'
        StyleName = 'Tag Key'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '<'
              '</')
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag property'
        StyleName = 'Tag properties'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag property value'
        StyleName = 'Tag param'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Simple tag block'
        ConditionList = <
          item
            TagList.Strings = (
              'br'
              'hr'
              'image'
              'img'
              'link')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 1024
          end>
        BlockEnd = 'Simple tag block end'
        HighlightPos = cpAny
        TreeItemStyle = 'Tree item (tag)'
      end
      item
        DisplayName = 'Simple tag block end'
        BlockName = 'Simple tag block'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag block begin'
        ConditionList = <
          item
            TagList.Strings = (
              'br'
              'hr'
              'image'
              'img'
              'link')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<'
              '<!')
            TokenTypes = 1024
          end>
        BlockOffset = 1
        BlockEnd = 'Tag block end'
        HighlightPos = cpAny
        CollapseFmt = '< %s0 >'
        TreeItemStyle = 'Tree item (tag)'
      end
      item
        DisplayName = 'Tag block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '</')
            TokenTypes = 1024
          end>
        BlockOffset = -1
        SameIdent = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Comment begin'
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '<!--  ...  -->'
      end
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag attribute'
        BlockName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s0 %s-1 %s-2'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemStyle = 'Tree item (attribute)'
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Text'
      'Open Tag'
      'Close Tag')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'htm html'
    LexerName = 'HTML documents'
    Internal = True
  end
  object SyntAnal40: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Text'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clInfoBk
        MultiLineBorder = True
      end
      item
        DisplayName = 'Tag bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tag param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tag properties'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Unknown tag content'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
      end
      item
        DisplayName = 'Tag Key'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Bound'
        Enabled = False
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
        MultiLineBorder = True
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (attribute)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 14155775
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (tag)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'CF keys'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'CFQuery in tree'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Times New Roman'
        Font.Style = [fsBold, fsUnderline]
        BgColor = clYellow
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'CF ident'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'CF Symbol'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'CF string'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftColor
      end
      item
        DisplayName = 'Query reserved'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Query param,output'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = cl3DDkShadow
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsUnderline]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?ms)<!--.*?(-->|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment end'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '# for use in <SCRIPT>'#13#10'-->'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Query Symbol'
        StyleName = 'CF Symbol'
        BlockName = 'CF query open'
        TokenType = 13
        Expression = '[/,\.;:\(\)=\+\-\*\#]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Query Symbol <>'
        StyleName = 'CF Symbol'
        TokenType = 13
        Expression = '<\x20 | \x20>'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '<'
        StyleName = 'Tag bound'
        TokenType = 10
        Expression = '<[/!\-]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '>'
        StyleName = 'Tag bound'
        TokenType = 11
        Expression = '>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 7
        Expression = '\#[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag param'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        TokenType = 4
        Expression = '(?s)".*?("|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag ident'
        BlockName = 'Tag begin'
        TokenType = 2
        Expression = '[^\s=>]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '='
        StyleName = 'Tag bound'
        BlockName = 'Tag begin'
        TokenType = 3
        Expression = '='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Unknow tag content'
        StyleName = 'Unknown tag content'
        BlockName = 'Tag begin'
        Expression = '[^>]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '&...'
        StyleName = 'Tag Key'
        TokenType = 9
        Expression = '&\w+;'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Query String'
        StyleName = 'Tag properties'
        BlockName = 'CF query open'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Query ident'
        StyleName = 'CF ident'
        BlockName = 'CF query open'
        TokenType = 12
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Query Float'
        StyleName = 'Number'
        BlockName = 'CF query open'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Query int'
        StyleName = 'Number'
        BlockName = 'CF query open'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '#param'
        StyleName = 'Query param,output'
        TokenType = 9
        Expression = '\#[\w_\.]*\#'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text'
        StyleName = 'Text'
        TokenType = 9
        Expression = '[^<&\#]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Tag keys'
        StyleName = 'Tag Key'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '<'
              '</')
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'CF keys'
        StyleName = 'CF keys'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'cf*')
            CondType = tcMask
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<'
              '</')
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag property'
        StyleName = 'Tag properties'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag property value'
        StyleName = 'Tag param'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Simple tag block'
        StyleName = 'Comment'
        ConditionList = <
          item
            TagList.Strings = (
              'br'
              'cfparam'
              'hr'
              'image'
              'img'
              'link')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 1024
          end>
        BlockEnd = 'Simple tag block end'
        DynHighlight = dhRange
        HighlightPos = cpAny
        CancelNextRules = True
        TreeItemStyle = 'Tree item (tag)'
      end
      item
        DisplayName = 'Simple tag block end'
        BlockName = 'Simple tag block'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'CF query open'
        ConditionList = <
          item
            TagList.Strings = (
              'cfquery')
            CondType = tcMask
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 1024
          end>
        BlockEnd = 'CF query close'
        HighlightPos = cpAny
        CancelNextRules = True
        TreeItemStyle = 'CFQuery in tree'
      end
      item
        DisplayName = 'CF query close'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '</')
            TokenTypes = 1024
          end>
        SameIdent = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag block begin'
        ConditionList = <
          item
            TagList.Strings = (
              'br'
              'cfparam'
              'hr'
              'image'
              'img'
              'link')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<'
              '<!')
            TokenTypes = 1024
          end>
        BlockOffset = 1
        BlockEnd = 'Tag block end'
        HighlightPos = cpAny
        CollapseFmt = '< %s0 >'
        TreeItemStyle = 'Tree item (tag)'
      end
      item
        DisplayName = 'Tag block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '</')
            TokenTypes = 1024
          end>
        BlockOffset = -1
        SameIdent = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Comment begin'
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '<!--  ...  -->'
      end
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag attribute'
        BlockName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s0 %s-1 %s-2'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemStyle = 'Tree item (attribute)'
      end
      item
        DisplayName = 'Query keys'
        StyleName = 'Query reserved'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'and'
              'by'
              'from'
              'having'
              'or'
              'order'
              'select'
              'where')
            TokenTypes = 4096
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'Style sheet'
        AlwaysEnabled = True
        StartExpression = '(?si)<style[^>]*> '#13#10
        EndExpression = '</style>'#13#10
        SyntAnalyzer = SyntAnalyzer10
      end
      item
        DisplayName = 'VB script'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*vbscript[^>]*>\s*(<!--)?'#13#10
        EndExpression = '(?i)(-->)?\s*</script>'#13#10
        SyntAnalyzer = SyntAnalyzer3
      end
      item
        DisplayName = 'Java script 1'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*javascript[^>]*>\s*(<!--)?'#13#10
        EndExpression = '(?i)(//)?(-->)?\s*</script>'#13#10
        SyntAnalyzer = SyntAnal6
      end
      item
        DisplayName = 'ASP'
        AlwaysEnabled = True
        StartExpression = '<%'#13#10'#(?i)<%@[^>]*?vbscript[^>]*>'#13#10'#\s*<%'#13#10
        EndExpression = '%>'#13#10
        SyntAnalyzer = SyntAnalyzer3
      end
      item
        DisplayName = 'PHP'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*php[^>]*>\s*(<!--)?'#13#10
        EndExpression = '(?i)(-->)?\s*</script>'#13#10
        SyntAnalyzer = SyntAnal16
      end
      item
        DisplayName = 'PHP 2'
        AlwaysEnabled = True
        StartExpression = '(?i)<\?(php)?'#13#10
        EndExpression = '\?>'#13#10
        SyntAnalyzer = SyntAnal16
      end
      item
        DisplayName = 'Java script'
        AlwaysEnabled = True
        StartExpression = '(?si)<script>'#13#10
        EndExpression = '(?i)(//)?(-->)?\s*</script>'#13#10
        SyntAnalyzer = SyntAnal6
      end>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Text'
      'Open Tag'
      'Close Tag'
      'CF ident'
      'CF symbol')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'cfm'
    LexerName = 'Coldfusion'
    Left = 144
    Top = 184
  end
  object SyntAnalyzer10: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Style'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Value'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBtnShadow
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clWhite
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = '{}'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Ident'
        StyleName = 'Param'
        BlockName = 'Style begin'
        TokenType = 4
        Expression = '[\.-\w]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        BlockName = 'Style begin'
        TokenType = 9
        Expression = '[;:,]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Style'
        StyleName = 'Style'
        TokenType = 2
        Expression = '[\w:\#\.\-]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Style begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'Style end'
        Highlight = True
        InvertColors = True
        DynHighlight = dhRange
        HighlightPos = cpRange
        DynSelectMin = True
      end
      item
        DisplayName = 'Style end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Param'
        StyleName = 'Value'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              ':')
            CondType = tcNotEqual
            TokenTypes = 520
          end
          item
            TokenTypes = 16
          end>
        IdentIndex = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Param to tree'
        ConditionList = <
          item
            TagList.Strings = (
              ':')
            TokenTypes = 512
          end
          item
            TokenTypes = 16
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'Param end'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Param end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';'
              '}')
          end>
        BlockOffset = 1
        DisplayInTree = False
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* Syntax Highlighting */'
      'body { '
      '  font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; '
      '  font-size: 8pt '
      '}'
      'H1 { '
      '  font-size: 18pt; '
      '  color: #000099; '
      '  made-up-property: 1 '
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Delimiter')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'css'
    LexerName = 'Style sheets '
  end
  object SyntAnalyzer13: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Ident'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Integer'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'HEX'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Label'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'reserved words'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Registers'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = ';.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Labels'
        StyleName = 'Label'
        Expression = '@+\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'HEX'
        TokenType = 7
        Expression = '[\da-f]+h'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Integer'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Ident'
        StyleName = 'Ident'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Registers'
        StyleName = 'Registers'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ah'
              'al'
              'ax'
              'bh'
              'bl'
              'bp'
              'bx'
              'ch'
              'cl'
              'cs'
              'cx'
              'dh'
              'di'
              'ds'
              'dx'
              'eax'
              'ebp'
              'ebx'
              'ecx'
              'edi'
              'edx'
              'eip'
              'es'
              'esc'
              'esi'
              'esp'
              'sp'
              'ss')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Reserved words'
        StyleName = 'reserved words'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'aaa'
              'aad'
              'aam'
              'aas'
              'adc'
              'add'
              'and'
              'arpl'
              'assume'
              'bound'
              'bsf'
              'bsr'
              'bswap'
              'bt'
              'btc'
              'btr'
              'bts'
              'byte'
              'call'
              'cbw'
              'cdq'
              'clc'
              'cld'
              'cli'
              'clts'
              'cmc'
              'cmp'
              'cmps'
              'cmpsb'
              'cmpsd'
              'cmpsw'
              'cmpxchg'
              'comment'
              'cwd'
              'cwde'
              'daa'
              'das'
              'db'
              'dd'
              'dec'
              'div'
              'dl'
              'dq'
              'dt'
              'dw'
              'dword'
              'end'
              'endm'
              'endp'
              'ends'
              'enter'
              'eq'
              'equ'
              'exitm'
              'extrn'
              'f2xm1'
              'fabs'
              'fadd'
              'faddp'
              'far'
              'fbld'
              'fbstp'
              'fchs'
              'fclex'
              'fcom'
              'fcomp'
              'fcompp'
              'fcos'
              'fdecstp'
              'fdisi'
              'fdiv'
              'fdivp'
              'fdivr'
              'fdivrp'
              'feni'
              'ffree'
              'fiadd'
              'ficom'
              'ficomp'
              'fidiv'
              'fidivr'
              'fild'
              'fimul'
              'fincstp'
              'finit'
              'fist'
              'fistp'
              'fisub'
              'fisubr'
              'fld'
              'fld1'
              'fldcw'
              'fldenv'
              'fldl2e'
              'fldl2t'
              'fldlg2'
              'fldln2'
              'fldpi'
              'fldz'
              'fmul'
              'fmulp'
              'fnclex'
              'fndisi'
              'fneni'
              'fninit'
              'fnop'
              'fnsave'
              'fnstcw'
              'fnstenv'
              'fnstsw'
              'fpatan'
              'fprem'
              'fprem1'
              'fptan'
              'frndint'
              'frstor'
              'fs'
              'fsave'
              'fscale'
              'fsetpm'
              'fsin'
              'fsincos'
              'fsqrt'
              'fst'
              'fstcw'
              'fstenv'
              'fstp'
              'fstsw'
              'fsub'
              'fsubp'
              'fsubr'
              'fsubrp'
              'ftst'
              'fucom'
              'fucomp'
              'fucompp'
              'fwait'
              'fxam'
              'fxch'
              'fxtract'
              'fyl2x'
              'fyl2xp1'
              'ge'
              'group'
              'gs'
              'gt'
              'high'
              'hlt'
              'idiv'
              'imul'
              'in'
              'inc'
              'include'
              'insb'
              'insd'
              'insw'
              'int'
              'into'
              'invd'
              'invlpg'
              'iret'
              'iretd'
              'ja'
              'jae'
              'jb'
              'jbe'
              'jc'
              'jcxz'
              'je'
              'jecxz'
              'jg'
              'jge'
              'jl'
              'jle'
              'jmp'
              'jna'
              'jnae'
              'jnb'
              'jnbe'
              'jnc'
              'jne'
              'jng'
              'jnge'
              'jnl'
              'jnle'
              'jno'
              'jnp'
              'jns'
              'jnz'
              'jo'
              'jp'
              'jpe'
              'jpo'
              'js'
              'jz'
              'label'
              'lahf'
              'lar'
              'large'
              'lds'
              'le'
              'lea'
              'leave'
              'length'
              'les'
              'lfs'
              'lgdt'
              'lgs'
              'lidt'
              'lldt'
              'lmsw'
              'local'
              'lock'
              'lods'
              'lodsb'
              'lodsd'
              'lodsw'
              'loop'
              'loopd'
              'loopde'
              'loopdne'
              'loopdnz'
              'loopdz'
              'loope'
              'loopne'
              'loopnz'
              'loopz'
              'low'
              'lsl'
              'lss'
              'lt'
              'ltr'
              'macro'
              'mask'
              'mod'
              'mov'
              'movs'
              'movsb'
              'movsd'
              'movsw'
              'movsx'
              'movzx'
              'mul'
              'name'
              'near'
              'neg'
              'nop'
              'not'
              'offset'
              'or'
              'org'
              'out'
              'outsb'
              'outsd'
              'outsw'
              'page'
              'pop'
              'popa'
              'popad'
              'popf'
              'popfd'
              'proc'
              'ptr'
              'public'
              'purge'
              'push'
              'pusha'
              'pushad'
              'pushf'
              'pushfd'
              'qword'
              'rcl'
              'rcr'
              'record'
              'rep'
              'repe'
              'repne'
              'repnz'
              'rept'
              'repz'
              'ret'
              'retf'
              'retn'
              'rol'
              'ror'
              'sahf'
              'sal'
              'sar'
              'sbb'
              'scas'
              'scasb'
              'scasd'
              'scasw'
              'seg'
              'segcs'
              'segds'
              'seges'
              'segfs'
              'seggs'
              'segment'
              'segss'
              'seta'
              'setae'
              'setb'
              'setbe'
              'setc'
              'sete'
              'setg'
              'setge'
              'setl'
              'setle'
              'setna'
              'setnae'
              'setnb'
              'setnbe'
              'setnc'
              'setne'
              'setng'
              'setnge'
              'setnl'
              'setnle'
              'setno'
              'setnp'
              'setns'
              'setnz'
              'seto'
              'setp'
              'setpe'
              'setpo'
              'sets'
              'setz'
              'sgdt'
              'shl'
              'shld'
              'short'
              'shr'
              'shrd'
              'si'
              'sidt'
              'size'
              'sldt'
              'small'
              'smsw'
              'st'
              'stc'
              'std'
              'sti'
              'stos'
              'stosb'
              'stosd'
              'stosw'
              'str'
              'struc'
              'sub'
              'subttl'
              'symtype'
              'tbyte'
              'test'
              'this'
              'title'
              'type'
              'verr'
              'verw'
              'wait'
              'wbinvd'
              'width'
              'word'
              'xadd'
              'xchg'
              'xlat'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '; x86 assembly sample source'
      '  CODE'#9'SEGMENT'#9'BYTE PUBLIC '
      '    ASSUME'#9'CS:CODE'
      '    '
      '    PUSH SS'
      '    POP DS'
      '    MOV AX, AABBh'
      '    MOV'#9'BYTE PTR ES:[DI], 255'
      '    JMP SHORT @AsmEnd'
      ''
      '  welcomeMsg DB '#39#39'Hello World'#39#39', 0'
      ''
      '  @AsmEnd:'
      '    MOV AX, 0'
      ''
      '  CODE'#9'ENDS'
      'END')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'asm'
    LexerName = 'Assembler'
  end
  object SyntAnalyzer11: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'uuid'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Keys'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Int const'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end>
    TokenRules = <
      item
        DisplayName = 'UUID'
        StyleName = 'uuid'
        TokenType = 10
        Expression = '[\dA-F]{8}-[\dA-F]{4}'#13#10'-[\dA-F]{4}-[\dA-F]{4}'#13#10'-[\dA-F]{12}'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Int const'
        StyleName = 'Int const'
        TokenType = 5
        Expression = '[-+]?\d'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[=;\[\]\{\}\(\)]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Multiline comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Keys'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__int3264'
              '__int64'
              'aggregatable'
              'allocate'
              'appobject'
              'arrays'
              'async'
              'async_uuid'
              'auto_handle'
              'bindable'
              'boolean'
              'broadcast'
              'byte'
              'byte_count'
              'call_as'
              'callback'
              'char'
              'coclass'
              'code'
              'comm_status'
              'const'
              'context_handle'
              'context_handle_noserialize'
              'context_handle_serialize'
              'control'
              'cpp_quote'
              'custom'
              'decode'
              'default'
              'defaultbind'
              'defaultcollelem'
              'defaultvalue'
              'defaultvtable'
              'dispinterface'
              'displaybind'
              'dllname'
              'double'
              'dual'
              'enable_allocate'
              'encode'
              'endpoint'
              'entry'
              'enum'
              'error_status_t'
              'explicit_handle'
              'fault_status'
              'first_is'
              'float'
              'handle'
              'handle_t'
              'heap'
              'helpcontext'
              'helpfile'
              'helpstring'
              'helpstringcontext'
              'helpstringdll'
              'hidden'
              'hyper'
              'id'
              'idempotent'
              'ignore'
              'iid_is'
              'immediatebind'
              'implicit_handle'
              'import'
              'importlib'
              'in'
              'in_line'
              'include'
              'int'
              'interface'
              'last_is'
              'lcid'
              'length_is'
              'library'
              'licensed'
              'local'
              'long'
              'max_is'
              'maybe'
              'message'
              'midl_pragma'
              'midl_user_allocate'
              'midl_user_free'
              'min_is'
              'module'
              'ms_union'
              'ncacn_at_dsp'
              'ncacn_dnet_nsp'
              'ncacn_http'
              'ncacn_ip_tcp'
              'ncacn_nb_ipx'
              'ncacn_nb_nb'
              'ncacn_nb_tcp'
              'ncacn_np'
              'ncacn_spx'
              'ncacn_vns_spp'
              'ncadg_ip_udp'
              'ncadg_ipx'
              'ncadg_mq'
              'ncalrpc'
              'nocode'
              'nonbrowsable'
              'noncreatable'
              'nonextensible'
              'notify'
              'object'
              'odl'
              'oleautomation'
              'optimize'
              'optional'
              'out'
              'out_of_line'
              'pipe'
              'pointer_default'
              'propget'
              'propput'
              'propputref'
              'ptr'
              'public'
              'range'
              'readonly'
              'ref'
              'represent_as'
              'requestedit'
              'restricted'
              'retval'
              'shape'
              'short'
              'signed'
              'size_is'
              'small'
              'source'
              'strict_context_handle'
              'string'
              'struct'
              'switch'
              'switch_is'
              'switch_type'
              'transmit_as'
              'typedef'
              'uidefault'
              'union'
              'unique'
              'unsigned'
              'user_marshal'
              'usesgetlasterror'
              'v1_enum'
              'vararg'
              'version'
              'void'
              'warning'
              'wchar_t'
              'wire_marshal')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'interface'
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            CondType = tcNotEqual
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'interface')
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = '}'
        GroupFmt = 'Interfaces'
        HighlightPos = cpAny
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              '}')
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'module'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 12
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'module')
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = '}'
        GroupFmt = 'Modules'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'typedef'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'enum'
              'struct')
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'typedef')
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 3
        BlockEnd = 'typedef end'
        NameFmt = '%e1'
        GroupFmt = '%s2s'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'library'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'library')
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = '}'
        NameFmt = '%s2 %s1'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'typedef 2'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'enum'
              'struct')
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'typedef')
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = 'typedef end'
        NameFmt = '%e1'
        GroupFmt = '%s1s'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'typedef end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2045
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* CORBA IDL sample source  */'
      '#include <sample.idl>'
      '                           '
      'const string TestString = "Hello World";'
      'const long TestLong = 10;'
      ''
      'module TestModule {'
      '  interface DemoInterface {'
      '    boolean HelloWorld(in string Message);'
      '  }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'UUID')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'idl'
    LexerName = 'IDL files'
  end
  object SyntAnalyzer12: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Key words'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Commands'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
      end
      item
        DisplayName = 'Params'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Echo'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clInfoBk
      end
      item
        DisplayName = 'Label'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Echo'
        StyleName = 'Key words'
        TokenType = 5
        Expression = '^@?echo'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'echo text'
        StyleName = 'Echo'
        BlockName = 'echo start'
        StrictParent = True
        TokenType = 4
        Expression = '.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^rem .*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Label'
        StyleName = 'Label'
        TokenType = 3
        Expression = '^: .*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Command'
        StyleName = 'Params'
        TokenType = 2
        Expression = '\S+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Key words'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'Arp'
              'Assoc'
              'At'
              'Atmadm'
              'Attrib'
              'Bootcfg'
              'Break'
              'Cacls'
              'call'
              'cd'
              'Change'
              'Chcp'
              'Chdir'
              'Chkdsk'
              'Chkntfs'
              'choice'
              'Cipher'
              'cls'
              'Cmd'
              'Cmstp'
              'Color'
              'Comp'
              'Compact'
              'Convert'
              'copy'
              'Cprofile'
              'CScript'
              'Date'
              'Defrag'
              'del'
              'Dir'
              'Diskcomp'
              'Diskcopy'
              'DiskPart'
              'do'
              'Doskey'
              'Driverquery'
              'echo'
              'echo.'
              'Endlocal'
              'errorlevel'
              'Eventcreate'
              'Eventquery'
              'Eventtriggers'
              'Evntcmd'
              'exist'
              'Exit'
              'Expand'
              'Fc'
              'Find'
              'Findstr'
              'Finger'
              'Flattemp'
              'for'
              'Format'
              'Fsutil'
              'Ftp'
              'Ftype'
              'Getmac'
              'goto'
              'Gpresult'
              'Gpupdate'
              'Graftabl'
              'Help'
              'Helpctr'
              'Hostname'
              'if'
              'in'
              'Ipconfig'
              'Ipseccmd'
              'Ipxroute'
              'Irftp'
              'Label'
              'Lodctr'
              'Logman'
              'Lpq'
              'Lpr'
              'Macfile'
              'md'
              'Mkdir'
              'Mmc'
              'Mode'
              'More'
              'Mountvol'
              'Move'
              'MS-DOS'
              'Msiexec'
              'Msinfo32'
              'Nbtstat'
              'Net'
              'Netsh'
              'Netstat'
              'not'
              'Nslookup'
              'Ntbackup'
              'Ntcmdprompt'
              'Ntsd'
              'OOpenfiles'
              'Pagefileconfig'
              'Path'
              'Pathping'
              'pause'
              'Pbadmin'
              'Pentnt'
              'Perfmon'
              'Ping'
              'Popd'
              'Print'
              'Prncnfg'
              'Prndrvr'
              'Prnjobs'
              'Prnmngr'
              'Prnport'
              'Prnqctl'
              'Prompt'
              'Pushd'
              'Query'
              'Rcp'
              'Recover'
              'Reg'
              'Regsvr32'
              'Relog'
              'Rem'
              'Rename'
              'Replace'
              'Resetsession'
              'Rexec'
              'Rmdir'
              'Route'
              'RRasdial'
              'Rsh'
              'Rsm'
              'Runas'
              'SC'
              'Schtasks'
              'Secedit'
              'set'
              'Setlocal'
              'Sfc'
              'shift'
              'Shutdown'
              'Sort'
              'Start'
              'Subst'
              'sys'
              'Systeminfo'
              'Taskkill'
              'Tasklist'
              'Tcmsetup'
              'TCP/IP'
              'Telnet'
              'Tftp'
              'Time'
              'Title'
              'Tracerpt'
              'Tracert'
              'Tree'
              'Type'
              'Typeperf'
              'Unlodctr'
              'Verify'
              'Vol'
              'Vssadmin'
              'VVer'
              'W32tm'
              'Winnt'
              'Winnt32'
              'WMIC'
              'Xcopy')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'std commands'
        Enabled = False
        StyleName = 'Commands'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'cd'
              'copy'
              'del'
              'md'
              'sys')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'echo start'
        StyleName = 'Echo'
        ConditionList = <
          item
            TagList.Strings = (
              'echo')
            TokenTypes = 32
            IgnoreCase = True
          end>
        BlockEnd = 'echo end'
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
      end
      item
        DisplayName = 'echo end'
        BlockName = 'echo start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 16
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'rem MS-DOS batch file'
      'rem'
      '@echo off'
      'cls'
      'echo The command line is: %1 %2 %3 %4 %5'
      'rem'
      'rem now wait for the user ...'
      'pause'
      'copy c:\*.pas d:\'
      'if errorlevel 1 echo Error in copy action!')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Label'
      'echo'
      'echo cmd')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'bat'
    LexerName = 'Batch files'
    SkipSpaces = False
    LineComment = 'rem '
  end
  object SyntAnalyzer6: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Reserved words'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Integer'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clActiveCaption
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Float'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'A2ML section'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Block names'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Block begin'
        StyleName = 'Reserved words'
        TokenType = 9
        Expression = '/begin'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Block end'
        StyleName = 'Reserved words'
        TokenType = 10
        Expression = '/end'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Integer'
        TokenType = 7
        Expression = '0x[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Integer'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Float'
        TokenType = 6
        Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Reserver words'
        StyleName = 'Block names'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'A2ML'
              'AXIS_PTS'
              'CHARACTERISTIC'
              'COMPU_METHOD'
              'COMPU_TAB'
              'COMPU_VTAB'
              'COMPU_VTAB_RANGE'
              'FRAME'
              'FUNCTION'
              'GROUP'
              'HEADER'
              'IF_DATA'
              'MEASUREMENT'
              'MOD_COMMON'
              'MOD_PAR'
              'PROJECT'
              'RECORD_LAYOUT'
              'UNIT'
              'USER_RIGHTS'
              'VARIANT_CODING')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 512
          end>
        BlockOffset = 1
        BlockEnd = 'End'
        NameFmt = '%s-1'
        GroupFmt = '%s0'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'A2ML begin'
        StyleName = 'A2ML section'
        ConditionList = <
          item
            TagList.Strings = (
              'A2ML')
            TokenTypes = 4
          end
          item
            TokenTypes = 512
          end>
        BlockOffset = 1
        BlockEnd = 'A2ML end'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'A2ML end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'A2ML')
            TokenTypes = 4
          end
          item
            TokenTypes = 1024
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'A2ML'
        StartExpression = '(?i) /begin\s+a2ml'#13#10
        EndExpression = '(?i) /end \s+ a2ml'#13#10
        SyntAnalyzer = SyntAnal18
      end>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Block begin'
      'Block end')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'a2l'
    LexerName = 'ASAP 2 database'
  end
  object SyntAnal18: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Simple types'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsUnderline]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;\(\)\+\-\{\}\[\]\*]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'block'
              'enum'
              'struct'
              'taggedstruct'
              'taggedunion')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Types'
        StyleName = 'Simple types'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'char'
              'double'
              'float'
              'int'
              'long'
              'uchar'
              'uint'
              'ulong')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'Block end'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    LexerName = 'ASAP Meta Languge'
    Internal = True
    Left = 140
    Top = 160
  end
  object SyntAnalyzer15: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Modifiers'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
      end
      item
        DisplayName = 'Key chars'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'block {}'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'block []'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Chars'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clLime
      end
      item
        DisplayName = 'Repeaters'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Modifiers'
        StyleName = 'Modifiers'
        TokenType = 9
        Expression = '\(\?.+?\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Block {}'
        StyleName = 'block {}'
        Expression = '\{.+?\}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Repeaters'
        StyleName = 'Repeaters'
        TokenType = 3
        Expression = '[\+\*\?]\??'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '[]'
        StyleName = 'block []'
        Expression = '[\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Key chars'
        StyleName = 'Key chars'
        TokenType = 2
        Expression = '[\.\|\$\^]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Key as char'
        StyleName = 'Chars'
        TokenType = 4
        Expression = '\\.'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text'
        StyleName = 'Chars'
        TokenType = 4
        Expression = '[^()\[\]{}+*?-|$^.]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '# float definition example'
      ''
      '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    LexerName = 'Regular expressions'
  end
  object SyntAnal1: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlight
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clLime
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clSilver
        BorderTypeTop = blSolid
        BorderColorTop = clSilver
        BorderTypeRight = blSolid
        BorderColorRight = clSilver
        BorderTypeBottom = blSolid
        BorderColorBottom = clSilver
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Region Name'
        StyleName = 'Preprocessor'
        BlockName = 'Region header'
        TokenType = 10
        Expression = '.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Region'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#region'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^!~]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'base'
              'bool'
              'break'
              'byte'
              'case'
              'catch'
              'char'
              'checked'
              'class'
              'const'
              'continue'
              'decimal'
              'default'
              'delegate'
              'do'
              'double'
              'else'
              'enum'
              'event'
              'explicit'
              'extern'
              'false'
              'finally'
              'fixed'
              'float'
              'for'
              'foreach'
              'get'
              'goto'
              'if'
              'implicit'
              'in'
              'int'
              'interface'
              'internal'
              'is'
              'lock'
              'long'
              'namespace'
              'new'
              'null'
              'object'
              'operator'
              'out'
              'override'
              'params'
              'private'
              'protected'
              'public'
              'readonly'
              'ref'
              'return'
              'sbyte'
              'sealed'
              'set'
              'short'
              'sizeof'
              'static'
              'string'
              'struct'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typeof'
              'uint'
              'ulong'
              'unchecked'
              'unsafe'
              'ushort'
              'using'
              'virtual'
              'void'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '#if'
        ConditionList = <
          item
            TagList.Strings = (
              '#if*'
              '#ifdef*'
              '#ifndef*')
            CondType = tcMask
            TokenTypes = 1024
          end>
        BlockEnd = '#endif'
        HighlightPos = cpAny
      end
      item
        DisplayName = '#endif'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '#endif')
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function begin'
        BlockName = 'function begin'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 12
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'class')
            CondType = tcNotEqual
            TokenTypes = 4
          end>
        IdentIndex = -1
        BlockEnd = 'function end'
        RefToCondEnd = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '{ ... }'
      end
      item
        DisplayName = 'class'
        ConditionList = <
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
          end>
        IdentIndex = -1
        BlockEnd = 'end of class'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'namespace'
        ConditionList = <
          item
            TagList.Strings = (
              'namespace')
            TokenTypes = 4
          end>
        IdentIndex = -1
        BlockEnd = 'end of namespace'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockName = 'Begin'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function end'
        BlockName = 'function begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'end of class'
        BlockName = 'class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'end of namespace'
        BlockName = 'namespace'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '/* ... */'
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = '#Region begin'
        ConditionList = <
          item
            TagList.Strings = (
              '\#region')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        BlockEnd = '#End region'
        HighlightPos = cpAny
        CollapseFmt = '%s-1'
      end
      item
        DisplayName = '#End region'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '#endregion')
            TokenTypes = 512
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        CollapseFmt = '[ ... ]'
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Region header'
        ConditionList = <
          item
            TagList.Strings = (
              '#region')
            TokenTypes = 512
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Region header end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'Region header'
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'XML doc'
        Enabled = False
        StartExpression = '///'
        EndExpression = '(?s)(\r\n | ///)'
        SyntAnalyzer = SyntAnal22
      end>
    SampleText.Strings = (
      '// C# syntax highlighting '
      'public class Stack'
      '{'
      '  private Node first = null;'
      '  public bool Empty {'
      '    get {'
      '      return (first == null);'
      '    }'
      '  }'
      '  public object Pop() {'
      '    if (first == null)'
      '      throw new Exception("Can'#39't Pop from an empty Stack.");'
      '    else {'
      '      object temp = first.Value;'
      '      first = first.Next;'
      '      return temp;'
      '    }'
      '  }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Region name')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'c cpp h cs'
    LexerName = 'C#'
    LineComment = '//'
  end
  object SyntAnal4: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <>
    BlockRules = <>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'XML'
        SyntAnalyzer = SyntAnal22
        FromTextBegin = True
        ToTextEnd = True
      end
      item
        DisplayName = 'Options'
        AlwaysEnabled = True
        StartExpression = '<IDEOPTIONS>'#13#10
        EndExpression = '</IDEOPTIONS>'#13#10
        SyntAnalyzer = SyntAnalyzer7
      end>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'bpk bpr'
    LexerName = 'C++Builder project'
  end
  object SyntAnal5: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Current function'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16772332
        FormatType = ftBackGround
        MultiLineBorder = True
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^~!]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'boolean'
              'break'
              'byte'
              'case'
              'catch'
              'char'
              'class'
              'const'
              'continue'
              'default'
              'do'
              'double'
              'else'
              'extends'
              'false'
              'final'
              'finally'
              'float'
              'for'
              'goto'
              'if'
              'implements'
              'import'
              'instanceof'
              'int'
              'interface'
              'long'
              'native'
              'new'
              'null'
              'package'
              'private'
              'protected'
              'public'
              'return'
              'short'
              'static'
              'string'
              'super'
              'switch'
              'synchronized'
              'this'
              'throw'
              'throws'
              'transient'
              'true'
              'try'
              'void'
              'volatile'
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function begin'
        StyleName = 'Current function'
        BlockName = 'class start'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockEnd = 'function end'
        Highlight = True
        NameFmt = '%s-1'
        RefToCondEnd = True
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '%s0 %s-1() { ... }'
      end
      item
        DisplayName = 'function end'
        BlockName = 'function begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'class start'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
            IgnoreCase = True
          end
          item
            CondType = tcSkip
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
          end>
        BlockEnd = 'End'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        CollapseFmt = '%s0 %s-1 { ... }'
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '{ ... }'
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '/* ... */'
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* Java syntax highlighting */'
      'import java.util.*;'
      ''
      '/** Example class */'
      'public class Sample {'
      '  public static void main(String[] args) {'
      '    int i = 0;'
      '    for(i = 0; i < 10; i++)'
      '      System.out.println("Hello world");'
      '  }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'keyword')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'java jav'
    LexerName = 'Java Builder'
  end
  object SyntAnal6: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^~!]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'break'
              'case'
              'catch'
              'class'
              'const'
              'continue'
              'debugger'
              'default'
              'delete'
              'do'
              'else'
              'enum'
              'export'
              'extends'
              'false'
              'finally'
              'for'
              'function'
              'if'
              'import'
              'in'
              'new'
              'null'
              'return'
              'super'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typeof'
              'var'
              'void'
              'while'
              'with')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function start'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
          end>
        BlockEnd = 'function end'
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function end'
        BlockName = 'function start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      ''
      '// example function'
      'function SetEnabled(A,count)'
      '{'
      '  for(i= 0; i< count;i++)'
      '    A(i).Enabled = !A(i).Enabled;'
      ''
      '}'
      '')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'js'
    LexerName = 'Java script'
  end
  object SyntAnal8: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Something'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsUnderline]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 8
        Expression = '\$.\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Something'
        StyleName = 'Something'
        TokenType = 9
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\{\}\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__DATA__'
              '__END__'
              '__FILE__'
              '__LINE__'
              '__PACKAGE__'
              'abs'
              'accept'
              'alarm'
              'and'
              'atan2'
              'AUTOLOAD'
              'BEGIN'
              'bind'
              'binmode'
              'bless'
              'caller'
              'chdir'
              'CHECK'
              'chmod'
              'chomp'
              'chop'
              'chown'
              'chr'
              'chroot'
              'close'
              'closedir'
              'cmp'
              'connect'
              'continue'
              'CORE'
              'cos'
              'crypt'
              'dbmclose'
              'dbmopen'
              'define'
              'defined'
              'delete'
              'DESTROY'
              'die'
              'do'
              'dump'
              'each'
              'else'
              'elsif'
              'END'
              'endgrent'
              'endhostent'
              'endnetent'
              'endprotoent'
              'endpwent'
              'endservent'
              'eof'
              'EQ'
              'eval'
              'exec'
              'exists'
              'exit'
              'exp'
              'fcntl'
              'fileno'
              'flock'
              'for'
              'foreach'
              'fork'
              'format'
              'formline'
              'GE'
              'getc'
              'getgrent'
              'getgrgid'
              'getgrnam'
              'gethostbyaddr'
              'gethostbyname'
              'gethostent'
              'getlogin'
              'getnetbyaddr'
              'getnetbyname'
              'getnetent'
              'getpeername'
              'getpgrp'
              'getppid'
              'getpriority'
              'getprotobyname'
              'getprotobynumber'
              'getprotoent'
              'getpwent'
              'getpwnam'
              'getpwuid'
              'getservbyname'
              'getservbyport'
              'getservent'
              'getsockname'
              'getsockopt'
              'glob'
              'gmtime'
              'goto'
              'grep'
              'GT'
              'hex'
              'if'
              'index'
              'INIT'
              'int'
              'ioctl'
              'join'
              'keys'
              'kill'
              'last'
              'lc'
              'lcfirst'
              'LE'
              'length'
              'link'
              'listen'
              'local'
              'localtime'
              'lock'
              'log'
              'lstat'
              'LT'
              'm'
              'map'
              'mkdir'
              'msgctl'
              'msgget'
              'msgrcv'
              'msgsnd'
              'my'
              'NE'
              'next'
              'no'
              'not'
              'NULL'
              'oct'
              'open'
              'opendir'
              'or'
              'ord'
              'our'
              'pack'
              'package'
              'pipe'
              'pop'
              'pos'
              'print'
              'printf'
              'prototype'
              'push'
              'q'
              'qq'
              'qr'
              'qu'
              'quotemeta'
              'qw'
              'qx'
              'rand'
              'read'
              'readdir'
              'readline'
              'readlink'
              'readpipe'
              'recv'
              'redo'
              'ref'
              'rename'
              'require'
              'reset'
              'return'
              'reverse'
              'rewinddir'
              'rindex'
              'rmdir'
              's'
              'scalar'
              'seek'
              'seekdir'
              'select'
              'semctl'
              'semget'
              'semop'
              'send'
              'setgrent'
              'sethostent'
              'setnetent'
              'setpgrp'
              'setpriority'
              'setprotoent'
              'setpwent'
              'setservent'
              'setsockopt'
              'shift'
              'shmctl'
              'shmget'
              'shmread'
              'shmwrite'
              'shutdown'
              'sin'
              'sleep'
              'socket'
              'socketpair'
              'sort'
              'splice'
              'split'
              'sprintf'
              'sqrt'
              'srand'
              'stat'
              'study'
              'sub'
              'substr'
              'symlink'
              'syscall'
              'sysopen'
              'sysread'
              'sysseek'
              'system'
              'syswrite'
              'tell'
              'telldir'
              'tie'
              'tied'
              'time'
              'times'
              'tr'
              'truncate'
              'uc'
              'ucfirst'
              'umask'
              'undef'
              'unless'
              'unlink'
              'unpack'
              'unshift'
              'untie'
              'until'
              'use'
              'utime'
              'values'
              'vec'
              'wait'
              'waitpid'
              'wantarray'
              'warn'
              'while'
              'write'
              'x'
              'xor'
              'y')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#!/bin/perl'
      'require "cgi-lib.pl";   '
      'use sigtrap;'
      'do '#39'envars.pl'#39';'
      '$_ = $password1;'
      'sub WriteBack {'
      '        while ($_ ne "fred")    {'
      '                sleep 5;'
      '        }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Something')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'pl pm cgi pod'
    LexerName = 'Perl'
  end
  object SyntAnal9: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '!.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'accept'
              'and'
              'application'
              'begin'
              'break'
              'by'
              'case'
              'choose'
              'class'
              'code'
              'compile'
              'cycle'
              'data'
              'detail'
              'do'
              'else'
              'elsif'
              'end'
              'execute'
              'exit'
              'file'
              'footer'
              'form'
              'function'
              'goto'
              'group'
              'header'
              'if'
              'include'
              'item'
              'itemize'
              'join'
              'loop'
              'map'
              'member'
              'menu'
              'menubar'
              'module'
              'new'
              'not'
              'null'
              'of'
              'olecontrol'
              'omit'
              'option'
              'or'
              'orof'
              'parent'
              'procedure'
              'program'
              'queue'
              'record'
              'report'
              'return'
              'routine'
              'row'
              'section'
              'self'
              'sheet'
              'tab'
              'table'
              'then'
              'times'
              'to'
              'toolbar'
              'until'
              'view'
              'while'
              'window'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    LexerName = 'Clarion'
  end
  object SyntAnal10: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]@]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'announce'
              'begin'
              'break'
              'case'
              'class'
              'continue'
              'declare'
              'do'
              'else'
              'elseif'
              'end'
              'endcase'
              'endclass'
              'enddo'
              'endif'
              'endsequenc'
              'exit'
              'exported'
              'field'
              'for'
              'function'
              'hidden'
              'if'
              'in'
              'init'
              'local'
              'memvar'
              'method'
              'next'
              'nil'
              'note'
              'otherwise'
              'parameters'
              'private'
              'procedure'
              'protected'
              'public'
              'recover'
              'request'
              'return'
              'self'
              'sequence'
              'static'
              'step'
              'then'
              'to'
              'using'
              'var'
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function start'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'function end'
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'return')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    LexerName = 'Clipper'
  end
  object SyntAnal11: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Left margin'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clBackground
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Left margin'
        StyleName = 'Left margin'
        Expression = '^.{6}[^*]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^.{6}\*.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\|.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        TokenType = 2
        Expression = '[a-z_][-\w]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        TokenType = 3
        Expression = '\.'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'accept'
              'access'
              'add'
              'address'
              'advancing'
              'after'
              'all'
              'alphabet'
              'also'
              'alter'
              'alternate'
              'and'
              'any'
              'apply'
              'are'
              'area'
              'areas'
              'ascending'
              'assign'
              'at'
              'basis'
              'before'
              'beginning'
              'binary'
              'blank'
              'block'
              'bottom'
              'by'
              'call'
              'cancel'
              'cbl'
              'character'
              'characters'
              'class'
              'close'
              'collating'
              'comma'
              'common'
              'compute'
              'configuration'
              'contains'
              'content'
              'continue'
              'converting'
              'copy'
              'corr'
              'corresponding'
              'count'
              'currency'
              'data'
              'day'
              'dbcs'
              'debugging'
              'declaratives'
              'degugging'
              'delete'
              'delimited'
              'delimiter'
              'depending'
              'descending'
              'divide'
              'division'
              'down'
              'duplicates'
              'dynamic'
              'ebcdic'
              'egcs'
              'eject'
              'else'
              'ending'
              'enter'
              'entry'
              'environment'
              'eop'
              'equal'
              'error'
              'evaluate'
              'every'
              'exception'
              'exit'
              'extend'
              'external'
              'f'
              'false'
              'fd'
              'filler'
              'first'
              'footing'
              'for'
              'from'
              'giving'
              'global'
              'go'
              'goback'
              'greater'
              'id'
              'identification'
              'if'
              'in'
              'index'
              'indexed'
              'initial'
              'initialize'
              'insert'
              'inspect'
              'installation'
              'into'
              'invalid'
              'is'
              'just'
              'justified'
              'kanji'
              'key'
              'label'
              'leading'
              'left'
              'length'
              'less'
              'line'
              'lines'
              'linkage'
              'list'
              'lock'
              'map'
              'memory'
              'merge'
              'mode'
              'modules'
              'move'
              'multiple'
              'multiply'
              'native'
              'negative'
              'next'
              'no'
              'nolist'
              'nomap'
              'nosource'
              'not'
              'null'
              'nulls'
              'occurs'
              'of'
              'off'
              'omitted'
              'on'
              'open'
              'optional'
              'or'
              'order'
              'organization'
              'other'
              'output'
              'overflow'
              'padding'
              'page'
              'password'
              'perform'
              'pic'
              'picture'
              'pointer'
              'position'
              'positive'
              'procedure'
              'procedures'
              'proceed'
              'process'
              'quote'
              'quotes'
              'random'
              'read'
              'ready'
              'record'
              'recording'
              'records'
              'redefines'
              'reel'
              'reference'
              'relative'
              'release'
              'reload'
              'remainder'
              'removal'
              'renames'
              'replace'
              'replacing'
              'rerun'
              'reserve'
              'reset'
              'reversed'
              'rewind'
              'rewrite'
              'right'
              'rounded'
              'run'
              's'
              'same'
              'sd'
              'search'
              'section'
              'select'
              'sentence'
              'separate'
              'sequence'
              'sequential'
              'service'
              'set'
              'sign'
              'size'
              'skip1'
              'skip2'
              'skip3'
              'space'
              'spaces'
              'start'
              'status'
              'stop'
              'string'
              'subtract'
              'suppress'
              'symbolic'
              'sync'
              'synchronized'
              'tally'
              'tallying'
              'tape'
              'test'
              'than'
              'then'
              'through'
              'thru'
              'time'
              'times'
              'title'
              'to'
              'top'
              'trace'
              'trailing'
              'true'
              'u'
              'unit'
              'unstring'
              'until'
              'up'
              'upon'
              'usage'
              'use'
              'using'
              'v'
              'value'
              'values'
              'varying'
              'with'
              'words'
              'zero'
              'zeroes'
              'zeros')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'other'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'alphabetic'
              'alphabetic-lower'
              'alphabetic-upper'
              'alphanumeric'
              'alphanumeric-edited'
              'author'
              'code-set'
              'comp'
              'comp-1'
              'comp-2'
              'comp-3'
              'comp-4'
              'computational'
              'computational-1'
              'computational-2'
              'computational-3'
              'computational-4'
              'date'
              'date-compiled'
              'date-written'
              'day-of-week'
              'debug-item'
              'decimal-point'
              'display'
              'display-1'
              'end'
              'end-add'
              'end-call'
              'end-compute'
              'end-delete'
              'end-divide'
              'end-evaluate'
              'end-if'
              'end-multiply'
              'end-of-page'
              'end-perform'
              'end-read'
              'end-return'
              'end-rewrite'
              'end-search'
              'end-start'
              'end-string'
              'end-subtract'
              'end-unstring'
              'end-write'
              'file'
              'file-control'
              'high-value'
              'high-values'
              'input'
              'input-output'
              'i-o'
              'i-o-control'
              'linage'
              'linage-counter'
              'low-value'
              'low-values'
              'more-labels'
              'numeric'
              'numeric-edited'
              'object-computer'
              'packed-decimal'
              'program'
              'program-id'
              'return'
              'return-code'
              'security'
              'segment-limit'
              'shift-in'
              'shift-out'
              'sort'
              'sort-control'
              'sort-core-size'
              'sort-file-size'
              'sort-merge'
              'sort-message'
              'sort-mode-size'
              'sort-return'
              'source'
              'source-computer'
              'special-names'
              'standard'
              'standard-1'
              'standard-2'
              'when'
              'when-compiled'
              'working-storage'
              'write'
              'write-only')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block begin'
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
          end>
        BlockEnd = 'Block end'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block end'
        BlockName = 'Block begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'cbl'
    LexerName = 'Cobol'
    SkipSpaces = False
    Internal = True
  end
  object SyntAnal27: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Left margin'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clBackground
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 2 (to correct)'
        StyleName = 'Left margin'
        Expression = '^.{7}\|'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^.{6}\*.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Left margin'
        StyleName = 'Left margin'
        TokenType = 9
        Expression = '^.{0, 6}[^\*\r\n]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\|.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'end'
        StyleName = 'Reserved word'
        TokenType = 8
        Expression = 'end'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        TokenType = 3
        Expression = '[\.\-]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        TokenType = 2
        Expression = '[a-z_][-\w]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 2'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'accept'
              'access'
              'add'
              'address'
              'advancing'
              'after'
              'all'
              'alphabet'
              'also'
              'alter'
              'alternate'
              'and'
              'any'
              'apply'
              'are'
              'area'
              'areas'
              'ascending'
              'assign'
              'at'
              'basis'
              'before'
              'beginning'
              'binary'
              'blank'
              'block'
              'bottom'
              'by'
              'call'
              'cancel'
              'cbl'
              'character'
              'characters'
              'class'
              'close'
              'collating'
              'comma'
              'common'
              'compute'
              'configuration'
              'contains'
              'content'
              'continue'
              'converting'
              'copy'
              'corr'
              'corresponding'
              'count'
              'currency'
              'data'
              'day'
              'dbcs'
              'debugging'
              'declaratives'
              'degugging'
              'delete'
              'delimited'
              'delimiter'
              'depending'
              'descending'
              'divide'
              'division'
              'down'
              'duplicates'
              'dynamic'
              'ebcdic'
              'egcs'
              'eject'
              'else'
              'ending'
              'enter'
              'entry'
              'environment'
              'eop'
              'equal'
              'error'
              'evaluate'
              'every'
              'exception'
              'exit'
              'extend'
              'external'
              'f'
              'false'
              'fd'
              'filler'
              'first'
              'footing'
              'for'
              'from'
              'giving'
              'global'
              'go'
              'goback'
              'greater'
              'id'
              'identification'
              'if'
              'in'
              'index'
              'indexed'
              'initial'
              'initialize'
              'insert'
              'inspect'
              'installation'
              'into'
              'invalid'
              'is'
              'just'
              'justified'
              'kanji'
              'key'
              'label'
              'leading'
              'left'
              'length'
              'less'
              'line'
              'lines'
              'linkage'
              'list'
              'lock'
              'map'
              'memory'
              'merge'
              'mode'
              'modules'
              'move'
              'multiple'
              'multiply'
              'native'
              'negative'
              'next'
              'no'
              'nolist'
              'nomap'
              'nosource'
              'not'
              'null'
              'nulls'
              'occurs'
              'of'
              'off'
              'omitted'
              'on'
              'open'
              'optional'
              'or'
              'order'
              'organization'
              'other'
              'output'
              'overflow'
              'padding'
              'page'
              'password'
              'perform'
              'pic'
              'picture'
              'pointer'
              'position'
              'positive'
              'procedure'
              'procedures'
              'proceed'
              'process'
              'quote'
              'quotes'
              'random'
              'read'
              'ready'
              'record'
              'recording'
              'records'
              'redefines'
              'reel'
              'reference'
              'relative'
              'release'
              'reload'
              'remainder'
              'removal'
              'renames'
              'replace'
              'replacing'
              'rerun'
              'reserve'
              'reset'
              'reversed'
              'rewind'
              'rewrite'
              'right'
              'rounded'
              'run'
              's'
              'same'
              'sd'
              'search'
              'section'
              'select'
              'sentence'
              'separate'
              'sequence'
              'sequential'
              'service'
              'set'
              'sign'
              'size'
              'skip1'
              'skip2'
              'skip3'
              'space'
              'spaces'
              'start'
              'status'
              'stop'
              'string'
              'subtract'
              'suppress'
              'symbolic'
              'sync'
              'synchronized'
              'tally'
              'tallying'
              'tape'
              'test'
              'than'
              'then'
              'through'
              'thru'
              'time'
              'times'
              'title'
              'to'
              'top'
              'trace'
              'trailing'
              'true'
              'u'
              'unit'
              'unstring'
              'until'
              'up'
              'upon'
              'usage'
              'use'
              'using'
              'v'
              'value'
              'values'
              'varying'
              'with'
              'words'
              'zero'
              'zeroes'
              'zeros')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'other'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'alphabetic'
              'alphabetic-lower'
              'alphabetic-upper'
              'alphanumeric'
              'alphanumeric-edited'
              'author'
              'code-set'
              'comp'
              'comp-1'
              'comp-2'
              'comp-3'
              'comp-4'
              'computational'
              'computational-1'
              'computational-2'
              'computational-3'
              'computational-4'
              'date'
              'date-compiled'
              'date-written'
              'day-of-week'
              'debug-item'
              'decimal-point'
              'display'
              'display-1'
              'end'
              'end-add'
              'end-call'
              'end-compute'
              'end-delete'
              'end-divide'
              'end-evaluate'
              'end-if'
              'end-multiply'
              'end-of-page'
              'end-perform'
              'end-read'
              'end-return'
              'end-rewrite'
              'end-search'
              'end-start'
              'end-string'
              'end-subtract'
              'end-unstring'
              'end-write'
              'file'
              'file-control'
              'high-value'
              'high-values'
              'input'
              'input-output'
              'i-o'
              'i-o-control'
              'linage'
              'linage-counter'
              'low-value'
              'low-values'
              'more-labels'
              'numeric'
              'numeric-edited'
              'object-computer'
              'packed-decimal'
              'program'
              'program-id'
              'return'
              'return-code'
              'security'
              'segment-limit'
              'shift-in'
              'shift-out'
              'sort'
              'sort-control'
              'sort-core-size'
              'sort-file-size'
              'sort-merge'
              'sort-message'
              'sort-mode-size'
              'sort-return'
              'source'
              'source-computer'
              'special-names'
              'standard'
              'standard-1'
              'standard-2'
              'when'
              'when-compiled'
              'working-storage'
              'write'
              'write-only')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'when end 2'
        BlockName = 'when'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'evaluate')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '-')
            TokenTypes = 8
          end
          item
            TokenTypes = 256
          end>
        BlockOffset = 4
        BlockEnd = 'when'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'if'
        BlockName = 'operator'
        ConditionList = <
          item
            TagList.Strings = (
              '-')
            CondType = tcNotEqual
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'if end .'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = 'if ...'
      end
      item
        DisplayName = 'operator'
        BlockName = 'operator'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '-')
            CondType = tcNotEqual
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'call'
              'if'
              'move')
            TokenTypes = 4
          end>
        BlockOffset = 1
        BlockEnd = 'operator end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s1 ...'
      end
      item
        DisplayName = 'if end .'
        BlockName = 'if'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 264
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'operator end'
        BlockName = 'operator'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'if end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '-')
            TokenTypes = 8
          end
          item
            TokenTypes = 256
          end>
        BlockEnd = 'if'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'generic block end'
        BlockName = 'generic block start'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'add'
              'call'
              'compute'
              'declaratives'
              'delete'
              'divide'
              'evaluate'
              'multiply'
              'of-page'
              'perform'
              'read'
              'return'
              'rewrite'
              'search'
              'start'
              'string'
              'subtract'
              'unstring'
              'write')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '-')
            TokenTypes = 8
          end
          item
            TokenTypes = 256
          end>
        SameIdent = True
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'generic block start'
        ConditionList = <
          item
            TagList.Strings = (
              'add'
              'call'
              'compute'
              'declaratives'
              'delete'
              'divide'
              'evaluate'
              'multiply'
              'of-page'
              'perform'
              'read'
              'return'
              'rewrite'
              'search'
              'start'
              'string'
              'subtract'
              'unstring'
              'write')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'generic block end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0'
      end
      item
        DisplayName = 'section end'
        BlockName = 'section start'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'section')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end>
        BlockOffset = 4
        HighlightPos = cpAny
      end
      item
        DisplayName = 'section start'
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'section')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end>
        BlockOffset = 2
        BlockEnd = 'section end'
        EndOfTextClose = True
        NameFmt = '%s1 %s2'
        HighlightPos = cpAny
        CollapseFmt = '%s1 %s2'
      end
      item
        DisplayName = 'labeled reg end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 512
          end>
        BlockOffset = 3
        HighlightPos = cpAny
      end
      item
        DisplayName = 'labeled reg start (cancel)'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            CondType = tcNotEqual
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'labeled reg start'
        BlockName = 'section start'
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'alphabetic'
              'alphabetic-lower'
              'alphabetic-upper'
              'alphanumeric'
              'alphanumeric-edited'
              'author'
              'code-set'
              'comp'
              'comp-1'
              'comp-2'
              'comp-3'
              'comp-4'
              'computational'
              'computational-1'
              'computational-2'
              'computational-3'
              'computational-4'
              'date'
              'date-compiled'
              'date-written'
              'day-of-week'
              'debug-item'
              'decimal-point'
              'display'
              'display-1'
              'end'
              'end-add'
              'end-call'
              'end-compute'
              'end-delete'
              'end-divide'
              'end-evaluate'
              'end-if'
              'end-multiply'
              'end-of-page'
              'end-perform'
              'end-read'
              'end-return'
              'end-rewrite'
              'end-search'
              'end-start'
              'end-string'
              'end-subtract'
              'end-unstring'
              'end-write'
              'file'
              'file-control'
              'high-value'
              'high-values'
              'input'
              'input-output'
              'i-o'
              'i-o-control'
              'linage'
              'linage-counter'
              'low-value'
              'low-values'
              'more-labels'
              'numeric'
              'numeric-edited'
              'object-computer'
              'packed-decimal'
              'program'
              'program-id'
              'return'
              'return-code'
              'security'
              'segment-limit'
              'shift-in'
              'shift-out'
              'sort'
              'sort-control'
              'sort-core-size'
              'sort-file-size'
              'sort-merge'
              'sort-message'
              'sort-mode-size'
              'sort-return'
              'source'
              'source-computer'
              'special-names'
              'standard'
              'standard-1'
              'standard-2'
              'when'
              'when-compiled'
              'working-storage'
              'write'
              'write-only')
            CondType = tcNotEqual
            TokenTypes = 4
          end
          item
            TokenTypes = 512
          end>
        BlockOffset = 1
        BlockEnd = 'labeled reg end'
        EndOfTextClose = True
        NameFmt = 'Region %s1'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'last labeled end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'section')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 3
        BlockEnd = 'labeled reg start'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'division end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'division')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end>
        BlockOffset = 3
        HighlightPos = cpAny
      end
      item
        DisplayName = 'division'
        ConditionList = <
          item
            TagList.Strings = (
              'division')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end>
        BlockOffset = 2
        BlockEnd = 'division end'
        EndOfTextClose = True
        NameFmt = '%s1 %s0'
        HighlightPos = cpAny
        CollapseFmt = '%s1 %s0'
      end
      item
        DisplayName = 'Section end division'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'division')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end>
        BlockOffset = 3
        BlockEnd = 'section start'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'when end'
        BlockName = 'when'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'when')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 2
        HighlightPos = cpAny
      end
      item
        DisplayName = 'when'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'when')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'when end'
        NameFmt = '%s1 %s0'
        HighlightPos = cpAny
        CollapseFmt = '%s1 %s0'
      end
      item
        DisplayName = 'declaratives end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'declaratives')
          end
          item
            TokenTypes = 256
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'declaratives'
        ConditionList = <
          item
            TagList.Strings = (
              'declaratives')
            TokenTypes = 4
          end
          item
            CondType = tcNotEqual
            TokenTypes = 256
          end>
        BlockEnd = 'declaratives end'
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'end'
      'Left margin')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'cbl'
    LexerName = 'Acu Cobol'
    SkipSpaces = False
    Notes.Strings = (
      'Last update 14.09.2005')
  end
  object SyntAnal12: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Std functions'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^c.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'access'
              'action'
              'advance'
              'allocatable'
              'allocate'
              'apostrophe'
              'assign'
              'assignment'
              'associate'
              'asynchronous'
              'backspace'
              'bind'
              'blank'
              'blockdata'
              'call'
              'case'
              'character'
              'class'
              'close'
              'common'
              'complex'
              'contains'
              'continue'
              'cycle'
              'data'
              'deallocate'
              'decimal'
              'default'
              'delim'
              'dimension'
              'direct'
              'do'
              'double'
              'doubleprecision'
              'dowhile'
              'else'
              'elseif'
              'elsewhere'
              'encoding'
              'end'
              'endassociate'
              'endblockdata'
              'enddo'
              'endfile'
              'endforall'
              'endfunction'
              'endif'
              'endinterface'
              'endmodule'
              'endprogram'
              'endselect'
              'endsubroutine'
              'endtype'
              'endwhere'
              'entry'
              'eor'
              'equivalence'
              'err'
              'errmsg'
              'exist'
              'exit'
              'external'
              'file'
              'flush'
              'fmt'
              'forall'
              'form'
              'format'
              'formatted'
              'function'
              'go'
              'goto'
              'id'
              'if'
              'implicit'
              'in'
              'include'
              'inout'
              'inquire'
              'integer'
              'intent'
              'interface'
              'intrinsic'
              'iolength'
              'iomsg'
              'iostat'
              'kind'
              'len'
              'logical'
              'module'
              'name'
              'named'
              'namelist'
              'nextrec'
              'nml'
              'none'
              'nullify'
              'number'
              'only'
              'open'
              'opened'
              'operator'
              'optional'
              'out'
              'pad'
              'parameter'
              'pass'
              'pause'
              'pending'
              'pointer'
              'pos'
              'position'
              'precision'
              'print'
              'private'
              'program'
              'protected'
              'public'
              'quote'
              'read'
              'readwrite'
              'real'
              'rec'
              'recl'
              'recursive'
              'result'
              'return'
              'rewind'
              'save'
              'select'
              'selectcase'
              'selecttype'
              'sequential'
              'sign'
              'size'
              'stat'
              'status'
              'stop'
              'stream'
              'subroutine'
              'target'
              'then'
              'to'
              'type'
              'unformatted'
              'unit'
              'use'
              'value'
              'volatile'
              'wait'
              'where'
              'while'
              'write')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'std functions'
        StyleName = 'Std functions'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abs'
              'achar'
              'acos'
              'acosd'
              'adjustl'
              'adjustr'
              'aimag'
              'aimax0'
              'aimin0'
              'aint'
              'ajmax0'
              'ajmin0'
              'akmax0'
              'akmin0'
              'all'
              'allocated'
              'alog'
              'alog10'
              'amax0'
              'amax1'
              'amin0'
              'amin1'
              'amod'
              'anint'
              'any'
              'asin'
              'asind'
              'associated'
              'atan'
              'atan2'
              'atan2d'
              'atand'
              'bit_size'
              'bitest'
              'bitl'
              'bitlr'
              'bitrl'
              'bjtest'
              'bktest'
              'break'
              'btest'
              'cabs'
              'ccos'
              'cdabs'
              'cdcos'
              'cdexp'
              'cdlog'
              'cdsin'
              'cdsqrt'
              'ceiling'
              'cexp'
              'char'
              'clog'
              'cmplx'
              'conjg'
              'cos'
              'cosd'
              'cosh'
              'count'
              'cpu_time'
              'cshift'
              'csin'
              'csqrt'
              'dabs'
              'dacos'
              'dacosd'
              'dasin'
              'dasind'
              'datan'
              'datan2'
              'datan2d'
              'datand'
              'date'
              'date_and_time'
              'dble'
              'dcmplx'
              'dconjg'
              'dcos'
              'dcosd'
              'dcosh'
              'dcotan'
              'ddim'
              'dexp'
              'dfloat'
              'dfloti'
              'dflotj'
              'dflotk'
              'digits'
              'dim'
              'dimag'
              'dint'
              'dlog'
              'dlog10'
              'dmax1'
              'dmin1'
              'dmod'
              'dnint'
              'dot_product'
              'dprod'
              'dreal'
              'dsign'
              'dsin'
              'dsind'
              'dsinh'
              'dsqrt'
              'dtan'
              'dtand'
              'dtanh'
              'eoshift'
              'epsilon'
              'errsns'
              'exp'
              'exponent'
              'float'
              'floati'
              'floatj'
              'floatk'
              'floor'
              'fraction'
              'free'
              'huge'
              'iabs'
              'iachar'
              'iand'
              'ibclr'
              'ibits'
              'ibset'
              'ichar'
              'idate'
              'idim'
              'idint'
              'idnint'
              'ieor'
              'ifix'
              'iiabs'
              'iiand'
              'iibclr'
              'iibits'
              'iibset'
              'iidim'
              'iidint'
              'iidnnt'
              'iieor'
              'iifix'
              'iint'
              'iior'
              'iiqint'
              'iiqnnt'
              'iishft'
              'iishftc'
              'iisign'
              'ilen'
              'imax0'
              'imax1'
              'imin0'
              'imin1'
              'imod'
              'index'
              'inint'
              'inot'
              'int'
              'int1'
              'int2'
              'int4'
              'int8'
              'ior'
              'iqint'
              'iqnint'
              'ishft'
              'ishftc'
              'isign'
              'isnan'
              'izext'
              'jiand'
              'jibclr'
              'jibits'
              'jibset'
              'jidim'
              'jidint'
              'jidnnt'
              'jieor'
              'jifix'
              'jint'
              'jior'
              'jiqint'
              'jiqnnt'
              'jishft'
              'jishftc'
              'jisign'
              'jmax0'
              'jmax1'
              'jmin0'
              'jmin1'
              'jmod'
              'jnint'
              'jnot'
              'jzext'
              'kiabs'
              'kiand'
              'kibclr'
              'kibits'
              'kibset'
              'kidim'
              'kidint'
              'kidnnt'
              'kieor'
              'kifix'
              'kind'
              'kint'
              'kior'
              'kishft'
              'kishftc'
              'kisign'
              'kmax0'
              'kmax1'
              'kmin0'
              'kmin1'
              'kmod'
              'knint'
              'knot'
              'kzext'
              'lbound'
              'leadz'
              'len'
              'len_trim'
              'lenlge'
              'lge'
              'lgt'
              'lle'
              'llt'
              'log'
              'log10'
              'logical'
              'lshift'
              'malloc'
              'matmul'
              'max'
              'max0'
              'max1'
              'maxexponent'
              'maxloc'
              'maxval'
              'merge'
              'min'
              'min0'
              'min1'
              'minexponent'
              'minloc'
              'minval'
              'mod'
              'modulo'
              'mvbits'
              'nearest'
              'nint'
              'not'
              'number_of_processors'
              'nworkers'
              'pack'
              'popcnt'
              'poppar'
              'precision'
              'present'
              'product'
              'radix'
              'random'
              'random_number'
              'random_seed'
              'range'
              'real'
              'repeat'
              'reshape'
              'rrspacing'
              'rshift'
              'scale'
              'scan'
              'secnds'
              'selected_int_kind'
              'selected_real_kind'
              'set_exponent'
              'shape'
              'sign'
              'sin'
              'sind'
              'sinh'
              'size'
              'sizeof'
              'sngl'
              'snglq'
              'spacing'
              'spread'
              'sqrt'
              'sum'
              'system_clock'
              'tan'
              'tand'
              'tanh'
              'tiny'
              'transfer'
              'transpose'
              'trim'
              'ubound'
              'unpack'
              'verify')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'IF'
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
          end>
        BlockEnd = 'endif'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'endif'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endif')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'f for f90 f95 f2k'
    LexerName = 'Fortran'
  end
  object SyntAnal13: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(\*|&&).*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]&]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'accept'
              'activate'
              'add'
              'all'
              'alter'
              'alternate'
              'ansi'
              'aplabout'
              'app'
              'append'
              'array'
              'as'
              'assist'
              'autosave'
              'average'
              'bar'
              'begin'
              'bell'
              'blank'
              'blink'
              'blocksize'
              'border'
              'box'
              'browse'
              'brstatus'
              'build'
              'calculate'
              'call'
              'cancel'
              'carry'
              'case'
              'cd'
              'century'
              'change'
              'chdir'
              'class'
              'classlib'
              'clear'
              'clock'
              'close'
              'collate'
              'color'
              'command'
              'compatible'
              'compile'
              'confirm'
              'connection'
              'connections'
              'console'
              'continue'
              'copy'
              'count'
              'cpcompile'
              'cpdialog'
              'create'
              'currency'
              'cursor'
              'data'
              'database'
              'databases'
              'datasession'
              'date'
              'deactivate'
              'debug'
              'decimals'
              'declare'
              'default'
              'define'
              'delete'
              'deleted'
              'delimiters'
              'development'
              'device'
              'dimension'
              'dir'
              'directory'
              'display'
              'dlls'
              'do'
              'dohistory'
              'echo'
              'edit'
              'eject'
              'else'
              'end'
              'endcase'
              'enddefine'
              'enddo'
              'endfor'
              'endfunc'
              'endif'
              'endprintjob'
              'endproc'
              'endscan'
              'endwith'
              'erase'
              'error'
              'escape'
              'events'
              'exact'
              'exclusive'
              'exe'
              'exit'
              'export'
              'extended'
              'external'
              'fdow'
              'fields'
              'file'
              'filer'
              'files'
              'filter'
              'find'
              'fixed'
              'flush'
              'for'
              'form'
              'format'
              'free'
              'from'
              'fullpath'
              'function'
              'fweek'
              'gather'
              'general'
              'get'
              'getexpr'
              'gets'
              'go'
              'goto'
              'headings'
              'help'
              'helpfilter'
              'hide'
              'hours'
              'id'
              'if'
              'import'
              'index'
              'indexes'
              'input'
              'insert'
              'intensity'
              'join'
              'key'
              'keyboard'
              'keycomp'
              'label'
              'library'
              'list'
              'load'
              'local'
              'locate'
              'lock'
              'logerrors'
              'lparameters'
              'macdesktop'
              'machelp'
              'mackey'
              'macro'
              'macros'
              'margin'
              'mark'
              'md'
              'memo'
              'memory'
              'memowidth'
              'menu'
              'menus'
              'message'
              'mkdir'
              'modify'
              'module'
              'mouse'
              'move'
              'multilocks'
              'near'
              'nocptrans'
              'note'
              'notify'
              'null'
              'object'
              'objects'
              'odometer'
              'of'
              'off'
              'oleobject'
              'on'
              'open'
              'optimize'
              'or'
              'order'
              'otherwise'
              'pack'
              'pad'
              'page'
              'palette'
              'parameters'
              'path'
              'pdsetup'
              'play'
              'point'
              'pop'
              'popup'
              'popups'
              'printer'
              'printjob'
              'private'
              'procedure'
              'procedures'
              'project'
              'public'
              'push'
              'query'
              'quit'
              'rd'
              'read'
              'readborder'
              'readerror'
              'recall'
              'refresh'
              'regional'
              'reindex'
              'relation'
              'release'
              'remove'
              'rename'
              'replace'
              'report'
              'reprocess'
              'resource'
              'restore'
              'resume'
              'retry'
              'return'
              'rmdir'
              'rollback'
              'run'
              'runscript'
              's'
              'safety'
              'save'
              'scan'
              'scatter'
              'scheme'
              'scoreboard'
              'screen'
              'scroll'
              'seconds'
              'seek'
              'select'
              'selection'
              'separator'
              'set'
              'shadows'
              'show'
              'shutdown'
              'size'
              'skip'
              'sort'
              'space'
              'sql'
              'status'
              'step'
              'sticky'
              'store'
              'string$'
              'structure'
              'sum'
              'suspend'
              'sysformats'
              'sysmenu'
              'table'
              'tables'
              'tag'
              'talk'
              'textmerge'
              'to'
              'topic'
              'total'
              'transaction'
              'trbetween'
              'trigger'
              'type'
              'typeahead'
              'udfparms'
              'unique'
              'unlock'
              'update'
              'use'
              'validate'
              'view'
              'views'
              'volume'
              'wait'
              'while'
              'window'
              'windows'
              'with'
              'xcmdfile'
              'zap'
              'zoom')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    LexerName = 'FoxPro'
  end
  object SyntAnal14: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Serv info'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = cl3DDkShadow
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clInfoBk
        FormatType = ftColor
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '%.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Reserved'
        StyleName = 'Reserved word'
        TokenType = 2
        Expression = '\\[a-z]+'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'serv start'
        StyleName = 'Serv info'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'serv end'
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
      end
      item
        DisplayName = 'serv end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'tex sty aux toc idx'
    LexerName = 'Latex'
  end
  object SyntAnal15: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '(?s)\(\*.*?(\*\)|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'array'
              'asm'
              'begin'
              'boolean'
              'by'
              'cardinal'
              'case'
              'char'
              'class'
              'const'
              'definition'
              'destroy'
              'div'
              'do'
              'else'
              'elsif'
              'end'
              'exit'
              'export'
              'for'
              'foreign'
              'from'
              'if'
              'implementation'
              'import'
              'inherit'
              'init'
              'inline'
              'integer'
              'longcard'
              'longint'
              'longreal'
              'loop'
              'mod'
              'module'
              'nil'
              'of'
              'pointer'
              'procedure'
              'real'
              'record'
              'repeat'
              'return'
              'set'
              'then'
              'to'
              'type'
              'until'
              'var'
              'while'
              'with')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Class start'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'class'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'class end'
        NameFmt = '%s1 %s0'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'class end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        SameIdent = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'Asm'
        StartExpression = '(?i)asm'#13#10
        EndExpression = '(?i)end'#13#10
        SyntAnalyzer = SyntAnalyzer13
      end>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    LexerName = 'Modula 2'
  end
  object SyntAnal16: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16119285
        FormatType = ftColor
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15987689
      end
      item
        DisplayName = 'Code block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15856098
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Code border'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindow
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clBlack
      end
      item
        DisplayName = 'HTML'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Verdana'
        Font.Style = []
        FormatType = ftCustomFont
      end>
    TokenRules = <
      item
        DisplayName = 'Code block start'
        StyleName = 'Code border'
        TokenType = 9
        Expression = '<\?(php)?'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Code block end'
        StyleName = 'Code border'
        TokenType = 10
        Expression = '\?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)"(\\"|.)*?"'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'string 2'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 2
        Expression = '\$\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[!/\+\-\*:=<>&/\|\^~]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'break'
              'case'
              'class'
              'continue'
              'default'
              'define'
              'defined'
              'do'
              'echo'
              'else'
              'elseif'
              'endfor'
              'endif'
              'endswitch'
              'endwhile'
              'exit'
              'extends'
              'for'
              'function'
              'gettype'
              'global'
              'if'
              'include'
              'int'
              'isset'
              'old_function'
              'print'
              'pval'
              'require'
              'return'
              'settype'
              'static'
              'string'
              'switch'
              'var'
              'void'
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Code block start'
        StyleName = 'Code block'
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Code block end'
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Code block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'HTML'
        StyleName = 'HTML'
        StartExpression = '\?>'#13#10
        EndExpression = '<\?'#13#10
        SyntAnalyzer = SyntAnalyzer9
        FromTextBegin = True
      end>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Code Start'
      'Code End')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'php'
    LexerName = 'PHP'
  end
  object SyntAnal17: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\(\*.*?(\*\)|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'array'
              'begin'
              'case'
              'const'
              'div'
              'do'
              'else'
              'elsif'
              'end'
              'exit'
              'if'
              'import'
              'in'
              'is'
              'loop'
              'mod'
              'module'
              'nil'
              'of'
              'or'
              'pointer'
              'procedure'
              'record'
              'repeat'
              'return'
              'then'
              'to'
              'type'
              'until'
              'var'
              'while'
              'with')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'procedure'
        ConditionList = <
          item
            TagList.Strings = (
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              'begin'
              'if'
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'proc end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'proc end'
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    LexerName = 'Oberon'
  end
  object SyntAnal19: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16777183
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Section'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15658734
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'constant'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^;.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        TokenType = 3
        Expression = '[;"]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Section'
        StyleName = 'Section'
        TokenType = 9
        Expression = '\[.*?\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        Enabled = False
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Constant'
        StyleName = 'constant'
        TokenType = 8
        Expression = '\{.*?\}'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keys'
        StyleName = 'Reserved word'
        BlockName = 'string start'
        NotParent = True
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'adminprivilegesrequired'
              'allowcancelduringinstall'
              'allownoicons'
              'allowrootdirectory'
              'allowuncpath'
              'alwayscreateuninstallicon'
              'alwaysrestart'
              'alwaysshowcomponentslist'
              'alwaysshowdironreadypage'
              'alwaysshowgrouponreadypage'
              'alwaysusepersonalgroup'
              'appcomments'
              'appcontact'
              'appcopyright'
              'appenddefaultdirname'
              'appenddefaultgroupname'
              'appid'
              'appmodifypath'
              'appmutex'
              'appname'
              'apppublisher'
              'apppublisherurl'
              'appreadmefile'
              'appsupporturl'
              'appupdatesurl'
              'appvername'
              'appversion'
              'attribs'
              'backcolor'
              'backcolor2'
              'backcolordirection'
              'backsolid'
              'changesassociations'
              'changesenvironment'
              'components'
              'compression'
              'createappdir'
              'createuninstallregkey'
              'defaultdirname'
              'defaultgroupname'
              'defaultuserinfoname'
              'defaultuserinfoorg'
              'defaultuserinfoserial'
              'description'
              'destdir'
              'direxistswarning'
              'disableappenddir'
              'disabledirpage'
              'disablefinishedpage'
              'disableprogramgrouppage'
              'disablereadymemo'
              'disablereadypage'
              'disablestartupprompt'
              'dontmergeduplicatefiles'
              'enabledirdoesntexistwarning'
              'extradiskspacerequired'
              'filename'
              'flags'
              'flatcomponentslist'
              'groupdescription'
              'infoafterfile'
              'infobeforefile'
              'key'
              'languagedetectionmethod'
              'languages'
              'licensefile'
              'messagesfile'
              'minversion'
              'name'
              'onlybelowversion'
              'password'
              'permissions'
              'privilegesrequired'
              'restartifneededbyrun'
              'section'
              'setupiconfile'
              'showcomponentsizes'
              'showlanguagedialog'
              'showtaskstreelines'
              'solidcompression'
              'source'
              'string'
              'tasks'
              'timestamprounding'
              'timestampsinutc'
              'touchdate'
              'touchtime'
              'type'
              'types'
              'uninstallable'
              'uninstalldisplayicon'
              'uninstalldisplayname'
              'uninstallfilesdir'
              'uninstalliconfile'
              'uninstalliconname'
              'uninstalllogmode'
              'uninstallrestartcomputer'
              'uninstallstyle'
              'updateuninstalllogappname'
              'usepreviousappdir'
              'usepreviousgroup'
              'useprevioussetuptype'
              'useprevioustasks'
              'useprevioususerinfo'
              'userinfopage'
              'windowresizable'
              'windowshowcaption'
              'windowstartmaximized'
              'windowvisible'
              'wizardimagebackcolor'
              'wizardimagefile'
              'wizardimagestretch'
              'wizardsmallimagebackcolor'
              'wizardsmallimagefile'
              'wizardstyle')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Section end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Section begin'
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Section end'
        EndOfTextClose = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'string end'
        BlockName = 'string start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '"')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'string start'
        StyleName = 'String'
        BlockName = 'string start'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '"')
            TokenTypes = 8
          end>
        BlockEnd = 'string end'
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'Code'
        StartExpression = '(?i)\[code\]'#13#10
        SyntAnalyzer = SyntAnal20
        ToTextEnd = True
      end>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Constant'
      'Section')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'iss'
    LexerName = 'INNO setup'
  end
  object SyntAnal20: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clRed
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clInactiveCaptionText
        FormatType = ftColor
      end
      item
        DisplayName = 'Current function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16769505
        FormatType = ftBackGround
      end>
    TokenRules = <
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\(\*.*?(\*\)|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\{.*?(\}|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\$[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '\#(\d+|\$[\da-f]+)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'and'
              'array'
              'as'
              'asm'
              'begin'
              'case'
              'class'
              'const'
              'constructor'
              'contains'
              'destructor'
              'dispinterface'
              'div'
              'do'
              'downto'
              'dynamic'
              'else'
              'end'
              'except'
              'exports'
              'file'
              'finalization'
              'finally'
              'for'
              'function'
              'goto'
              'if'
              'implementation'
              'in'
              'index'
              'inherited'
              'initialization'
              'inline'
              'interface'
              'is'
              'label'
              'library'
              'mod'
              'nil'
              'not'
              'object'
              'of'
              'or'
              'out'
              'override'
              'package'
              'packed'
              'pascal'
              'private'
              'procedure'
              'program'
              'property'
              'protected'
              'public'
              'published'
              'raise'
              'read'
              'record'
              'register'
              'repeat'
              'requires'
              'resourcestring'
              'safecall'
              'set'
              'shl'
              'shr'
              'stdcall'
              'string'
              'then'
              'threadvar'
              'to'
              'try'
              'type'
              'unit'
              'until'
              'uses'
              'var'
              'virtual'
              'while'
              'with'
              'write'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'begin'
              'case'
              'try')
            TokenTypes = 4
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'asm'
        ConditionList = <
          item
            TagList.Strings = (
              'asm')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        Highlight = True
        InvertColors = True
        DisplayInTree = False
        DynHighlight = dhRangeNoBound
        HighlightPos = cpAny
      end
      item
        DisplayName = 'until'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'until')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'repeat'
        ConditionList = <
          item
            TagList.Strings = (
              'repeat')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'until'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '('
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTag
        DynSelectMin = True
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1021
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Function separator'
        StyleName = 'Function separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Single function'
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            CondType = tcNotEqual
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = 'End of function'
        NameFmt = '%s2 %s1'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End of function'
        BlockName = 'Single function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <
      item
        Name = 'be'
        Description = 'begin end'
        Code.Strings = (
          'begin'
          '  | '
          'end;')
      end
      item
        Name = 'arrayd'
        Description = 'array declaration (var)'
        Code.Strings = (
          'array[0..|] of ;')
      end
      item
        Name = 'arrayc'
        Description = 'array declaration (const)'
        Code.Strings = (
          'array[0..|] of = ();')
      end
      item
        Name = 'cases'
        Description = 'case statement'
        Code.Strings = (
          'case | of'
          '  : ;'
          '  : ;'
          'end;')
      end
      item
        Name = 'casee'
        Description = 'case statement (with else)'
        Code.Strings = (
          'case | of'
          '  : ;'
          '  : ;'
          'else ;'
          'end;')
      end
      item
        Name = 'classf'
        Description = 'class declaration (all parts)'
        Code.Strings = (
          'T| = class(T)'
          'private'
          ''
          'protected'
          ''
          'public'
          ''
          'published'
          ''
          'end;')
      end
      item
        Name = 'classd'
        Description = 'class declaration (no parts)'
        Code.Strings = (
          'T| = class(T)'
          ''
          'end;')
      end
      item
        Name = 'classc'
        Description = 'class declaration (with Create/Destroy overrides)'
        Code.Strings = (
          'T| = class(T)'
          'private'
          ''
          'protected'
          ''
          'public'
          '  constructor Create; override;'
          '  destructor Destroy; override;'
          'published'
          ''
          'end;')
      end
      item
        Name = 'fors'
        Description = 'for (no begin/end)'
        Code.Strings = (
          'for | :=  to  do')
      end
      item
        Name = 'forb'
        Description = 'for statement'
        Code.Strings = (
          'for | :=  to  do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'function'
        Description = 'function declaration'
        Code.Strings = (
          'function |(): ;'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'ifs'
        Description = 'if (no begin/end)'
        Code.Strings = (
          'if | then')
      end
      item
        Name = 'ifb'
        Description = 'if statement'
        Code.Strings = (
          'if | then'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'ife'
        Description = 'if then (no begin/end) else (no begin/end)'
        Code.Strings = (
          'if | then'
          ''
          'else')
      end
      item
        Name = 'ifeb'
        Description = 'if then else'
        Code.Strings = (
          'if | then'
          'begin'
          ''
          'end'
          'else'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'procedure'
        Description = 'procedure declaration'
        Code.Strings = (
          'procedure |();'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'trye'
        Description = 'try except'
        Code.Strings = (
          'try'
          '  |'
          'except'
          ''
          'end;')
      end
      item
        Name = 'tryf'
        Description = 'try finally'
        Code.Strings = (
          'try'
          '  |'
          'finally'
          ''
          'end;')
      end
      item
        Name = 'trycf'
        Description = 'try finally (with Create/Free)'
        Code.Strings = (
          '|variable := typename.Create;'
          'try'
          ''
          'finally'
          '  variable.Free;'
          'end;')
      end
      item
        Name = 'whileb'
        Description = 'while statement'
        Code.Strings = (
          'while | do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'whiles'
        Description = 'while (no begin)'
        Code.Strings = (
          'while | do')
      end
      item
        Name = 'withb'
        Description = 'with statement'
        Code.Strings = (
          'with | do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'withs'
        Description = 'with (no begin)'
        Code.Strings = (
          'with | do')
      end
      item
        Name = 'prop'
        Description = 'property'
        Code.Strings = (
          'property | read  write;')
      end>
    SubAnalyzers = <>
    SampleText.Strings = (
      '{Syntax highlighting}'
      'procedure Button1Click(Sender: TObject);'
      'var'
      ' Number: integer;'
      ' FloatNumber: double;'
      'begin'
      ' Number := 123;  // View integer number style'
      
        ' Form.Caprion := '#39'This Number is '#39' + IntToStr(Number); // View s' +
        'tring style'
      ' Inc(Number, $1FA7); // View HEX style'
      ' {Assembler style}'
      ' asm'
      '   MOV  AX, 1234H'
      '   MOV Number, AX'
      ' end;'
      'end;')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    LexerName = 'Pascal script'
    Internal = True
  end
  object SyntAnal3: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Empty line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clTeal
      end
      item
        DisplayName = 'Lines with text'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clInfoBk
      end>
    TokenRules = <
      item
        DisplayName = 'Empty line'
        StyleName = 'Empty line'
        Expression = '^\s*?\n'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Non empty'
        TokenType = 1
        Expression = '^.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Non Empty start'
        StyleName = 'Lines with text'
        BlockName = 'Non Empty start'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Non Empty end'
        Highlight = True
        InvertColors = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Non Empty end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Empty'
      'Text')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    LexerName = 'Empty lines'
    SkipSpaces = False
    Internal = True
  end
  object SyntAnal21: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'operator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BorderTypeBottom = blDot
        BorderColorBottom = clRed
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^\#.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Param'
        StyleName = 'Param'
        TokenType = 4
        Expression = '".*?"'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'operator'
        StyleName = 'operator'
        TokenType = 2
        Expression = '!\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbols'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\|&\$=]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'variable'
        TokenType = 5
        Expression = '^\s*?\w*\s*?='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Block start'
        ConditionList = <
          item
            TagList.Strings = (
              '!IF'
              '!IFDEF'
              '!IFNDEF')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Block end'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '!ENDIF')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Variable'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    LexerName = 'Make files'
  end
  object SyntAnal23: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Control'#39's ID'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsUnderline]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]+L*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        BlockName = 'Resource'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        TokenType = 2
        Expression = '\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key Words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ACCELERATORS'
              'BEGIN'
              'BITMAP'
              'CURSOR'
              'DESIGNINFO'
              'DIALOG'
              'DIALOGEX'
              'END'
              'ICON'
              'LANGUAGE'
              'MENU'
              'REGISTRY'
              'STRINGTABLE'
              'TEXTINCLUDE'
              'TOOLBAR'
              'TYPELIB'
              'VERSIONINFO')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Menu & Toolbar controls'
        StyleName = 'Control'#39's ID'
        BlockName = 'Resource'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'BUTTON'
              'MENUITEM'
              'POPUP'
              'SEPARATOR')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Dialog controls'
        StyleName = 'Control'#39's ID'
        BlockName = 'Resource'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'CAPTION'
              'COMBOBOX'
              'CONTROL'
              'CTEXT'
              'DEFPUSHBUTTON'
              'EDITTEXT'
              'FONT'
              'GROUPBOX'
              'ICON'
              'LISTBOX'
              'LTEXT'
              'PUSHBUTTON'
              'STYLE')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'BEGIN'
        ConditionList = <
          item
            TagList.Strings = (
              'BEGIN')
            TokenTypes = 4
          end>
        BlockEnd = 'END'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'END'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'END')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'String table'
        ConditionList = <
          item
            TagList.Strings = (
              'STRINGTABLE')
            TokenTypes = 4
          end>
        BlockEnd = 'String table end'
        NameFmt = '%e2 ...'
        GroupFmt = '%s0'
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end
      item
        DisplayName = 'String table end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'END')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Resource'
        ConditionList = <
          item
            TagList.Strings = (
              'ACCELERATORS'
              'DESIGNINFO'
              'DIALOG'
              'DIALOGEX'
              'MENU'
              'TEXTINCLUDE'
              'TOOLBAR'
              'VERSIONINFO')
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'Resource end'
        NameFmt = '%s1'
        GroupFmt = '%s0'
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s1'
      end
      item
        DisplayName = 'Resource end'
        BlockName = 'Resource'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'END')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '#if'
        ConditionList = <
          item
            TagList.Strings = (
              '\#if')
            CondType = tcMask
            TokenTypes = 512
          end>
        BlockEnd = '#endif'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end
      item
        DisplayName = '#endif'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '\#endif')
            CondType = tcMask
            TokenTypes = 512
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'BITMAP begin'
        BlockName = 'Resource'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'BITMAP'
              'CURSOR'
              'ICON'
              'REGISTRY'
              'TYPELIB')
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end>
        BlockOffset = 1
        BlockEnd = 'BITMAP end'
        NameFmt = '%s1  ::  %s-1'
        GroupFmt = '%s0'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'BITMAP end'
        BlockName = 'Resource'
        NotParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'BITMAP'
              'CURSOR'
              'ICON'
              'REGISTRY'
              'TYPELIB')
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end>
        BlockOffset = -1
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'Rc'
    LexerName = 'Resource files'
  end
  object SyntAnal24: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Interface section'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlight
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 13303807
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Implemenation Section'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 14811095
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clLime
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 65408
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clSilver
        BorderTypeTop = blSolid
        BorderColorTop = clSilver
        BorderTypeRight = blSolid
        BorderColorRight = clSilver
        BorderTypeBottom = blSolid
        BorderColorBottom = clSilver
      end
      item
        DisplayName = 'Current function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15269886
        FormatType = ftBackGround
        MultiLineBorder = True
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16772341
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Search Match'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindow
        Font.Height = -16
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clBlack
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Base types'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor 1'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\{\$.*?\}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor 2'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\(\*\$.*?\*\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\(\*.*?(\*\)|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\{.*?(\}|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\$[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '\#(\d+|\$[\da-f]+)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'and'
              'array'
              'begin'
              'break'
              'case'
              'class'
              'const'
              'constructor'
              'continue'
              'do'
              'downto'
              'else'
              'end'
              'enum'
              'except'
              'exit'
              'finally'
              'for'
              'forward'
              'function'
              'goto'
              'halt'
              'if'
              'inherited'
              'label'
              'mod'
              'namespace'
              'not'
              'of'
              'on'
              'or'
              'print'
              'private'
              'procedure'
              'program'
              'property'
              'public'
              'raise'
              'record'
              'repeat'
              'shl'
              'shr'
              'string'
              'then'
              'to'
              'try'
              'type'
              'until'
              'uses'
              'var'
              'while'
              'with'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Base types'
        StyleName = 'Base types'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'Boolean'
              'Byte'
              'Cardinal'
              'Double'
              'Int64'
              'Integer'
              'ShortInt'
              'SmallInt'
              'String'
              'Variant'
              'Word')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'program'
        ConditionList = <
          item
            TagList.Strings = (
              'program'
              'unit')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockEnd = 'Unit end'
        EndOfTextClose = True
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1'
      end
      item
        DisplayName = 'begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'begin'
              'case'
              'try')
            TokenTypes = 4
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'class'
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            CondType = tcNotEqual
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'class'
              'dispinterface'
              'interface'
              'record')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 3
        BlockOffset = 3
        BlockEnd = 'End'
        NameFmt = '%s1 %s3'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s1 %s3'
      end
      item
        DisplayName = 'Single function'
        StyleName = 'Current function'
        BlockName = 'class'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            CondType = tcNotEqual
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = 'End of function'
        Highlight = True
        NameFmt = '%s2 %s1'
        GroupFmt = 'Functions'
        DynHighlight = dhRange
        HighlightPos = cpRange
        DrawStaple = True
        CollapseFmt = '%s2 %s1'
      end
      item
        DisplayName = 'End of function'
        BlockName = 'Single function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'forward decl'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'forward')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Single function'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function of class'
        StyleName = 'Current function'
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockOffset = 2
        BlockEnd = 'End of class function'
        Highlight = True
        NameFmt = '%s-1'
        GroupFmt = 'class %s1'
        DynHighlight = dhRange
        HighlightPos = cpRange
        DrawStaple = True
        CollapseFmt = '%s2 %s1%s0%s-1'
      end
      item
        DisplayName = 'End of class function'
        BlockName = 'function of class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Internal function'
        BlockName = 'function of class'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockEnd = 'End of internal'
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1'
      end
      item
        DisplayName = 'End of internal'
        BlockName = 'Internal function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'until'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'until')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'repeat'
        ConditionList = <
          item
            TagList.Strings = (
              'repeat')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'until'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = 'repeat ...'
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '{ ... }'
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Unit end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 2
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Function separator'
        StyleName = 'Function separator'
        BlockName = 'class'
        NotParent = True
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '{$ifdef}'
        Enabled = False
        ConditionList = <
          item
            TagList.Strings = (
              '\{\$if[n]?def')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        BlockEnd = '{$endif}'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end
      item
        DisplayName = '{$endif}'
        Enabled = False
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '{$endif}')
            TokenTypes = 512
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <
      item
        Name = 'be'
        Description = 'begin end'
        Code.Strings = (
          'begin'
          '  <caret>'
          'end;')
        Advanced = True
      end
      item
        Name = 'arrayd'
        Description = 'array declaration (var)'
        Code.Strings = (
          'array[0..|] of ;')
      end
      item
        Name = 'arrayc'
        Description = 'array declaration (const)'
        Code.Strings = (
          'array[0..|] of = ();')
      end
      item
        Name = 'cases'
        Description = 'case statement'
        Code.Strings = (
          'case | of'
          '  : ;'
          '  : ;'
          'end;')
      end
      item
        Name = 'casee'
        Description = 'case statement (with else)'
        Code.Strings = (
          'case | of'
          '  : ;'
          '  : ;'
          'else ;'
          'end;')
      end
      item
        Name = 'classf'
        Description = 'class declaration (all parts)'
        Code.Strings = (
          'T| = class(T)'
          'private'
          ''
          'protected'
          ''
          'public'
          ''
          'published'
          ''
          'end;')
      end
      item
        Name = 'classd'
        Description = 'class declaration (no parts)'
        Code.Strings = (
          'T| = class(T)'
          ''
          'end;')
      end
      item
        Name = 'classc'
        Description = 'class declaration (with Create/Destroy overrides)'
        Code.Strings = (
          'T| = class(T)'
          'private'
          ''
          'protected'
          ''
          'public'
          '  constructor Create; override;'
          '  destructor Destroy; override;'
          'published'
          ''
          'end;')
      end
      item
        Name = 'fors'
        Description = 'for (no begin/end)'
        Code.Strings = (
          'for | :=  to  do')
      end
      item
        Name = 'forb'
        Description = 'for statement'
        Code.Strings = (
          'for | :=  to  do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'function'
        Description = 'function declaration'
        Code.Strings = (
          'function |(): ;'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'ifs'
        Description = 'if (no begin/end)'
        Code.Strings = (
          'if | then')
      end
      item
        Name = 'ifb'
        Description = 'if statement'
        Code.Strings = (
          'if | then'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'ife'
        Description = 'if then (no begin/end) else (no begin/end)'
        Code.Strings = (
          'if | then'
          ''
          'else')
      end
      item
        Name = 'ifeb'
        Description = 'if then else'
        Code.Strings = (
          'if | then'
          'begin'
          ''
          'end'
          'else'
          'begin'
          ''
          'end;'
          '')
      end
      item
        Name = 'procedure'
        Description = 'procedure declaration'
        Code.Strings = (
          'procedure |();'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'trye'
        Description = 'try except'
        Code.Strings = (
          'try'
          '  |'
          'except'
          ''
          'end;')
      end
      item
        Name = 'tryf'
        Description = 'try finally'
        Code.Strings = (
          'try'
          '  |'
          'finally'
          ''
          'end;')
      end
      item
        Name = 'trycf'
        Description = 'try finally (with Create/Free)'
        Code.Strings = (
          '|variable := typename.Create;'
          'try'
          ''
          'finally'
          '  variable.Free;'
          'end;')
      end
      item
        Name = 'whileb'
        Description = 'while statement'
        Code.Strings = (
          'while | do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'whiles'
        Description = 'while (no begin)'
        Code.Strings = (
          'while | do')
      end
      item
        Name = 'withb'
        Description = 'with statement'
        Code.Strings = (
          'with | do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'withs'
        Description = 'with (no begin)'
        Code.Strings = (
          'with | do')
      end
      item
        Name = 'prop'
        Description = 'property'
        Code.Strings = (
          'property | read  write;')
      end>
    SubAnalyzers = <>
    SampleText.Strings = (
      '{Syntax highlighting}'
      'namespace Shapes'
      '  type'
      '    TPoint = class(TObject)'
      '       X, Y: Integer;'
      '       constructor Create(X, Y: Integer);'
      '       begin'
      '         inherited Create;'
      '         Self.X := X;'
      '         Self.Y := Y;'
      '       end;'
      '    end;'
      ''
      '    TCircle = class(TPoint)'
      '      R: Integer;'
      '      constructor Create(X, Y, R);'
      '    end;'
      '    '
      '  constructor TCircle.Create(X, Y, R);'
      '  begin'
      '    inherited Create(X, Y);'
      '    Self.R := R;'
      '  end;'
      ''
      'end;'
      ''
      'var'
      '  Point = Shapes.TPoint.Create(3, 5);'
      '  Circle = Shapes.TCircle.Create(3, 5, 7);'
      'begin'
      '  print Point, Circle;'
      'end.'
      '')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    SearchMatchStyle = 'Search Match'
    CurrentLineStyle = 'Current Line'
    DefaultStyleName = 'Default'
    Extentions = 'pas'
    LexerName = 'PAX Pascal'
    Internal = True
  end
  object SyntAnal25: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Rules'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        ReadOnly = True
      end
      item
        DisplayName = 'Quoted terminals'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Terminals'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^!.*$'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 2
        Expression = '".*?"'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Quoted terminals'
        StyleName = 'Quoted terminals'
        TokenType = 3
        Expression = #39'.*?'#39#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Terminals'
        StyleName = 'Terminals'
        TokenType = 3
        Expression = '\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Rule assign'
        StyleName = 'Symbol'
        TokenType = 5
        Expression = '::='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Rule name'
        StyleName = 'Rules'
        TokenType = 4
        Expression = '<.*?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        Expression = '[\|=]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Rule end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 32
          end>
        BlockOffset = 2
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Rule start'
        ConditionList = <
          item
            TokenTypes = 32
          end
          item
            TokenTypes = 16
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'Rule end'
        EndOfTextClose = True
        GroupFmt = 'Rules'
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'String'
      'Terminals'
      'Rule'
      'Rule assign'
      'Symbol')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'grm'
    LexerName = 'Gold grammar'
  end
  object SyntAnal26: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Rule'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Term'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'TermNoCase'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Token type'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Rule Ident'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        Expression = '//.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        Expression = '(?s)/\*.*?(\*/|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Term'
        StyleName = 'Term'
        TokenType = 1
        Expression = '".*?"'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'TermNoCase'
        StyleName = 'TermNoCase'
        TokenType = 2
        Expression = #39'.*?'#39#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Token rule'
        StyleName = 'Token type'
        TokenType = 7
        Expression = '<.*?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Rule'
        StyleName = 'Rule'
        TokenType = 3
        Expression = '\w+'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Equal'
        StyleName = 'Symbol'
        TokenType = 4
        Expression = '='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Or'
        StyleName = 'Symbol'
        TokenType = 5
        Expression = '\|'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Rule stop'
        StyleName = 'Symbol'
        TokenType = 6
        Expression = ';'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Rule detect'
        StyleName = 'Rule Ident'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 16
          end
          item
            TokenTypes = 8
          end>
        IdentIndex = 1
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Comment'
      'Term'
      'TermNoCase'
      'Rule'
      'Equal'
      'Or'
      'Stop'
      'Token rule ref.')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    LexerName = 'My internal gramma old'
    Internal = True
    Left = 140
    Top = 160
  end
  object SyntAnal28: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Rule'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Term'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'TermNoCase'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Token type'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Rule Ident'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        Expression = '//.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        Expression = '(?s)/\*.*?(\*/|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Term'
        StyleName = 'Term'
        TokenType = 1
        Expression = '".*?"'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'TermNoCase'
        StyleName = 'TermNoCase'
        TokenType = 2
        Expression = #39'.*?'#39#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Token rule'
        StyleName = 'Token type'
        TokenType = 7
        Expression = '<.*?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Rule'
        StyleName = 'Rule'
        TokenType = 3
        Expression = '\w+'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Equal'
        StyleName = 'Symbol'
        TokenType = 4
        Expression = '='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Or'
        StyleName = 'Symbol'
        TokenType = 5
        Expression = '\|'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Rule stop'
        StyleName = 'Symbol'
        TokenType = 6
        Expression = ';'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Rule detect'
        StyleName = 'Rule Ident'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 16
          end
          item
            TokenTypes = 8
          end>
        IdentIndex = 1
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Comment'
      'Term'
      'TermNoCase'
      'Rule'
      'Equal'
      'Or'
      'Stop'
      'Token rule ref.')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'zg'
    LexerName = 'My internal gramma'
    Internal = True
    Left = 140
    Top = 160
  end
  object SyntAnal2: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Compiler Directive'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Specifications'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Line Indent'
        Enabled = False
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 14211288
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Types'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'C keywords'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = cl3DLight
        FormatType = ftColor
        BorderTypeLeft = blDot
        BorderColorLeft = clMaroon
        BorderTypeTop = blDot
        BorderColorTop = clMaroon
        BorderTypeRight = blDot
        BorderColorRight = clMaroon
        BorderTypeBottom = blDot
        BorderColorBottom = clMaroon
      end
      item
        DisplayName = 'C background'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 12910561
        FormatType = ftBackGround
      end
      item
        DisplayName = 'D background'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15528703
        FormatType = ftBackGround
      end
      item
        DisplayName = 'D keywords'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'H keywords'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = '%name'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'P background'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16769021
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Comment background'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 14548991
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Free syntax'
        Enabled = False
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clLime
        FormatType = ftBackGround
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '# Make comment to get all line'#13#10'(?m)^\x20*\*.*\r\n'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'End line comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '.*'
        ColumnFrom = 80
        ColumnTo = 0
      end
      item
        DisplayName = 'Indent'
        StyleName = 'Line Indent'
        Expression = '(?m)^\x20{5}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any Directive'
        StyleName = 'Compiler Directive'
        TokenType = 5
        Expression = '/[\w\-]+'
        ColumnFrom = 7
        ColumnTo = 7
      end
      item
        DisplayName = 'Specifications'
        StyleName = 'Specifications'
        TokenType = 3
        Expression = '(?m)[CDFHIOP]'
        ColumnFrom = 6
        ColumnTo = 6
      end
      item
        DisplayName = 'Line end'
        TokenType = 4
        Expression = '# supports any type of line end'#13#10'\r\n|[\r\n]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Data type'
        StyleName = 'Types'
        BlockName = 'D line'
        TokenType = 2
        Expression = '\w{1,2}'
        ColumnFrom = 24
        ColumnTo = 24
      end
      item
        DisplayName = 'File type'
        StyleName = 'Types'
        BlockName = 'F line'
        TokenType = 2
        Expression = '[IOUC]'
        ColumnFrom = 17
        ColumnTo = 17
      end
      item
        DisplayName = 'File designation'
        StyleName = 'Types'
        BlockName = 'F line'
        TokenType = 2
        Expression = '[TF]'
        ColumnFrom = 18
        ColumnTo = 18
      end
      item
        DisplayName = 'File addition'
        StyleName = 'Types'
        BlockName = 'F line'
        TokenType = 2
        Expression = 'A'
        ColumnFrom = 20
        ColumnTo = 20
      end
      item
        DisplayName = 'File format'
        StyleName = 'Types'
        BlockName = 'F line'
        TokenType = 2
        Expression = '[FE]'
        ColumnFrom = 22
        ColumnTo = 22
      end
      item
        DisplayName = 'Record Address type'
        StyleName = 'Types'
        BlockName = 'F line'
        TokenType = 2
        Expression = 'K'
        ColumnFrom = 34
        ColumnTo = 34
      end
      item
        DisplayName = 'Device'
        StyleName = 'Types'
        BlockName = 'F line'
        TokenType = 2
        Expression = '\w+'
        ColumnFrom = 36
        ColumnTo = 42
      end
      item
        DisplayName = 'F keywords'
        StyleName = 'Types'
        BlockName = 'F line'
        TokenType = 2
        Expression = '\w+'
        ColumnFrom = 44
        ColumnTo = 80
      end
      item
        DisplayName = 'Control keywords'
        StyleName = 'H keywords'
        BlockName = 'H line'
        TokenType = 2
        Expression = '\x20[a-z,A-Z]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'B and E procedure'
        StyleName = 'Types'
        BlockName = 'P line'
        TokenType = 2
        Expression = '[BE]'
        ColumnFrom = 24
        ColumnTo = 24
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        AlwaysEnabled = True
        TokenType = 7
        Expression = #39'.*'#39
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        AlwaysEnabled = True
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        AlwaysEnabled = True
        TokenType = 6
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex number'
        StyleName = 'Number'
        AlwaysEnabled = True
        TokenType = 6
        Expression = 'X'#39'[a-f\d]+'#39
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'ident'
        AlwaysEnabled = True
        TokenType = 2
        Expression = '#any name'#13#10'\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 8
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Space'
        Enabled = False
        BlockName = 'C line'
        Expression = '\x20+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '%names'
        StyleName = '%name'
        BlockName = 'C line'
        TokenType = 2
        Expression = '%\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Block comment'
        StyleName = 'Comment background'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
        CollapseFmt = '     * ... *'
      end
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'line end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 16
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Directive line'
        ConditionList = <
          item
            TokenTypes = 32
          end>
        BlockEnd = 'line end'
        NotCollapsed = True
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'C line'
        StyleName = 'C background'
        ConditionList = <
          item
            TagList.Strings = (
              'C')
            TokenTypes = 8
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'line end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
      end
      item
        DisplayName = 'D line'
        StyleName = 'D background'
        ConditionList = <
          item
            TagList.Strings = (
              'D')
            TokenTypes = 8
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'line end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
      end
      item
        DisplayName = 'F line'
        ConditionList = <
          item
            TagList.Strings = (
              'F')
            TokenTypes = 8
            IgnoreCase = True
          end>
        BlockEnd = 'line end'
        NotCollapsed = True
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'H line'
        ConditionList = <
          item
            TagList.Strings = (
              'H')
            TokenTypes = 8
            IgnoreCase = True
          end>
        BlockEnd = 'line end'
        NotCollapsed = True
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'I line'
        ConditionList = <
          item
            TagList.Strings = (
              'I')
            TokenTypes = 8
            IgnoreCase = True
          end>
        BlockEnd = 'line end'
        NotCollapsed = True
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'O line'
        ConditionList = <
          item
            TagList.Strings = (
              'O')
            TokenTypes = 8
            IgnoreCase = True
          end>
        BlockEnd = 'line end'
        NotCollapsed = True
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'P line'
        ConditionList = <
          item
            TagList.Strings = (
              'P')
            TokenTypes = 8
            IgnoreCase = True
          end>
        BlockEnd = 'line end'
        NotCollapsed = True
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'C keywords (only C specific)'
        StyleName = 'C keywords'
        BlockName = 'C line'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'add'
              'adddur'
              'alloc'
              'and'
              'begact'
              'begsr'
              'bitoff'
              'biton'
              'cab'
              'cas'
              'cat'
              'chain'
              'check'
              'checkr'
              'clear'
              'close'
              'clswin'
              'commit'
              'comp'
              'dealloc'
              'define'
              'delete'
              'div'
              'dsply'
              'else'
              'elseif'
              'end'
              'endact'
              'endcs'
              'enddo'
              'endfor'
              'endif'
              'endmon'
              'endsl'
              'endsr'
              'eval'
              'evalr'
              'except'
              'exsr'
              'extrct'
              'feod'
              'for'
              'getatr'
              'goto'
              'if'
              'in'
              'iter'
              'kfld'
              'klist'
              'leave'
              'leavesr'
              'lookup'
              'monitor'
              'move'
              'movea'
              'movel'
              'mult'
              'mvr'
              'not'
              'occur'
              'on-error'
              'or'
              'other'
              'out'
              'parm'
              'plist'
              'post'
              'read'
              'readc'
              'reade'
              'readp'
              'readpe'
              'reads'
              'realloc'
              'reset'
              'return'
              'rolbk'
              'scan'
              'select'
              'setatr'
              'setgt'
              'setll'
              'setoff'
              'seton'
              'showwin'
              'sorta'
              'sqrt'
              'start'
              'stop'
              'sub'
              'subdur'
              'subst'
              'tag'
              'test'
              'testb'
              'testn'
              'testz'
              'time'
              'to'
              'unlock'
              'update'
              'when'
              'write'
              'xfoot'
              'xlate'
              'z-add'
              'z-sub')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'D keywords'
        StyleName = 'D keywords'
        BlockName = 'D line'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'align'
              'alt'
              'ascend'
              'based'
              'button'
              'ccsid'
              'class'
              'cltpgm'
              'const'
              'ctdata'
              'datfmt'
              'descend'
              'dim'
              'dll'
              'dtaara'
              'extfld'
              'extfmt'
              'extname'
              'extpgm'
              'extproc'
              'fromfile'
              'inz'
              'like'
              'likeds'
              'likerec'
              'linkage'
              'msgdata'
              'msgnbr'
              'msgtext'
              'msgtitle'
              'noopt'
              'nowait'
              'occurs'
              'options'
              'overlay'
              'packeven'
              'perrcd'
              'prefix'
              'procptr'
              'qualified'
              'static'
              'style'
              'timfmt'
              'tofile'
              'value'
              'varying')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Directive keywords'
        StyleName = 'Compiler Directive'
        BlockName = 'Directive line'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'defined'
              'not')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '/IF'
        ConditionList = <
          item
            TagList.Strings = (
              '/IF')
            TokenTypes = 32
            IgnoreCase = True
          end>
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = 'IF ...'
      end
      item
        DisplayName = '/ENDIF'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/ENDIF')
            TokenTypes = 32
            IgnoreCase = True
          end>
        BlockEnd = '/IF'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'procedure begin'
        StyleName = 'P background'
        ConditionList = <
          item
            TagList.Strings = (
              'B')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'P')
            TokenTypes = 8
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 3
        BlockEnd = 'procedure end'
        Highlight = True
        InvertColors = True
        DynHighlight = dhBound
        HighlightPos = cpAny
        CollapseFmt = 'PROC   %s1'
      end
      item
        DisplayName = 'procedure end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'E')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'P')
            TokenTypes = 8
            IgnoreCase = True
          end>
        BlockOffset = -1
        HighlightPos = cpAny
      end
      item
        DisplayName = '/FREE'
        ConditionList = <
          item
            TagList.Strings = (
              '/FREE')
            TokenTypes = 32
            IgnoreCase = True
          end>
        BlockEnd = '/END-FREE'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '/ FREE SYNTAX /'
      end
      item
        DisplayName = '/END-FREE'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/END-FREE')
            TokenTypes = 32
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        AlwaysEnabled = True
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 256
          end>
        BlockEnd = ')'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        CollapseFmt = '( ... )'
      end
      item
        DisplayName = ')'
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 256
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'END'
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'END')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'CASyy'
        AlwaysEnabled = True
        ConditionList = <
          item
            TagList.Strings = (
              'cas'
              'cas\w\w')
            CondType = tcMask
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'END'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'ENDCS'
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endcs')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'CASyy'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'DO'
        AlwaysEnabled = True
        ConditionList = <
          item
            TagList.Strings = (
              'DO'
              'DOU'
              'DOU\w\w'
              'DOW'
              'DOW\w\w')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'END'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'ENDDO'
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'enddo')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'DO'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'IF'
        AlwaysEnabled = True
        ConditionList = <
          item
            TagList.Strings = (
              'IF'
              'IF\w\w')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'END'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'ENDIF'
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endif')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'IF'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'ELSE'
        AlwaysEnabled = True
        ConditionList = <
          item
            TagList.Strings = (
              'ELSE')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'ENDIF (for else)'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'ENDIF (for else)'
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'ENDIF')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'FOR'
        AlwaysEnabled = True
        ConditionList = <
          item
            TagList.Strings = (
              'for')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'END'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'ENDFOR'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endfor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'FOR'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'MONITOR'
        AlwaysEnabled = True
        ConditionList = <
          item
            TagList.Strings = (
              'MONITOR')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'END'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'ENDMON'
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'ENDMON')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'MONITOR'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'SELECT'
        AlwaysEnabled = True
        ConditionList = <
          item
            TagList.Strings = (
              'SELECT')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'END'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'ENDSL'
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'ENDSL')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'SELECT'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'begsr'
        AlwaysEnabled = True
        ConditionList = <
          item
            TagList.Strings = (
              'begsr')
            TokenTypes = 4
            IgnoreCase = True
          end>
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = 'begsr ... endsr'
      end
      item
        DisplayName = 'endsr'
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endsr')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'common keywords (C)'
        StyleName = 'C keywords'
        AlwaysEnabled = True
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'add'
              'adddur'
              'alloc'
              'and'
              'begact'
              'begsr'
              'bitoff'
              'biton'
              'chain'
              'check'
              'checkr'
              'clear'
              'close'
              'clswin'
              'commit'
              'comp'
              'dealloc'
              'define'
              'delete'
              'div'
              'do'
              'dou'
              'dow'
              'dsply'
              'else'
              'elseif'
              'end'
              'endact'
              'endcs'
              'enddo'
              'endfor'
              'endif'
              'endmon'
              'endsl'
              'endsr'
              'eval'
              'evalr'
              'except'
              'exsr'
              'extrct'
              'feod'
              'for'
              'getatr'
              'goto'
              'if'
              'in'
              'iter'
              'kfld'
              'klist'
              'leave'
              'leavesr'
              'lookup'
              'monitor'
              'move'
              'movea'
              'movel'
              'mult'
              'mvr'
              'not'
              'occur'
              'on-error'
              'or'
              'other'
              'out'
              'parm'
              'plist'
              'post'
              'read'
              'readc'
              'reade'
              'readp'
              'readpe'
              'reads'
              'realloc'
              'reset'
              'return'
              'rolbk'
              'scan'
              'select'
              'setatr'
              'setgt'
              'setll'
              'setoff'
              'seton'
              'showwin'
              'sorta'
              'sqrt'
              'start'
              'stop'
              'sub'
              'subdur'
              'subst'
              'tag'
              'time'
              'to'
              'unlock'
              'update'
              'when'
              'write'
              'xfoot'
              'xlate'
              'z-add'
              'z-sub')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'common masked keywords (C)'
        StyleName = 'C keywords'
        AlwaysEnabled = True
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ca[bst]'
              'call[bp]?'
              'cas\w\w'
              'dou\w\w\b'
              'dow\w\w'
              'if\w\w'
              'test[bnz]?')
            CondType = tcMask
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'Free Syntax rule'
        StyleName = 'Free syntax'
        StartExpression = '(?i)/FREE'
        EndExpression = '(?i)/END\-FREE'
        SyntAnalyzer = SyntAnal30
      end>
    SampleText.Strings = (
      '      /IF NOT DEFINED(DATA_TYPES)'
      '      /DEFINE DATA_TYPES'
      ''
      '     ***********'
      '     **  RPG  **'
      '     ***********'
      '     D short           S              5I 0'
      '     D int             S             10I 0'
      '     D long            S             10I 0'
      '     D float           S              8F'
      '     D double          S                   Like(float)'
      '      /Free   '
      '        do        '
      '        // Comment'
      '         dou'
      '           if   '
      '            monitor    '
      '             select  '
      '              CASfe'
      '              endcs'
      '             endsl'
      '            endmon'
      '           endif'
      '         end'
      '        enddo'
      '        '
      '      /end-free'
      ''
      '      /ENDIF'
      '')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Line Type'
      'Line End'
      'Directives'
      'Number'
      'String'
      'Symbol')
    DefaultStyleName = 'Default'
    Extentions = 'rpg rpgle'
    LexerName = 'RPG/IV'
    SkipSpaces = False
    RestartFromLineStart = True
    Left = 140
    Top = 160
  end
  object SyntAnal30: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Compiler Directive'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Free Syntax Calculation keywords'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = '%name'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '# Make comment to get all line'#13#10'#(?m)^\x20*\*.*\r\n'#13#10'//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any Directive'
        StyleName = 'Compiler Directive'
        TokenType = 5
        Expression = '/[\w\-]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '%names'
        StyleName = '%name'
        TokenType = 2
        Expression = '%\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 8
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Free Syntax Calculation keywords'
        StyleName = 'Free Syntax Calculation keywords'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'BEGSR'
              'CALLP'
              'CHAIN'
              'CLEAR'
              'CLOSE'
              'COMMIT'
              'DEALLOC'
              'DELETE'
              'DOU'
              'DOW'
              'DSPLY'
              'ELSE'
              'ELSEIF'
              'END'
              'ENDDO'
              'ENDFOR'
              'ENDIF'
              'ENDMON'
              'ENDSL'
              'ENDSR'
              'EVAL'
              'EVALR'
              'EXCEPT'
              'EXSR'
              'FEOD'
              'FOR'
              'IF'
              'IN'
              'ITER'
              'LEAVE'
              'LEAVESR'
              'MONITOR'
              'ON-ERROR'
              'OPEN'
              'OTHER'
              'OUT'
              'POST'
              'READ'
              'READC'
              'READE'
              'READP'
              'READPE'
              'RESET'
              'RETURN'
              'ROLBK'
              'SELECT'
              'SETGT'
              'SETLL'
              'SORTA'
              'TEST'
              'UNLOCK'
              'UPDATE'
              'WHEN'
              'WRITE')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Line Type'
      'Line End'
      'Directives'
      'Number'
      'String'
      'Symbol')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    LexerName = 'RPG/IV (Free Syntax)'
    Internal = True
  end
  object SyntAnal31: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Hyperlink'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsUnderline]
      end>
    TokenRules = <
      item
        DisplayName = 'http or ftp link'
        StyleName = 'Hyperlink'
        TokenType = 1
        Expression = 
          '(?i) '#13#10'# Protocol'#13#10'(http|ftp)://  '#13#10'# TCP addr or domain name'#13#10'[' +
          '\w\d\-]+(\.[\w\d\-]+)+'#13#10'# port number'#13#10'(:\d\d?\d?\d?\d?)?'#13#10'# uni' +
          'x path'#13#10'(((/[%+\w\d\-\\\.]*)+)*)'#13#10'# request (GET) params'#13#10'(\?[^\' +
          's=&"]+=[^\s=&"]+(&[^\s=&"]+=[^\s=&"]+)*)?'#13#10'# bookmark'#13#10'(\#[\w\d\' +
          '-%+]+)?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'www....'
        Enabled = False
        Expression = 
          '(?i) '#13#10'# TCP addr or domain name'#13#10'www(\.[\w\d\-]+)+'#13#10'# port numb' +
          'er'#13#10'(:\d\d?\d?\d?\d?)?'#13#10'# unix path'#13#10'(((/[%+\w\d\-\\\.]*)+)*)'#13#10'#' +
          ' request (GET) params'#13#10'(\?[^\s=&]+=[^\s=&]+(&[^\s=&]+=[^\s=&]+)*' +
          ')?'#13#10'# bookmark'#13#10'(\#[\w\d\-%+]+)?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'mail'
        StyleName = 'Hyperlink'
        TokenType = 1
        Expression = 
          '(?i)'#13#10'# e-mail name'#13#10'[_a-z\d\-\.]+@'#13#10'# domane name'#13#10'[_a-z\d\-]+(' +
          '\.[_a-z\d\-]+)+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Hyperlink')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    LexerName = 'Hyperlink extractor'
    Internal = True
  end
  object SyntAnal33: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Label'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Opcode'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Operands'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Slash'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Sysin section'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clInfoBk
      end
      item
        DisplayName = 'Sysin word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Sysin symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Sysin string'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Sysin word'
        StyleName = 'Sysin word'
        BlockName = 'Sysin section'
        TokenType = 2
        Expression = '\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^//\*.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'End Line Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\x20.*'
        ColumnFrom = 72
        ColumnTo = 0
      end
      item
        DisplayName = 'Slash'
        StyleName = 'Slash'
        TokenType = 10
        Expression = '//'
        ColumnFrom = 1
        ColumnTo = 2
      end
      item
        DisplayName = 'SlashWithAsterisk'
        StyleName = 'Slash'
        Expression = '/\*'
        ColumnFrom = 1
        ColumnTo = 2
      end
      item
        DisplayName = 'Label'
        StyleName = 'Label'
        TokenType = 11
        Expression = '\w+'
        ColumnFrom = 3
        ColumnTo = 3
      end
      item
        DisplayName = 'Opcode'
        TokenType = 12
        Expression = '\w+'
        ColumnFrom = 5
        ColumnTo = 15
      end
      item
        DisplayName = 'Operands'
        StyleName = 'Operands'
        TokenType = 13
        Expression = '\w+'
        ColumnFrom = 16
        ColumnTo = 72
      end
      item
        DisplayName = 'Sysin string'
        StyleName = 'Sysin string'
        BlockName = 'Sysin section'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Sysin symbol'
        StyleName = 'Sysin symbol'
        BlockName = 'Sysin section'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 72
      end
      item
        DisplayName = 'NewLine'
        BlockName = 'Sysin section'
        TokenType = 14
        Expression = '\n'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Exec section'
        BlockName = 'Main section'
        ConditionList = <
          item
            TagList.Strings = (
              'EXEC')
            TokenTypes = 4096
          end
          item
            TokenTypes = 2048
          end
          item
            TagList.Strings = (
              '//')
            TokenTypes = 1024
          end>
        BlockOffset = 2
        EndOfTextClose = True
        HighlightPos = cpAny
        SelfClose = True
      end
      item
        DisplayName = 'Exec main end'
        BlockName = 'Exec section'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'JOB'
              'PROC')
            TokenTypes = 4096
          end>
        BlockOffset = 4
        BlockEnd = 'Exec section'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Key words'
        StyleName = 'Opcode'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'CNTL'
              'COMMAND'
              'DD'
              'ELSE'
              'ENDCNTL'
              'ENDIF'
              'EXEC'
              'IF'
              'INCLUDE'
              'JCLLIB'
              'JOB'
              'OUTPUT'
              'PEND'
              'PROC'
              'SET'
              'THEN'
              'XMIT')
            TokenTypes = 4096
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sysin section'
        StyleName = 'Sysin section'
        BlockName = 'Exec section'
        ConditionList = <
          item
            TagList.Strings = (
              '*'
              'DATA')
          end
          item
            TagList.Strings = (
              'DD')
            TokenTypes = 4096
          end
          item
            TagList.Strings = (
              'SYSIN'
              'SYSTSIN')
            TokenTypes = 2048
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '//')
            TokenTypes = 1024
            IgnoreCase = True
          end>
        EndOfTextClose = True
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Exec sysin end'
        BlockName = 'Sysin section'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockOffset = 2
        BlockEnd = 'Exec section'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sysin end'
        BlockName = 'Sysin section'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockOffset = 2
        BlockEnd = 'Sysin section'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sysin comment end'
        BlockName = 'Sysin section'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockOffset = 2
        BlockEnd = 'Sysin section'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        BlockEnd = 'Block comment'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Exec separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'EXEC')
            TokenTypes = 4096
          end>
        HighlightPos = cpAny
        CollapseFmt = '...'
      end
      item
        DisplayName = 'Main separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'JOB'
              'PROC')
            TokenTypes = 4096
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Main section'
        ConditionList = <
          item
            TagList.Strings = (
              'JOB'
              'PROC')
            TokenTypes = 4096
          end>
        BlockOffset = 2
        EndOfTextClose = True
        HighlightPos = cpAny
        SelfClose = True
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '//*'
      '//* test'
      '//*'
      '//TEST    EXEC 1=1'
      '//A       DD S=1'
      '//SYSIN   DD *'
      ' sdfsd'
      ' ddd'
      '//DEMO    EXEC 2=2'
      '//SYSIN   DD DATA,TEST'
      ' (sdfsd)'
      ' ddd'
      '/*')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Slashes'
      'Label'
      'Opcode'
      'Operands'
      'NewLine')
    DefaultStyleName = 'Default'
    Extentions = 'jcl'
    LexerName = 'JCL'
    SkipSpaces = False
    Notes.Strings = (
      'Author: Javier Santo Domingo')
    Left = 140
    Top = 160
  end
  object SyntAnal32: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\+.*?(\+/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^~\.]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__DATE__'
              '__FILE__'
              '__LINE__'
              '__TIME__'
              '__TIMESTAMP__'
              'abstract'
              'alias'
              'align'
              'asm'
              'assert'
              'auto'
              'bit'
              'body'
              'break'
              'byte'
              'case'
              'cast'
              'catch'
              'cdouble'
              'cent'
              'cfloat'
              'char'
              'class'
              'const'
              'continue'
              'creal'
              'dchar'
              'debug'
              'default'
              'delegate'
              'delete'
              'deprecated'
              'do'
              'double'
              'else'
              'enum'
              'export'
              'extern'
              'false'
              'final'
              'finally'
              'float'
              'for'
              'foreach'
              'function'
              'goto'
              'idouble'
              'if'
              'ifloat'
              'import'
              'in'
              'inout'
              'int'
              'interface'
              'invariant'
              'ireal'
              'is'
              'long'
              'mixin'
              'module'
              'new'
              'null'
              'out'
              'override'
              'package'
              'pragma'
              'private'
              'protected'
              'public'
              'real'
              'return'
              'short'
              'sizeof'
              'static'
              'struct'
              'super'
              'switch'
              'synchronized'
              'template'
              'this'
              'throw'
              'true'
              'try'
              'typedef'
              'typeid'
              'typeof'
              'ubyte'
              'ucent'
              'uint'
              'ulong'
              'union'
              'unittest'
              'ushort'
              'version'
              'void'
              'volatile'
              'wchar'
              'while'
              'with')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function begin'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '::')
            CondType = tcNotEqual
            TokenTypes = 8
          end>
        IdentIndex = -1
        BlockOffset = -1
        BlockEnd = 'function end'
        RefToCondEnd = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function end'
        BlockName = 'function begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'cls func'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '::')
            TokenTypes = 8
          end>
        BlockOffset = -1
        BlockEnd = 'cls func end'
        NameFmt = '%s-1'
        GroupFmt = '%s1'
        RefToCondEnd = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'cls func end'
        BlockName = 'cls func'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '{ ... }'
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* Sieve of Eratosthenes prime numbers */'
      ' '
      'bit[8191] flags;'
      ' '
      'int main()'
      '{   int i, count, prime, k, iter;'
      ''
      '    printf("10 iterations\n");'
      '    for (iter = 1; iter <= 10; iter++)'
      '    {'#9'count = 0;'
      #9'flags[] = 1;'
      #9'for (i = 0; i < flags.length; i++)'
      #9'{   if (flags[i])'
      #9'    {'#9'prime = i + i + 3;'
      #9#9'k = i + prime;'
      #9#9'while (k < flags.length)'
      '        {'
      '            flags[k] = 0;'
      '            k += prime;'
      '        }'
      '        count += 1;'
      '        }'
      '    }'
      '    }'
      '    printf ("\n%d primes", count);'
      '    return 0;'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'd'
    LexerName = 'DigitalMars D'
    Notes.Strings = (
      'Author: krzys.mif@op.pl')
    Left = 140
    Top = 160
  end
  object SyntAnal34: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Params'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsItalic]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '--.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>\(\)&/\|\^~\.,]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'categories'
              'datum'
              'end'
              'is'
              'level'
              'RECORD_TYPE'
              'survey'
              'title'
              'weight')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Var types'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'character'
              'integer'
              'LOGICAL'
              'multiple'
              'real'
              'single')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Param keywords'
        StyleName = 'Params'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'classes'
              'COMPUTE'
              'datum'
              'location'
              'range'
              'title'
              'UNIVERSE'
              'VARIABLE')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Named begin'
        ConditionList = <
          item
            TagList.Strings = (
              'is')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'categories'
              'character'
              'integer'
              'level'
              'logical'
              'real'
              'single'
              'survey')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 2
        BlockOffset = 2
        BlockEnd = 'Named end'
        NameFmt = '%s2 %s1'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Named end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'categories'
              'character'
              'integer'
              'level'
              'logical'
              'real'
              'RECORD_TYPE'
              'single'
              'survey'
              'weight')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        SameIdent = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Unnamed begin'
        ConditionList = <
          item
            TagList.Strings = (
              'is')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'categories'
              'record_type'
              'weight')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'Named end'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Category'
        ConditionList = <
          item
            TokenTypes = 16
          end
          item
            TagList.Strings = (
              'is')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'datum')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 2
        BlockOffset = 2
        BlockEnd = 'Category end'
        NameFmt = '%s0'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Category end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 16
          end
          item
            TagList.Strings = (
              'is')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'datum')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'var'
    LexerName = 'VAR file'
  end
  object SyntAnal35: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clSilver
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Attributes'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Sections'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsUnderline]
      end
      item
        DisplayName = 'Syntax'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Variables'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Equal Sign'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Header'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Constants'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Commands'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'LibraryFiles'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'IncludeFiles'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'OperID'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'OperSub'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Attributes'
        StyleName = 'Attributes'
        TokenType = 5
        Expression = '(:ATTRNAME=.*)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Sections'
        StyleName = 'Sections'
        TokenType = 6
        Expression = '(:SECTION=.*)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(*.*)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Syntax'
        TokenType = 7
        Expression = '[a-z_]\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Equal Sign'
        StyleName = 'Equal Sign'
        Expression = '='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'LibraryFiles'
        StyleName = 'LibraryFiles'
        TokenType = 9
        Expression = '(:LIBRARY.*)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IncludeFiles'
        StyleName = 'IncludeFiles'
        TokenType = 10
        Expression = '(:INCLUDE.*)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'OperId'
        StyleName = 'OperID'
        TokenType = 11
        Expression = '(:OPERID.*)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'OperSub'
        StyleName = 'OperSub'
        TokenType = 12
        Expression = '(:OPERSUB.*)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Attributes'
        StyleName = 'Attributes'
        ConditionList = <
          item
            TokenTypes = 32
          end>
        Highlight = True
        GroupFmt = 'ATTRIBUTES'
        DynHighlight = dhBound
        HighlightPos = cpAny
        NoEndRule = True
      end
      item
        DisplayName = 'Sections'
        StyleName = 'Sections'
        ConditionList = <
          item
            TokenTypes = 64
          end>
        Highlight = True
        GroupFmt = 'SECTIONS'
        DynHighlight = dhBound
        HighlightPos = cpAny
        NoEndRule = True
      end
      item
        DisplayName = 'Variables'
        StyleName = 'Variables'
        ConditionList = <
          item
            TagList.Strings = (
              'ABS_C_END'
              'ABS_C_START'
              'ABS_I_CENTER'
              'ABS_J_CENTER'
              'ABS_K_CENTER'
              'ABS_L_CENTER'
              'ABS_PICK_LOCATION'
              'ABS_PRESET_C'
              'ABS_PRESET_X'
              'ABS_PRESET_Y'
              'ABS_PRESET_Z'
              'ABS_U_END'
              'ABS_U_START'
              'ABS_V_END'
              'ABS_V_START'
              'ABS_W_END'
              'ABS_W_START'
              'ABS_X_END'
              'ABS_X_START'
              'ABS_Y_END'
              'ABS_Y_START'
              'ABS_Z_END'
              'ABS_Z_START'
              'ANGLE'
              'ARC_DEVIATION'
              'ARC_END_ANGLE'
              'ARC_INC_ANGLE'
              'ARC_RADIUS'
              'ARC_START_ANGLE'
              'ARM_ACTIVE_CUPS'
              'ARM_DESTINATION_X'
              'ARM_DESTINATION_Y'
              'ARM_ENGLISH_SORTERDB'
              'ARM_LEN'
              'ARM_METRIC_SORTERDB'
              'ARM_OFFSET'
              'ARM_PICKUP_X'
              'ARM_PICKUP_Y'
              'ARM_SORTER_DBPATH'
              'ATTRCVALUE'
              'ATTRDVALUE'
              'ATTRIVALUE'
              'ATTRLVALUE'
              'ATTROVERRIDE'
              'BIN_NUMBER'
              'BOUNDARY_AREA'
              'BYTE_COUNT'
              'CCL_STATUS'
              'CI'
              'CJ'
              'CK'
              'CLAMP1_POSITION'
              'CLAMP2_POSITION'
              'CLAMP3_POSITION'
              'CLAMP4_POSITION'
              'CORNER_TYPE'
              'CURRENT_MACRO_DEFINED'
              'CURRENT_MACRO_NAME'
              'CURRENT_MACRO_NUMBER'
              'CURRENT_MACRO_QUADRANT'
              'CURRENT_SYSTEM'
              'CX'
              'CY'
              'CYCLE_BOUNDARY_CENTER'
              'CZ'
              'DAY'
              'DIE_SERIAL_NUM'
              'DIRECTION'
              'DISK_DRIVE_1'
              'DISK_DRIVE_2'
              'DISPLACED_X'
              'DISPLACED_Y'
              'DISPLACED_Z'
              'DIST_BET_HOLES_X'
              'DIST_BET_HOLES_Y'
              'DIST_BET_PARTS_X'
              'DIST_BET_PARTS_Y'
              'DISTANCE'
              'DRILL_CLEAR_X'
              'DRILL_CLEAR_Y'
              'DRILL_CLEAR_Z'
              'DRILL_DEPTH_X'
              'DRILL_DEPTH_Y'
              'DRILL_DEPTH_Z'
              'DRILL_FACE_X'
              'DRILL_FACE_Y'
              'DRILL_FACE_Z'
              'DRILL_PECK_DEPTH_X'
              'DRILL_PECK_DEPTH_Y'
              'DRILL_PECK_DEPTH_Z'
              'DRILL_PECK_RAPID_TO_X'
              'DRILL_PECK_RAPID_TO_Y'
              'DRILL_PECK_RAPID_TO_Z'
              'DRILL_RAPID_X'
              'DRILL_RAPID_Y'
              'DRILL_RAPID_Z'
              'DRILL_SAFE_X'
              'DRILL_SAFE_Y'
              'DRILL_SAFE_Z'
              'DSPINDLE'
              'EDM_MODE'
              'EOL'
              'ESC'
              'FILLET_RADIUS'
              'FIXED'
              'FRAME'
              'FRONT_TOOL'
              'G_LEFT_PLACES'
              'G_RIGHT_PLACES'
              'HEAD_LEN'
              'HEIGHT'
              'HORIZ_OR_VERT'
              'I_AXIS'
              'ID'
              'INC_ANGLE'
              'INC_C_END'
              'INC_I_CENTER'
              'INC_J_CENTER'
              'INC_K_CENTER'
              'INC_L_CENTER'
              'INC_PICK_LOCATION'
              'INC_ROT_TILT_A'
              'INC_ROT_TILT_B'
              'INC_TOOL_INDEX_ANGLEIDD'
              'INC_U_END'
              'INC_V_END'
              'INC_W_END'
              'INC_X_END'
              'INC_Y_END'
              'INC_Z_END'
              'INIT_TOOL_LENGTH'
              'ISCALLOP'
              'J_AXIS'
              'K_AXIS'
              'KOMBID'
              'LASER_DBPATH'
              'LASER_MATERIAL'
              'LASER_THICKNESS'
              'LATHE_HOLDER_NAME'
              'LATHE_TOOL_NAME'
              'LD_2ND_ASSIST_GAS'
              'LD_2ND_GAS_PRESSURE'
              'LD_ASSIST_GAS'
              'LD_AUTOBREAK_IN_LENGTH'
              'LD_AUTOBREAK_OUT_LENGTH'
              'LD_CC_MODE'
              'LD_CHOICE_START_POSITION'
              'LD_COLOR'
              'LD_COMMENT'
              'LD_COOLANT_MODE'
              'LD_DATA_GROUP'
              'LD_DIRECTION'
              'LD_DURATION'
              'LD_DUTY_CYCLE'
              'LD_END_AT_HOLE_CENTER'
              'LD_FEEDRATE'
              'LD_FEEDRATE_PERCENT'
              'LD_FREQUENCY'
              'LD_GAS_PRESSURE'
              'LD_GO_AROUND_DISTANCE'
              'LD_LASER_MODE'
              'LD_LEADIN_ANGLE'
              'LD_LEADIN_ARC_ANGLE'
              'LD_LEADIN_ARC_RADIUS'
              'LD_LEADIN_LENGTH'
              'LD_LEADIN_MODE'
              'LD_LEADIN_OVERLAP'
              'LD_LEADOUT_ANGLE'
              'LD_LEADOUT_ARC_ANGLE'
              'LD_LEADOUT_ARC_RADIUS'
              'LD_LEADOUT_LENGTH'
              'LD_LEADOUT_MODE'
              'LD_LEADOUT_OVERLAP'
              'LD_LIFTHEAD'
              'LD_MATERIAL'
              'LD_METRIC'
              'LD_OFFSET_VALUE'
              'LD_OPTION_START_POSITION'
              'LD_PART_CLEARANCE'
              'LD_POWER_LEVEL'
              'LD_SENSOR_RADIUS'
              'LD_SIZE'
              'LD_START_AT_HOLE_CENTER'
              'LD_START_AT_MICROJOINT'
              'LD_START_POSITION'
              'LD_SUBROUTINE_NUMBER'
              'LD_SYSTEM_COMP'
              'LD_THICKNESS'
              'LD_USER_DBL01'
              'LD_USER_DBL02'
              'LD_USER_DBL03'
              'LD_USER_DBL04'
              'LD_USER_DBL05'
              'LD_USER_DBL06'
              'LD_USER_DBL07'
              'LD_USER_DBL08'
              'LD_USER_DBL09'
              'LD_USER_DBL10'
              'LD_USER_INT01'
              'LD_USER_INT02'
              'LD_USER_INT03'
              'LD_USER_INT04'
              'LD_USER_INT05'
              'LD_USER_INT06'
              'LD_USER_INT07'
              'LD_USER_INT08'
              'LD_USER_INT09'
              'LD_USER_INT10'
              'LEADIN'
              'LEADOUT'
              'LINE_COUNT'
              'MACRO_A'
              'MACRO_B'
              'MACRO_C'
              'MACRO_COUNT'
              'MACRO_D'
              'MACRO_DEFINED'
              'MACRO_E'
              'MACRO_ERROR'
              'MACRO_F'
              'MACRO_G'
              'MACRO_H'
              'MACRO_I'
              'MACRO_J'
              'MACRO_NAME'
              'MACRO_ROTATE_AXIS'
              'MACRO_TIME'
              'MCS_X_OFFSET'
              'MCS_Y_OFFSET'
              'MCS_Z_OFFSET'
              'METRIC_FLAG'
              'METRIC_OUT'
              'MICRO_END'
              'MICRO_START'
              'MILL_FACE_INC'
              'MONTH'
              'MOVE_COUNT'
              'MOVE_TYPE'
              'MULT_MACROS'
              'N_ABS_C_END'
              'N_ABS_C_START'
              'N_ABS_I_CENTER'
              'N_ABS_J_CENTER'
              'N_ABS_K_CENTER'
              'N_ABS_L_CENTER'
              'N_ABS_U_END'
              'N_ABS_U_START'
              'N_ABS_V_END'
              'N_ABS_V_START'
              'N_ABS_W_END'
              'N_ABS_W_START'
              'N_ABS_X_END'
              'N_ABS_X_START'
              'N_ABS_Y_END'
              'N_ABS_Y_START'
              'N_ABS_Z_END'
              'N_ABS_Z_START'
              'N_ANGLE'
              'N_ARC_END_ANGLE'
              'N_ARC_INC_ANGLE'
              'N_ARC_RADIUS'
              'N_ARC_START_ANGLE'
              'N_CORNER_TYPE'
              'N_DIE_SERIAL_NUM'
              'N_DISPLACED_X'
              'N_DISPLACED_Y'
              'N_DISPLACED_Z'
              'N_DIST_BET_HOLES_X'
              'N_DIST_BET_HOLES_Y'
              'N_DIST_BET_PARTS_X'
              'N_DIST_BET_PARTS_Y'
              'N_DISTANCE'
              'N_FILLET_RADIUS'
              'N_HEIGHT'
              'N_HORIZ_OR_VERT'
              'N_INC_ANGLE'
              'N_INC_C_END'
              'N_INC_I_CENTER'
              'N_INC_J_CENTER'
              'N_INC_K_CENTER'
              'N_INC_L_CENTER'
              'N_INC_ROT_TILT_A'
              'N_INC_ROT_TILT_B'
              'N_INC_TOOL_INDEX_ANGLEID'
              'N_INC_U_END'
              'N_INC_V_END'
              'N_INC_W_END'
              'N_INC_X_END'
              'N_INC_Y_END'
              'N_INC_Z_END'
              'N_LEADIN'
              'N_LEADOUT'
              'N_MICRO_END'
              'N_MICRO_START'
              'N_MICROJOINT'
              'N_MOVE_TYPE'
              'N_NUM_HITS'
              'N_NUM_HITS_X'
              'N_NUM_HITS_Y'
              'N_NUM_PARTS_X'
              'N_NUM_PARTS_Y'
              'N_OPITCH'
              'N_Q_TAPER_ANGLE_END'
              'N_Q_TAPER_ANGLE_START'
              'N_R_TAPER_ANGLE_END'
              'N_R_TAPER_ANGLE_START'
              'N_REV_INC_I_CENTER'
              'N_REV_INC_J_CENTER'
              'N_REV_INC_K_CENTER'
              'N_REV_INC_L_CENTER'
              'N_ROT_TILT_A'
              'N_ROT_TILT_B'
              'N_S_FILLET_RADIUS'
              'N_SCALLOP'
              'N_TAPER_ANGLE_END'
              'N_TAPER_ANGLE_START'
              'N_TOOL'
              'N_TOOL_COMMENT'
              'N_TOOL_DESCRIPTION'
              'N_TOOL_DIAMETER'
              'N_TOOL_DIE_CLEAR'
              'N_TOOL_INDEX_ANGLE'
              'N_TOOL_LENGTH'
              'N_TOOL_M_CODE'
              'N_TOOL_MATERIAL'
              'N_TOOL_NUM_TEETH'
              'N_TOOL_SERIAL_NUM'
              'N_TOOL_SPEC_TYPE'
              'N_TOOL_SUB_TYPE'
              'N_TOOL_TYPE'
              'N_TOOL_WIDTH'
              'N_TURRET'
              'N_VECTOR_I'
              'N_VECTOR_J'
              'N_VECTOR_K'
              'N_WIDTH'
              'N_WINDOW_HEIGHT'
              'N_WINDOW_ORIGIN_X'
              'N_WINDOW_ORIGIN_Y'
              'N_WINDOW_WIDTH'
              'NC_DIE_SERIAL_NUM'
              'NC_TOOL'
              'NC_TOOL_COMMENT'
              'NC_TOOL_DESCRIPTION'
              'NC_TOOL_DIAMETER'
              'NC_TOOL_DIE_CLEAR'
              'NC_TOOL_LENGTH'
              'NC_TOOL_M_CODE'
              'NC_TOOL_MATERIAL'
              'NC_TOOL_NUM_TEETH'
              'NC_TOOL_SERIAL_NUM'
              'NC_TOOL_SPEC_TYPE'
              'NC_TOOL_SUB_TYPE'
              'NC_TOOL_TYPE'
              'NC_TOOL_WIDTH'
              'NEW_SFPM'
              'NEXT_KOMBID'
              'NEXT_MOVE_KOMBID'
              'NEXT_OPR_TOOL'
              'NEXT_SYSTEM'
              'NO'
              'NPITCH'
              'NUM_HITS'
              'NUM_HITS_X'
              'NUM_HITS_Y'
              'NUM_PARTS_X'
              'NUM_PARTS_Y'
              'O_ABS_X_END'
              'O_ABS_X_START'
              'O_ABS_Y_END'
              'O_ABS_Y_START'
              'O_ANGLE'
              'O_ARC_END_ANGLE'
              'O_ARC_INC_ANGLE'
              'O_ARC_RADIUS'
              'O_ARC_START_ANGLE'
              'O_DIRECTION'
              'O_DISTANCE'
              'OD'
              'OFFSET_REG'
              'OPER_CURRENT_SKIM_CUT'
              'OPER_CURRENT_TAB_CUT'
              'OPER_TOTAL_SKIM_CUTS'
              'OPER_TOTAL_TAB_CUTS'
              'OPITCH'
              'OPR_AXIS_TYPE'
              'OPR_CFIXED'
              'OPR_CLEARANCE'
              'OPR_CLEARANCE_TYPE'
              'OPR_CMODE'
              'OPR_COMMENT'
              'OPR_CORNER_CLEAR'
              'OPR_CORNER_EXT'
              'OPR_CORNER_TYPE'
              'OPR_CUT_AMOUNT'
              'OPR_CYCLE_CLEARANCE'
              'OPR_CYCLE_TYPE'
              'OPR_DEPTH_TYPE'
              'OPR_DRILL_CYCLE_TYPE'
              'OPR_END_RETRACT_TYPE'
              'OPR_FEED_FPM'
              'OPR_FEED_FPR'
              'OPR_FEED_TYPE'
              'OPR_FIXED_ANGLE'
              'OPR_GLUE_DISTANCE'
              'OPR_GLUE_STOP'
              'OPR_INFEED_ANGLE'
              'OPR_INFEED_TYPE'
              'OPR_LACE_ANGLE'
              'OPR_LACE_CUT'
              'OPR_LATHE_RETRACT_TYPE'
              'OPR_LATHE_TAPPING'
              'OPR_LEADIN'
              'OPR_LEADOUT'
              'OPR_LOOKAHEAD'
              'OPR_POLAR'
              'OPR_POST_CYCLE_TYPE'
              'OPR_RETRACT_TYPE'
              'OPR_SPEED'
              'OPR_SPEED_DIR'
              'OPR_SPEED_RPM'
              'OPR_SPEED_SFPM'
              'OPR_SPEED_TYPE'
              'OPR_THREAD_ANGLE'
              'OPR_THREAD_CHAMFER'
              'OPR_THREAD_FIRST_CUT'
              'OPR_THREAD_LEADIN'
              'OPR_THREAD_LENGTH'
              'OPR_THREAD_MIN_CUT'
              'OPR_THREAD_MINOR_DIAM'
              'OPR_THREAD_NUM_SPRING'
              'OPR_THREAD_PITCH'
              'OPR_TYPE'
              'OPR_X_FEED'
              'OPR_X_PART_CLEARANCE'
              'OPR_X_POSITION'
              'OPR_Z_CLEARANCE'
              'OPR_Z_CUT_METHOD_TYPE'
              'OPR_Z_CYCLE_TYPE'
              'OPR_Z_DEPTH'
              'OPR_Z_DIST_ALONG'
              'OPR_Z_FACE'
              'OPR_Z_FEED'
              'OPR_Z_FINISH'
              'OPR_Z_FIRST_CUT'
              'OPR_Z_FIRST_PECK'
              'OPR_Z_MIN_PECK'
              'OPR_Z_PART_CLEARANCE'
              'OPR_Z_PER_PECK'
              'OPR_Z_POSITION'
              'OPR_Z_RAPID_PLANE'
              'OPR_Z_RETRACT_AMOUNT'
              'OPR_Z_ROTARY_RETRACT_PLANE'
              'OPR_Z_SUB_CUT'
              'OPR_Z_SUB_PECK'
              'OSCALLOP'
              'OTHER_SURF'
              'P_ABS_C_END'
              'P_ABS_C_START'
              'P_ABS_I_CENTER'
              'P_ABS_J_CENTER'
              'P_ABS_K_CENTER'
              'P_ABS_L_CENTER'
              'P_ABS_U_END'
              'P_ABS_U_START'
              'P_ABS_V_END'
              'P_ABS_V_START'
              'P_ABS_W_END'
              'P_ABS_W_START'
              'P_ABS_X_END'
              'P_ABS_X_START'
              'P_ABS_Y_END'
              'P_ABS_Y_START'
              'P_ABS_Z_END'
              'P_ABS_Z_START'
              'P_ANGLE'
              'P_ARC_END_ANGLE'
              'P_ARC_INC_ANGLE'
              'P_ARC_RADIUS'
              'P_ARC_START_ANGLE'
              'P_CORNER_TYPE'
              'P_DISPLACED_X'
              'P_DISPLACED_Y'
              'P_DISPLACED_Z'
              'P_DIST_BET_HOLES_X'
              'P_DIST_BET_HOLES_Y'
              'P_DIST_BET_PARTS_X'
              'P_DIST_BET_PARTS_Y'
              'P_DISTANCE'
              'P_FILLET_RADIUS'
              'P_HEIGHT'
              'P_HORIZ_OR_VERT'
              'P_INC_ANGLE'
              'P_INC_C_END'
              'P_INC_I_CENTER'
              'P_INC_J_CENTER'
              'P_INC_K_CENTER'
              'P_INC_L_CENTER'
              'P_INC_ROT_TILT_A'
              'P_INC_ROT_TILT_B'
              'P_INC_TOOL_INDEX_ANGLEID'
              'P_INC_U_END'
              'P_INC_V_END'
              'P_INC_W_END'
              'P_INC_X_END'
              'P_INC_Y_END'
              'P_INC_Z_END'
              'P_LEADIN'
              'P_LEADOUT'
              'P_MICRO_END'
              'P_MICRO_START'
              'P_MICROJOINT'
              'P_MOVE_TYPE'
              'P_NUM_HITS'
              'P_NUM_HITS_X'
              'P_NUM_HITS_Y'
              'P_NUM_PARTS_X'
              'P_NUM_PARTS_Y'
              'P_OPITCH'
              'P_Q_TAPER_ANGLE_END'
              'P_Q_TAPER_ANGLE_START'
              'P_R_TAPER_ANGLE_END'
              'P_R_TAPER_ANGLE_START'
              'P_REV_INC_I_CENTER'
              'P_REV_INC_J_CENTER'
              'P_REV_INC_K_CENTER'
              'P_REV_INC_L_CENTER'
              'P_ROT_TILT_A'
              'P_ROT_TILT_B'
              'P_S_FILLET_RADIUS'
              'P_SCALLOP'
              'P_TAPER_ANGLE_END'
              'P_TAPER_ANGLE_START'
              'P_TOOL_INDEX_ANGLE'
              'P_TURRET'
              'P_VECTOR_I'
              'P_VECTOR_J'
              'P_VECTOR_K'
              'P_WIDTH'
              'P_WINDOW_HEIGHT'
              'P_WINDOW_ORIGIN_X'
              'P_WINDOW_ORIGIN_Y'
              'P_WINDOW_WIDTH'
              'PART_NAME'
              'PART_OR_SCRAP'
              'PART_TOTAL_SKIM_CUTS'
              'PART_TOTAL_TAB_CUTS'
              'PART_TYPE'
              'PATH_TYPE'
              'PI'
              'PITCH  '
              'POST_PATH'
              'POWER_REG'
              'PPITCH'
              'PREV_SYSTEM'
              'PROGRAM_SURF'
              'PRT_NAME'
              'PRT_PATH'
              'Q_TAPER_ANGLE_END'
              'Q_TAPER_ANGLE_START'
              'QUAD'
              'R_TAPER_ANGLE_END'
              'R_TAPER_ANGLE_START'
              'REAR_TOOL'
              'RECNUM'
              'REV_INC_I_CENTER'
              'REV_INC_J_CENTER'
              'REV_INC_K_CENTER'
              'REV_INC_L_CENTER'
              'ROT_TILT_A'
              'ROT_TILT_B'
              'ROTATE_ANGLE_X'
              'ROTATE_ANGLE_Y'
              'ROTATE_ANGLE_Z'
              'ROTATE_TILT'
              'RUNNING_SYSTEM'
              'S_ARC_END_ANGLE'
              'S_ARC_INC_ANGLE'
              'S_ARC_RADIUS'
              'S_ARC_START_ANGLE'
              'S_DISTANCE'
              'S_FILLET_RADIUS'
              'S_MOVE_TYPE'
              'S_N_ARC_END_ANGLE'
              'S_N_ARC_INC_ANGLE'
              'S_N_ARC_RADIUS'
              'S_N_ARC_START_ANGLE'
              'S_N_DISTANCE'
              'S_N_MOVE_TYPE'
              'S_P_ARC_END_ANGLE'
              'S_P_ARC_INC_ANGLE'
              'S_P_ARC_RADIUS'
              'S_P_ARC_START_ANGLE'
              'S_P_DISTANCE'
              'S_P_MOVE_TYPE'
              'SCALLOP'
              'SEQ'
              'SEQ_INCREMENT'
              'SHAPE_DIAMETER'
              'SHAPE_INSIDE'
              'SHAPE_TYPE'
              'SKIM_CUT'
              'SKIP_1ST_HIT'
              'STOCK_DIAMETER'
              'SYS_COUNT'
              'SYSTEM_COMP'
              'TAB_CHAR'
              'TAB_CUT'
              'TAPER_ANGLE_END'
              'TAPER_ANGLE_START'
              'TIME'
              'TOOL'
              'TOOL_COMMENT'
              'TOOL_CORNER_RADIUS'
              'TOOL_DESCRIPTION'
              'TOOL_DIAMETER'
              'TOOL_DIE_CLEAR'
              'TOOL_INDEX_ANGLE'
              'TOOL_LENGTH'
              'TOOL_LOAD_ANGLE'
              'TOOL_M_CODE'
              'TOOL_MATERIAL'
              'TOOL_NUM_TEETH'
              'TOOL_QT_COMMENT'
              'TOOL_QTN'
              'TOOL_SERIAL_NUM'
              'TOOL_SPEC_NAME'
              'TOOL_SPEC_PATH'
              'TOOL_SPEC_TYPE'
              'TOOL_SUB_TYPE'
              'TOOL_TIP_CENTER'
              'TOOL_TYPE'
              'TOOL_WIDTH'
              'TOOL_XGL'
              'TOOL_ZGL'
              'TRANSFER_DISTANCE'
              'TURRET'
              'UV_GUIDE_OFFSET'
              'V_COMP'
              'VECTOR_I'
              'VECTOR_J'
              'VECTOR_K'
              'WIDTH'
              'WINDOW_HEIGHT'
              'WINDOW_ORIGIN_X'
              'WINDOW_ORIGIN_Y'
              'WINDOW_WIDTH'
              'WIRE_INCLINATION'
              'X_AXIS'
              'X_START_POSITION'
              'XY_GUIDE_OFFSET'
              'Y_AXIS'
              'YEAR'
              'YES'
              'Z_AXIS'
              'Z_START_POSITION')
            TokenTypes = 128
          end>
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Header'
        StyleName = 'Header'
        ConditionList = <
          item
            TagList.Strings = (
              'ARC_TO_ARC'
              'ARCS'
              'AXIS_MILLING'
              'AXIS_X_MILLING'
              'AXIS_Y_MILLING'
              'CHAMFER_CORNER'
              'CONIC_CORNER'
              'DECIMAL'
              'DECIMAL_POINT'
              'DEFINE'
              'DUAL_SPINDLE'
              'EDM4AXIS'
              'EQUAL_CORNER'
              'FACE_ARC'
              'FACE_DRILL'
              'FACE_MILL'
              'G_INT_LEFT_PLACES'
              'G_LEFT_PLACES'
              'G_RIGHT_PLACES'
              'HELICAL'
              'INDEPENDENT_CORNER'
              'INT_LEADING'
              'INT_TRAILING'
              'LASER_PLASMA_CUT_DATA'
              'LATHE'
              'LAYOUT_MACROS'
              'LEADING'
              'LIVE_Y_AXIS'
              'MACRO_ROTATE'
              'MACRO_ROTATE_X'
              'MACRO_ROTATE_Y'
              'MACRO_ROTATE_Z'
              'MACROS_CALL'
              'MACROS_LAYOUT'
              'MACROS_MAIN'
              'MACROS_MIRROR'
              'MACROS_MULT'
              'MACROS_OUT'
              'MACROS_REDEFINE'
              'MACROS_ROTATE'
              'MACROS_TAPE'
              'MACROS_XYZ'
              'MAXIMUM_LINE'
              'METRIC_SHIFT'
              'MILL_FACE_POLAR'
              'MILL_OD_CYLINDRICAL'
              'MULT_MACROS'
              'NO_SET_FILE'
              'OD_ARC'
              'OD_DRILL'
              'OD_MILL'
              'QUAD'
              'QUALIFIED_TOOLING'
              'RIGHT_ANGLE_SHEAR_ATTACHED'
              'SHARP_CORNER'
              'SINGLE_MACROS'
              'SLOW_INDEXER'
              'SORTER_ARM'
              'SPACE'
              'SYSTEM'
              'TAPER'
              'TAPER_DURING'
              'TAPER_FILLET'
              'TRAILING'
              'TRAPDOOR'
              'USE_SPECIAL_TOOL_TYPE'
              'VECTOR_COMP')
            TokenTypes = 128
          end>
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Constants'
        StyleName = 'Constants'
        ConditionList = <
          item
            TagList.Strings = (
              'ABSOLUTE'
              'ANGLE_INFEED'
              'ARCS'
              'BACK_BORING'
              'BORE_DWELL'
              'BORING'
              'BOTH'
              'CAMWORKS'
              'CCW'
              'CCW_ARC'
              'CENTER'
              'CENTER_LEFT'
              'CENTER_RIGHT'
              'CFIXED'
              'CFREE'
              'CHAMFER_CORNER'
              'CIRCLE_SHAPE'
              'CLEARANCE_PLANE'
              'CLOSED_SHAPE'
              'CONIC_CORNER'
              'CONSTANT'
              'CONSTANT_CUT'
              'CONSTANT_DEPTH'
              'CROSS'
              'CURRENT'
              'CW'
              'CW_ARC'
              'DIST_ALONG'
              'DOUBLED'
              'DRILLING'
              'EDM'
              'EDM_CORE'
              'EDM_MACROS'
              'EDM_PROFILE'
              'EDM_SKIM'
              'EDM4AXIS'
              'ENGLISH'
              'EQUAL_CORNER'
              'FACING'
              'FALSE'
              'FANUC_CORNERS'
              'FINE_BORING'
              'FLAT'
              'FPM'
              'FPR'
              'FRONT'
              'FULL_CIRCLE'
              'HALF_CIRCLE'
              'HIGH_SPEED_PECKING'
              'HOME'
              'HORIZONTAL'
              'INCREMENTAL'
              'INDEPENDENT_CORNER'
              'JIG'
              'LASER'
              'LATHE'
              'LATHE_CUTOFF'
              'LATHE_DRILLING'
              'LATHE_GROOVING'
              'LATHE_MISC'
              'LATHE_PROFILING'
              'LATHE_ROUGHING'
              'LATHE_SPECIAL'
              'LATHE_THREADING'
              'LEFT'
              'LINE'
              'MACHINE'
              'MAIN_SPINDLE'
              'MARC'
              'MCCW_ARC'
              'MCIRCLE'
              'MCW_ARC'
              'METRIC'
              'MGRID'
              'MILL'
              'MILL_CURVE_CUT'
              'MILL_DRILLING'
              'MILL_FACE'
              'MILL_FREEFORM_CUT'
              'MILL_LACE'
              'MILL_MACRO'
              'MILL_MISC'
              'MILL_OD'
              'MILL_PENCIL_CUT'
              'MILL_POCKET'
              'MILL_PROFILING'
              'MILL_ROUGH_CUT'
              'MILL_SLICE_CUT'
              'MILL_SPECIAL'
              'MILL_TOPO_CUT'
              'MILL_UV_CUT'
              'MLINE'
              'MPOINT'
              'MTEXT'
              'MULTIPLE'
              'MULTIPLE_RETRACT'
              'NEXT'
              'NO'
              'NONE'
              'OBROUND'
              'OFF'
              'OFFSET_LEFT'
              'OFFSET_RIGHT'
              'ON'
              'OPEN_SHAPE'
              'PART'
              'PECKING'
              'PERCENTAGE'
              'PLASMA'
              'PREVIOUS'
              'PROCAM_2D'
              'PROCAM_3D'
              'PROFILE'
              'PUNCH'
              'RADIAL'
              'RAPID'
              'RAPID_PLANE'
              'REAMING'
              'REAMING_DWELL'
              'REAR'
              'RECRAD'
              'RECTANGLE'
              'REVERSE_TAPPING'
              'RIGHT'
              'ROUND'
              'ROUND_CORNERS'
              'RPM'
              'SCRAP'
              'SFPM'
              'SHARP_CORNER'
              'SHARP_CORNERS'
              'SINGLE'
              'SINGLE_DEPTH'
              'SINGLE_HIT'
              'SINGLE_RETRACT'
              'SINGLED'
              'SPETOOL'
              'SPOT_DRILLING'
              'SQUARE'
              'SQUARE_CORNERS'
              'STRAIGHT_INFEED'
              'SUB_SPINDLE'
              'SYSTEM'
              'TABCUT'
              'TAPER'
              'TAPPING'
              'TIP'
              'TRIANGLE'
              'TRIANGLE_CORNERS'
              'TRUE'
              'TURNING'
              'VARIABLE_PECKING'
              'VERTICAL'
              'WASINO'
              'X_AXIS'
              'XZPOS'
              'Y_AXIS'
              'YES'
              'Z_AXIS'
              'Z_DEPTH'
              'Z_EXTRUDE'
              'Z_WALL'
              'ZERO')
            TokenTypes = 128
          end>
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Commands'
        StyleName = 'Commands'
        ConditionList = <
          item
            TagList.Strings = (
              'ABS'
              'ACOS'
              'ADD_CAD'
              'ADD_MACRO_END'
              'ADD_MACRO_START'
              'ADD_PUNCH_PATH'
              'ADD_PUNCH_PATTERN'
              'ADD_PUNCH_TOOL'
              'ADD_REPOSITION'
              'ADD_SPLINE'
              'ADD_TEXT'
              'APPEND'
              'ASIN'
              'ATAN'
              'ATAN2'
              'CALL'
              'CLOSE'
              'CLOSEDB'
              'CLOSETXT'
              'COS'
              'DELALT'
              'END_COMPLEX'
              'END_GROUP'
              'FASTLINE'
              'GET'
              'GET_DATA'
              'GET_OPER_COMMENTS'
              'GET_POINT'
              'GET_PQ_VALUES'
              'GET_SELECT_STRING'
              'GETMCS'
              'GETTOOLS'
              'GETTXT'
              'INCOFF'
              'INCON'
              'KILL'
              'LEFTSTRG'
              'LOOKUP'
              'LOOKUPDB'
              'LOWERTXT'
              'MACRO_INSERT'
              'MAKE_FILLET'
              'MIDSTRG'
              'OFFSET_INC'
              'OFFSET_XYZ'
              'OPEN_NEXT'
              'OPENALT'
              'OPENDB'
              'OPENRWTXT'
              'OPENTXT'
              'ORIGINALTXT'
              'PUT'
              'REPLACE'
              'RESETEOL'
              'RIGHTSTRG'
              'ROUNDOFF'
              'SECTIONEXIST'
              'SELECT_TOOL'
              'SET_COLOR'
              'SET_LAYER'
              'SET_LINE_FONT'
              'SET_TEXT_COLOR'
              'SET_TEXT_FONT'
              'SETOFF'
              'SETON'
              'SETTXT'
              'SIN'
              'SPACES'
              'SQRT'
              'START_COMPLEX'
              'START_GROUP'
              'STRCAT'
              'STRGLOWER'
              'STRGUPPER'
              'SYS_CANNED'
              'TAN'
              'TOOLST'
              'UPPERTXT')
            TokenTypes = 128
          end>
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Syntax'
        StyleName = 'Syntax'
        ConditionList = <
          item
            TagList.Strings = (
              'AND'
              'ELSE'
              'ENDIF'
              'GOTO'
              'IF'
              'OR'
              'RETURN'
              'THEN')
            TokenTypes = 128
          end>
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpAny
      end
      item
        DisplayName = 'LibraryFiles'
        StyleName = 'LibraryFiles'
        ConditionList = <
          item
            TokenTypes = 512
          end>
        Highlight = True
        GroupFmt = 'LIBRARY FILES'
        DynHighlight = dhBound
        HighlightPos = cpAny
        NoEndRule = True
      end
      item
        DisplayName = 'IncludeFiles'
        StyleName = 'IncludeFiles'
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        Highlight = True
        GroupFmt = 'INCLUDE FILES'
        DynHighlight = dhBound
        HighlightPos = cpAny
        NoEndRule = True
      end
      item
        DisplayName = 'OperID'
        StyleName = 'OperID'
        ConditionList = <
          item
            TagList.Strings = (
              ':OPERID=EDM_CORE'
              ':OPERID=EDM_MACROS'
              ':OPERID=EDM_PROFILE'
              ':OPERID=EDM_SKIM'
              ':OPERID=LATHE_CUTOFF'
              ':OPERID=LATHE_DRILLING'
              ':OPERID=LATHE_GROOVING'
              ':OPERID=LATHE_MISC'
              ':OPERID=LATHE_PROFILING'
              ':OPERID=LATHE_ROUGHING'
              ':OPERID=LATHE_SPECIAL'
              ':OPERID=LATHE_THREADING'
              ':OPERID=MILL_CURVE_CUT'
              ':OPERID=MILL_FREEFORM_CUT'
              ':OPERID=MILL_LACE'
              ':OPERID=MILL_MACRO'
              ':OPERID=MILL_MISC'
              ':OPERID=MILL_PENCIL_CUT'
              ':OPERID=MILL_POCKET'
              ':OPERID=MILL_PROFILING'
              ':OPERID=MILL_ROUGH_CUT'
              ':OPERID=MILL_SLICE_CUT'
              ':OPERID=MILL_SPECIAL'
              ':OPERID=MILL_TOPO_CUT'
              ':OPERID=MILL_UV_CUT')
            TokenTypes = 2048
          end>
        Highlight = True
        GroupFmt = 'OPERATION TYPES'
        DynHighlight = dhBound
        HighlightPos = cpAny
        NoEndRule = True
      end
      item
        DisplayName = 'OperSub'
        StyleName = 'OperSub'
        ConditionList = <
          item
            TagList.Strings = (
              ':OPERSUB=BACK_BORING'
              ':OPERSUB=BORE_DWELL'
              ':OPERSUB=BORING'
              ':OPERSUB=DRILLING'
              ':OPERSUB=FINE_BORING'
              ':OPERSUB=HIGH_SPEED_PECKING'
              ':OPERSUB=PECKING'
              ':OPERSUB=REAMING'
              ':OPERSUB=REAMING_DWELL'
              ':OPERSUB=REVERSE_TAPPING'
              ':OPERSUB=SPOT_DRILLING'
              ':OPERSUB=TAPPING'
              ':OPERSUB=VARIABLE_PECKING')
            TokenTypes = 4096
          end>
        Highlight = True
        GroupFmt = 'DRILLING TYPES'
        DynHighlight = dhBound
        HighlightPos = cpAny
        NoEndRule = True
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Attributes'
      'Sections'
      'Syntax'
      'Variables'
      'LibraryFiles'
      'IncludeFiles'
      'OperID'
      'OperSub'
      'Value'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    DefaultStyleName = 'Default'
    Extentions = 'src lib mch atr sec sin set cal reg'
    LexerName = 'Teksoft Posts'
    Left = 140
    Top = 160
  end
  object SyntAnal41: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Default'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Float'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Integer'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end>
    TokenRules = <
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Float'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Integer'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\(\*.*?(\*\)|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\{.*?(\}|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Integer'
        TokenType = 7
        Expression = '\$[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Tag/Alarm'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'alarm'
              'tag')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'Tag('#39'Tag1'#39') + (0.5 * Tag(17) - 67)')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    LexerName = 'Expressions'
    Internal = True
  end
  object SyntAnal42: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Style 1'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clScrollBar
      end>
    TokenRules = <
      item
        DisplayName = 'Token rule 5'
        StyleName = 'Style 1'
        Expression = '((\w+)\.)*(\w+)\s=\s((\w+)\.)*(\w+)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Token rule 4'
        StyleName = 'Style 1'
        Expression = '(\w+)\s:=\s(\w+)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Token rule 1'
        StyleName = 'Style 1'
        Expression = 
          '(http|ftp)://'#13#10'[\w\d\-]+'#13#10'(\.[\w\d\-]+)+'#13#10'(:\d\d?\d?\d?\d?)?'#13#10'((' +
          '(/[%+\w\d\-\\\.]*)+)*)'#13#10'   (\?[^\s=&"]+=[^\s=&"]+(&[^\s=&"]+=[^\' +
          's=&"]+)*)?'#13#10'   (\#[\w\d\-%+]+)?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Token rule 2'
        StyleName = 'Style 1'
        Expression = 
          'www(\.[\w\d\-]+)+(:\d\d?\d?\d?\d?)?(((/[%+\w\d\-\\\.]*)+)*)(\?[^' +
          '\s=&"]+=[^\s=&"]+(&[^\s=&"]+=[^\s=&"]+)*)?(\#[\w\d\-%+]+)?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Token rule 3'
        StyleName = 'Style 1'
        Expression = '[_a-z\d\-\.]+@[_a-z\d\-]+(\.[_a-z\d\-]+)+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Lexem'
        Expression = '.*\b'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'txt'
    LexerName = 'Def text'
    Internal = True
  end
  object SyntAnal43: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Column 1 (Names)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Column 2 (Values)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Column 1'
        StyleName = 'Column 1 (Names)'
        Expression = '^.{0,20}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Column 2'
        StyleName = 'Column 2 (Values)'
        TokenType = 1
        Expression = '.*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Column 1'
      'Column 2')
    MarkedBlockStyle = 'Marked block'
    LexerName = 'Two Columns'
    SkipSpaces = False
    Internal = True
  end
  object SyntAnal44: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Style 1'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = cl3DDkShadow
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Style 2'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Style 3'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Style 4'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Style 5'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Style 6'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'First'
        StyleName = 'Style 1'
        Expression = '^.*?\t'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Next columns'
        TokenType = 1
        Expression = '.*?(\t|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Column 2'
        StyleName = 'Style 2'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 2
          end
          item
            TokenTypes = 1
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Column 3'
        StyleName = 'Style 3'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end
          item
            TokenTypes = 1
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Column 4'
        StyleName = 'Style 4'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end
          item
            TokenTypes = 1
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'First'
      'Next columns')
    MarkedBlockStyle = 'Marked block'
    LexerName = 'Multi Columns'
    Internal = True
  end
  object SyntAnal45: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Leak Item'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'File'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Func'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Leak item'
        StyleName = 'Leak Item'
        TokenType = 1
        Expression = '^--.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '[a-f\d]+\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'File'
        StyleName = 'File'
        Expression = '\[.*?\.pas\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'FuncName'
        StyleName = 'Func'
        TokenType = 4
        Expression = '\[.*?\]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Tag block rule 1'
        ConditionList = <
          item
            TokenTypes = 2
          end>
        HighlightPos = cpAny
        SelfClose = True
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    LexerName = 'FastMM Leaks Report'
    Internal = True
  end
  object SyntAnal46: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Empty line'
        Expression = '^\s*[\n\r]{1,2}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'not empty line'
        TokenType = 1
        Expression = '^.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Paragraph'
        BlockName = 'Paragraph'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Paragraph end'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Paragraph end'
        BlockName = 'Paragraph'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Empty'
      'Line')
    Extentions = 'txt'
    LexerName = 'Text files'
    SkipSpaces = False
  end
  object SyntAnal47: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Date'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Time'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BorderColorLeft = clGray
        BorderTypeRight = blDouble
        BorderColorRight = clGray
      end
      item
        DisplayName = 'Separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clActiveBorder
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        Hidden = True
      end
      item
        DisplayName = 'Info'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15658734
        BorderTypeRight = blDot
        BorderColorRight = clGray
      end
      item
        DisplayName = 'Error'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWhite
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clRed
        BorderTypeRight = blDot
        BorderColorRight = clGray
      end
      item
        DisplayName = 'Warning'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 16777164
        BorderTypeRight = blDot
        BorderColorRight = clGray
      end
      item
        DisplayName = 'Level'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 16771818
        BorderTypeRight = blDouble
        BorderColorRight = clGray
      end
      item
        DisplayName = 'Message'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Times New Roman'
        Font.Style = []
        BgColor = 14155775
        FormatType = ftCustomFont
      end>
    TokenRules = <
      item
        DisplayName = 'Message line'
        StyleName = 'Message'
        Expression = '^\t.*\r\n'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Separator'
        StyleName = 'Separator'
        TokenType = 1
        Expression = '\|'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Date'
        StyleName = 'Date'
        TokenType = 2
        Expression = '^.{11,11}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Time'
        StyleName = 'Time'
        TokenType = 3
        Expression = '.{13,13}'
        ColumnFrom = 12
        ColumnTo = 12
      end
      item
        DisplayName = 'Info'
        StyleName = 'Info'
        TokenType = 4
        Expression = '(?-x) Info    '
        ColumnFrom = 26
        ColumnTo = 26
      end
      item
        DisplayName = 'Error'
        StyleName = 'Error'
        TokenType = 4
        Expression = '(?-x) Error   '
        ColumnFrom = 26
        ColumnTo = 26
      end
      item
        DisplayName = 'Warning'
        StyleName = 'Warning'
        TokenType = 4
        Expression = '(?-x) Warning '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Level'
        StyleName = 'Level'
        TokenType = 5
        Expression = '[^\|]{4,5}'
        ColumnFrom = 35
        ColumnTo = 37
      end
      item
        DisplayName = 'Message'
        StyleName = 'Message'
        Expression = '.*\r\n'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'ML Message'
        BlockName = 'ML Message'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 1
          end
          item
            TokenTypes = 1
          end>
        BlockOffset = 1
        BlockEnd = 'ML Message End'
        EndOfTextClose = True
        HighlightPos = cpAny
        CollapseFmt = '%s1 ...'
      end
      item
        DisplayName = 'ML Message End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 1
          end
          item
            TokenTypes = 1
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Message'
      'Separator'
      'Date'
      'Time'
      'Type'
      'Level')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'log'
    LexerName = 'TrVLog'
    SkipSpaces = False
    Internal = True
  end
  object SyntAnal48: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Table'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Alias'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Operators'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tree (Bold)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tree (Section)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tree (item)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 2'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'create'
              'delete'
              'from'
              'group'
              'having'
              'insert'
              'order'
              'select'
              'union'
              'update'
              'where')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 10
      end
      item
        DisplayName = 'Operations'
        StyleName = 'Operators'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'all'
              'and'
              'any'
              'as'
              'avg'
              'between'
              'by'
              'count'
              'distinct'
              'exists'
              'grant'
              'in'
              'index'
              'inner'
              'is'
              'join'
              'left'
              'like'
              'max'
              'min'
              'not'
              'null'
              'on'
              'option'
              'or'
              'outer'
              'some'
              'table'
              'view')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Functions'
        StyleName = 'Function'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'CONCAT'
              'DATE_FORMAT'
              'TIMEDIFF')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Table or Alias'
        StyleName = 'Table'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Table'
        StyleName = 'Table'
        BlockName = 'From'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            CondType = tcNotEqual
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 1032
          end>
        IdentIndex = 1
        HighlightPos = cpAny
        TokenType = 7
      end
      item
        DisplayName = 'Section End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Alias'
        StyleName = 'Alias'
        BlockName = 'From'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 128
          end>
        HighlightPos = cpAny
        TokenType = 8
      end
      item
        DisplayName = 'Database.Table to Tree'
        BlockName = 'From'
        ConditionList = <
          item
            TokenTypes = 132
          end
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s0.%s-2'
        GroupFmt = 'Used Tables'
        HighlightPos = cpAny
        CancelNextRules = True
        NoEndRule = True
        TreeItemStyle = 'Tree (item)'
        TreeGroupStyle = 'Tree (Bold)'
        TreeItemImage = 4
      end
      item
        DisplayName = 'Table to Tree'
        BlockName = 'From'
        ConditionList = <
          item
            TokenTypes = 128
          end
          item
            TagList.Strings = (
              '.')
            CondType = tcNotEqual
            TokenTypes = 8
          end>
        BlockOffset = -1
        NotCollapsed = True
        GroupFmt = 'Used Tables'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemStyle = 'Tree (item)'
        TreeGroupStyle = 'Tree (Bold)'
        TreeItemImage = 4
      end
      item
        DisplayName = 'Alias to tree'
        BlockName = 'From'
        StrictParent = True
        ConditionList = <
          item
            TokenTypes = 256
          end>
        BlockOffset = 1
        NotCollapsed = True
        NameFmt = '%s0 = %s1'
        GroupFmt = 'Aliases'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemStyle = 'Tree (item)'
        TreeGroupStyle = 'Tree (Bold)'
        TreeItemImage = 1
      end
      item
        DisplayName = 'Statement start'
        ConditionList = <
          item
            TagList.Strings = (
              'delete'
              'insert'
              'select'
              'update')
            TokenTypes = 1024
            IgnoreCase = True
          end>
        EndOfTextClose = True
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        SelfClose = True
        TreeItemStyle = 'Tree (Bold)'
        TreeItemImage = 0
      end
      item
        DisplayName = 'Select'
        ConditionList = <
          item
            TagList.Strings = (
              'select')
            TokenTypes = 1024
            IgnoreCase = True
          end>
        BlockEnd = 'Section End'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'From'
        ConditionList = <
          item
            TagList.Strings = (
              'from')
            TokenTypes = 1024
            IgnoreCase = True
          end>
        BlockEnd = 'Section End'
        EndOfTextClose = True
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        TreeItemStyle = 'Tree (Section)'
        TreeItemImage = 2
      end
      item
        DisplayName = 'Where'
        ConditionList = <
          item
            TagList.Strings = (
              'where')
            TokenTypes = 1024
            IgnoreCase = True
          end>
        BlockEnd = 'Section End'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        TreeItemStyle = 'Tree (Section)'
        TreeItemImage = 2
      end
      item
        DisplayName = 'Group'
        ConditionList = <
          item
            TagList.Strings = (
              'group')
            TokenTypes = 1024
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        TreeItemStyle = 'Tree (Section)'
        TreeItemImage = 2
      end
      item
        DisplayName = 'Order'
        ConditionList = <
          item
            TagList.Strings = (
              'order')
            TokenTypes = 1024
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        TreeItemStyle = 'Tree (Section)'
        TreeItemImage = 2
      end
      item
        DisplayName = 'Having'
        ConditionList = <
          item
            TagList.Strings = (
              'having')
            TokenTypes = 1024
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        TreeItemStyle = 'Tree (Section)'
        TreeItemImage = 2
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/*Syntax highlighting*/'
      
        'SELECT c.session , c.username ,TIMEDIFF(max(c.datetime) , min(c.' +
        'datetime))'
      
        'FROM  livehelp_domain_user a , livehelp_users b, livehelp_messag' +
        'es c'
      'WHERE a.id_domain = 29 AND'
      '      a.id_user = b.id AND'
      '      CONCAT( b.firstname, '#39' '#39',b.lastname)   = c.username AND'
      '      DATE_FORMAT(c.datetime,'#39'%m/%d/%Y'#39') ='#39'09/21/2006'#39
      'GROUP BY c.session'
      'ORDER BY c.session,c.username'
      '')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Table name'
      'Alias'
      'Function'
      'Main KeyWords')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'sql'
    LexerName = 'SQL'
    Left = 144
    Top = 184
  end
end
